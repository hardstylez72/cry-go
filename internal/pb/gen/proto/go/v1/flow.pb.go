// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: v1/flow.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlowShared struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Label       string                 `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	ParentId    string                 `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeletedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Tasks       []*Task                `protobuf:"bytes,7,rep,name=tasks,proto3" json:"tasks,omitempty"`
	CreatorId   string                 `protobuf:"bytes,8,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
}

func (x *FlowShared) Reset() {
	*x = FlowShared{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowShared) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowShared) ProtoMessage() {}

func (x *FlowShared) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowShared.ProtoReflect.Descriptor instead.
func (*FlowShared) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{0}
}

func (x *FlowShared) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowShared) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FlowShared) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FlowShared) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *FlowShared) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FlowShared) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *FlowShared) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *FlowShared) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

type RandomFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label string        `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Tasks []*RandomTask `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *RandomFlow) Reset() {
	*x = RandomFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomFlow) ProtoMessage() {}

func (x *RandomFlow) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomFlow.ProtoReflect.Descriptor instead.
func (*RandomFlow) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{1}
}

func (x *RandomFlow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RandomFlow) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *RandomFlow) GetTasks() []*RandomTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type RandomTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Optional bool     `protobuf:"varint,1,opt,name=optional,proto3" json:"optional,omitempty"`
	TaskType TaskType `protobuf:"varint,2,opt,name=taskType,proto3,enum=task.TaskType" json:"taskType,omitempty"`
	// Types that are assignable to P:
	//
	//	*RandomTask_Swap
	//	*RandomTask_Simple
	P isRandomTask_P `protobuf_oneof:"p"`
}

func (x *RandomTask) Reset() {
	*x = RandomTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomTask) ProtoMessage() {}

func (x *RandomTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomTask.ProtoReflect.Descriptor instead.
func (*RandomTask) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{2}
}

func (x *RandomTask) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RandomTask) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_StargateBridge
}

func (m *RandomTask) GetP() isRandomTask_P {
	if m != nil {
		return m.P
	}
	return nil
}

func (x *RandomTask) GetSwap() *RPswap {
	if x, ok := x.GetP().(*RandomTask_Swap); ok {
		return x.Swap
	}
	return nil
}

func (x *RandomTask) GetSimple() *RPsimple {
	if x, ok := x.GetP().(*RandomTask_Simple); ok {
		return x.Simple
	}
	return nil
}

type isRandomTask_P interface {
	isRandomTask_P()
}

type RandomTask_Swap struct {
	Swap *RPswap `protobuf:"bytes,3,opt,name=swap,proto3,oneof"`
}

type RandomTask_Simple struct {
	Simple *RPsimple `protobuf:"bytes,4,opt,name=simple,proto3,oneof"`
}

func (*RandomTask_Swap) isRandomTask_P() {}

func (*RandomTask_Simple) isRandomTask_P() {}

type RPsimple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network Network `protobuf:"varint,1,opt,name=network,proto3,enum=shared.Network" json:"network,omitempty"`
}

func (x *RPsimple) Reset() {
	*x = RPsimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPsimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPsimple) ProtoMessage() {}

func (x *RPsimple) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPsimple.ProtoReflect.Descriptor instead.
func (*RPsimple) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{3}
}

func (x *RPsimple) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_ARBITRUM
}

type RPswap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RPswapItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RPswap) Reset() {
	*x = RPswap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPswap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPswap) ProtoMessage() {}

func (x *RPswap) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPswap.ProtoReflect.Descriptor instead.
func (*RPswap) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{4}
}

func (x *RPswap) GetItems() []*RPswapItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type RPswapItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network Network `protobuf:"varint,1,opt,name=network,proto3,enum=shared.Network" json:"network,omitempty"`
	From    Token   `protobuf:"varint,2,opt,name=from,proto3,enum=shared.Token" json:"from,omitempty"`
	To      Token   `protobuf:"varint,3,opt,name=to,proto3,enum=shared.Token" json:"to,omitempty"`
	Am      *Amount `protobuf:"bytes,4,opt,name=am,proto3" json:"am,omitempty"`
}

func (x *RPswapItem) Reset() {
	*x = RPswapItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPswapItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPswapItem) ProtoMessage() {}

func (x *RPswapItem) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPswapItem.ProtoReflect.Descriptor instead.
func (*RPswapItem) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{5}
}

func (x *RPswapItem) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_ARBITRUM
}

func (x *RPswapItem) GetFrom() Token {
	if x != nil {
		return x.From
	}
	return Token_USDT
}

func (x *RPswapItem) GetTo() Token {
	if x != nil {
		return x.To
	}
	return Token_USDT
}

func (x *RPswapItem) GetAm() *Amount {
	if x != nil {
		return x.Am
	}
	return nil
}

type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label       string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Tasks       []*Task                `protobuf:"bytes,5,rep,name=tasks,proto3" json:"tasks,omitempty"`
	NextId      *string                `protobuf:"bytes,6,opt,name=next_id,json=nextId,proto3,oneof" json:"next_id,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeletedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	RandomTasks []*Task                `protobuf:"bytes,9,rep,name=random_tasks,json=randomTasks,proto3" json:"random_tasks,omitempty"`
	Base        *FlowBase              `protobuf:"bytes,10,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{6}
}

func (x *Flow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Flow) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Flow) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Flow) GetNextId() string {
	if x != nil && x.NextId != nil {
		return *x.NextId
	}
	return ""
}

func (x *Flow) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Flow) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Flow) GetRandomTasks() []*Task {
	if x != nil {
		return x.RandomTasks
	}
	return nil
}

func (x *Flow) GetBase() *FlowBase {
	if x != nil {
		return x.Base
	}
	return nil
}

type FlowBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token Token `protobuf:"varint,1,opt,name=token,proto3,enum=shared.Token" json:"token,omitempty"`
}

func (x *FlowBase) Reset() {
	*x = FlowBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowBase) ProtoMessage() {}

func (x *FlowBase) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowBase.ProtoReflect.Descriptor instead.
func (*FlowBase) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{7}
}

func (x *FlowBase) GetToken() Token {
	if x != nil {
		return x.Token
	}
	return Token_USDT
}

type UpdateFlowV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label  string       `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Blocks []*FlowBlock `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *UpdateFlowV2Request) Reset() {
	*x = UpdateFlowV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowV2Request) ProtoMessage() {}

func (x *UpdateFlowV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowV2Request.ProtoReflect.Descriptor instead.
func (*UpdateFlowV2Request) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateFlowV2Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateFlowV2Request) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UpdateFlowV2Request) GetBlocks() []*FlowBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type UpdateFlowV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label  string       `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Blocks []*FlowBlock `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *UpdateFlowV2Response) Reset() {
	*x = UpdateFlowV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowV2Response) ProtoMessage() {}

func (x *UpdateFlowV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowV2Response.ProtoReflect.Descriptor instead.
func (*UpdateFlowV2Response) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateFlowV2Response) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateFlowV2Response) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UpdateFlowV2Response) GetBlocks() []*FlowBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GetFlowV2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetFlowV2Req) Reset() {
	*x = GetFlowV2Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowV2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowV2Req) ProtoMessage() {}

func (x *GetFlowV2Req) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowV2Req.ProtoReflect.Descriptor instead.
func (*GetFlowV2Req) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{10}
}

func (x *GetFlowV2Req) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetFlowV2Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label  string       `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Blocks []*FlowBlock `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetFlowV2Res) Reset() {
	*x = GetFlowV2Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowV2Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowV2Res) ProtoMessage() {}

func (x *GetFlowV2Res) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowV2Res.ProtoReflect.Descriptor instead.
func (*GetFlowV2Res) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{11}
}

func (x *GetFlowV2Res) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetFlowV2Res) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GetFlowV2Res) GetBlocks() []*FlowBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type OnlyRandomFlowPreviewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartToken        Token         `protobuf:"varint,1,opt,name=start_token,json=startToken,proto3,enum=shared.Token" json:"start_token,omitempty"`
	FinishToken       Token         `protobuf:"varint,2,opt,name=finish_token,json=finishToken,proto3,enum=shared.Token" json:"finish_token,omitempty"`
	StartNetwork      Network       `protobuf:"varint,3,opt,name=start_network,json=startNetwork,proto3,enum=shared.Network" json:"start_network,omitempty"`
	Tasks             []*RandomTask `protobuf:"bytes,4,rep,name=tasks,proto3" json:"tasks,omitempty"`
	TaskCount         int64         `protobuf:"varint,6,opt,name=task_count,json=taskCount,proto3" json:"task_count,omitempty"`
	IgnoreStartToken  bool          `protobuf:"varint,7,opt,name=ignore_start_token,json=ignoreStartToken,proto3" json:"ignore_start_token,omitempty"`
	IgnoreFinishToken bool          `protobuf:"varint,8,opt,name=ignore_finish_token,json=ignoreFinishToken,proto3" json:"ignore_finish_token,omitempty"`
	MinDelay          int64         `protobuf:"varint,9,opt,name=min_delay,json=minDelay,proto3" json:"min_delay,omitempty"`
	MaxDelay          int64         `protobuf:"varint,10,opt,name=max_delay,json=maxDelay,proto3" json:"max_delay,omitempty"`
}

func (x *OnlyRandomFlowPreviewReq) Reset() {
	*x = OnlyRandomFlowPreviewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlyRandomFlowPreviewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlyRandomFlowPreviewReq) ProtoMessage() {}

func (x *OnlyRandomFlowPreviewReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlyRandomFlowPreviewReq.ProtoReflect.Descriptor instead.
func (*OnlyRandomFlowPreviewReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{12}
}

func (x *OnlyRandomFlowPreviewReq) GetStartToken() Token {
	if x != nil {
		return x.StartToken
	}
	return Token_USDT
}

func (x *OnlyRandomFlowPreviewReq) GetFinishToken() Token {
	if x != nil {
		return x.FinishToken
	}
	return Token_USDT
}

func (x *OnlyRandomFlowPreviewReq) GetStartNetwork() Network {
	if x != nil {
		return x.StartNetwork
	}
	return Network_ARBITRUM
}

func (x *OnlyRandomFlowPreviewReq) GetTasks() []*RandomTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *OnlyRandomFlowPreviewReq) GetTaskCount() int64 {
	if x != nil {
		return x.TaskCount
	}
	return 0
}

func (x *OnlyRandomFlowPreviewReq) GetIgnoreStartToken() bool {
	if x != nil {
		return x.IgnoreStartToken
	}
	return false
}

func (x *OnlyRandomFlowPreviewReq) GetIgnoreFinishToken() bool {
	if x != nil {
		return x.IgnoreFinishToken
	}
	return false
}

func (x *OnlyRandomFlowPreviewReq) GetMinDelay() int64 {
	if x != nil {
		return x.MinDelay
	}
	return 0
}

func (x *OnlyRandomFlowPreviewReq) GetMaxDelay() int64 {
	if x != nil {
		return x.MaxDelay
	}
	return 0
}

type OnlyRandomFlowFromTokensRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []Token `protobuf:"varint,1,rep,packed,name=tokens,proto3,enum=shared.Token" json:"tokens,omitempty"`
}

func (x *OnlyRandomFlowFromTokensRes) Reset() {
	*x = OnlyRandomFlowFromTokensRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlyRandomFlowFromTokensRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlyRandomFlowFromTokensRes) ProtoMessage() {}

func (x *OnlyRandomFlowFromTokensRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlyRandomFlowFromTokensRes.ProtoReflect.Descriptor instead.
func (*OnlyRandomFlowFromTokensRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{13}
}

func (x *OnlyRandomFlowFromTokensRes) GetTokens() []Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type OnlyRandomFlowPreviewRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow          []*UniqueFlow `protobuf:"bytes,1,rep,name=flow,proto3" json:"flow,omitempty"`
	UniquePercent float64       `protobuf:"fixed64,2,opt,name=unique_percent,json=uniquePercent,proto3" json:"unique_percent,omitempty"`
	Tokens        []*TokenArr   `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *OnlyRandomFlowPreviewRes) Reset() {
	*x = OnlyRandomFlowPreviewRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlyRandomFlowPreviewRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlyRandomFlowPreviewRes) ProtoMessage() {}

func (x *OnlyRandomFlowPreviewRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlyRandomFlowPreviewRes.ProtoReflect.Descriptor instead.
func (*OnlyRandomFlowPreviewRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{14}
}

func (x *OnlyRandomFlowPreviewRes) GetFlow() []*UniqueFlow {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *OnlyRandomFlowPreviewRes) GetUniquePercent() float64 {
	if x != nil {
		return x.UniquePercent
	}
	return 0
}

func (x *OnlyRandomFlowPreviewRes) GetTokens() []*TokenArr {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type FlowPreviewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label  string       `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Blocks []*FlowBlock `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *FlowPreviewReq) Reset() {
	*x = FlowPreviewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowPreviewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPreviewReq) ProtoMessage() {}

func (x *FlowPreviewReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPreviewReq.ProtoReflect.Descriptor instead.
func (*FlowPreviewReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{15}
}

func (x *FlowPreviewReq) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FlowPreviewReq) GetBlocks() []*FlowBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type FlowPreviewRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow          []*UniqueFlow `protobuf:"bytes,1,rep,name=flow,proto3" json:"flow,omitempty"`
	UniquePercent float64       `protobuf:"fixed64,2,opt,name=unique_percent,json=uniquePercent,proto3" json:"unique_percent,omitempty"`
}

func (x *FlowPreviewRes) Reset() {
	*x = FlowPreviewRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowPreviewRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPreviewRes) ProtoMessage() {}

func (x *FlowPreviewRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPreviewRes.ProtoReflect.Descriptor instead.
func (*FlowPreviewRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{16}
}

func (x *FlowPreviewRes) GetFlow() []*UniqueFlow {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *FlowPreviewRes) GetUniquePercent() float64 {
	if x != nil {
		return x.UniquePercent
	}
	return 0
}

type TokenArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From Token   `protobuf:"varint,1,opt,name=from,proto3,enum=shared.Token" json:"from,omitempty"`
	To   []Token `protobuf:"varint,2,rep,packed,name=to,proto3,enum=shared.Token" json:"to,omitempty"`
}

func (x *TokenArr) Reset() {
	*x = TokenArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenArr) ProtoMessage() {}

func (x *TokenArr) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenArr.ProtoReflect.Descriptor instead.
func (*TokenArr) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{17}
}

func (x *TokenArr) GetFrom() Token {
	if x != nil {
		return x.From
	}
	return Token_USDT
}

func (x *TokenArr) GetTo() []Token {
	if x != nil {
		return x.To
	}
	return nil
}

type UniqueFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *UniqueFlow) Reset() {
	*x = UniqueFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueFlow) ProtoMessage() {}

func (x *UniqueFlow) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueFlow.ProtoReflect.Descriptor instead.
func (*UniqueFlow) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{18}
}

func (x *UniqueFlow) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type CreateFlowV2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label  string       `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Blocks []*FlowBlock `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *CreateFlowV2Req) Reset() {
	*x = CreateFlowV2Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowV2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowV2Req) ProtoMessage() {}

func (x *CreateFlowV2Req) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowV2Req.ProtoReflect.Descriptor instead.
func (*CreateFlowV2Req) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{19}
}

func (x *CreateFlowV2Req) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CreateFlowV2Req) GetBlocks() []*FlowBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type FlowBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight int64 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	// Types that are assignable to Block:
	//
	//	*FlowBlock_Man
	//	*FlowBlock_Rand
	Block isFlowBlock_Block `protobuf_oneof:"block"`
}

func (x *FlowBlock) Reset() {
	*x = FlowBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowBlock) ProtoMessage() {}

func (x *FlowBlock) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowBlock.ProtoReflect.Descriptor instead.
func (*FlowBlock) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{20}
}

func (x *FlowBlock) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (m *FlowBlock) GetBlock() isFlowBlock_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (x *FlowBlock) GetMan() *FlowBlockMan {
	if x, ok := x.GetBlock().(*FlowBlock_Man); ok {
		return x.Man
	}
	return nil
}

func (x *FlowBlock) GetRand() *FlowBlockRand {
	if x, ok := x.GetBlock().(*FlowBlock_Rand); ok {
		return x.Rand
	}
	return nil
}

type isFlowBlock_Block interface {
	isFlowBlock_Block()
}

type FlowBlock_Man struct {
	Man *FlowBlockMan `protobuf:"bytes,2,opt,name=man,proto3,oneof"`
}

type FlowBlock_Rand struct {
	Rand *FlowBlockRand `protobuf:"bytes,3,opt,name=rand,proto3,oneof"`
}

func (*FlowBlock_Man) isFlowBlock_Block() {}

func (*FlowBlock_Rand) isFlowBlock_Block() {}

type FlowBlockMan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks       []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	RandomTasks []*Task `protobuf:"bytes,2,rep,name=random_tasks,json=randomTasks,proto3" json:"random_tasks,omitempty"`
}

func (x *FlowBlockMan) Reset() {
	*x = FlowBlockMan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowBlockMan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowBlockMan) ProtoMessage() {}

func (x *FlowBlockMan) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowBlockMan.ProtoReflect.Descriptor instead.
func (*FlowBlockMan) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{21}
}

func (x *FlowBlockMan) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *FlowBlockMan) GetRandomTasks() []*Task {
	if x != nil {
		return x.RandomTasks
	}
	return nil
}

type FlowBlockRand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartToken               Token         `protobuf:"varint,1,opt,name=start_token,json=startToken,proto3,enum=shared.Token" json:"start_token,omitempty"`
	FinishToken              Token         `protobuf:"varint,2,opt,name=finish_token,json=finishToken,proto3,enum=shared.Token" json:"finish_token,omitempty"`
	StartNetwork             Network       `protobuf:"varint,3,opt,name=start_network,json=startNetwork,proto3,enum=shared.Network" json:"start_network,omitempty"`
	Tasks                    []*RandomTask `protobuf:"bytes,4,rep,name=tasks,proto3" json:"tasks,omitempty"`
	TaskCount                int64         `protobuf:"varint,6,opt,name=task_count,json=taskCount,proto3" json:"task_count,omitempty"`
	MinDelay                 int64         `protobuf:"varint,7,opt,name=min_delay,json=minDelay,proto3" json:"min_delay,omitempty"`
	MaxDelay                 int64         `protobuf:"varint,8,opt,name=max_delay,json=maxDelay,proto3" json:"max_delay,omitempty"`
	NativeTokenMinPercent    int64         `protobuf:"varint,9,opt,name=native_token_min_percent,json=nativeTokenMinPercent,proto3" json:"native_token_min_percent,omitempty"`
	NativeTokenMaxPercent    int64         `protobuf:"varint,10,opt,name=native_token_max_percent,json=nativeTokenMaxPercent,proto3" json:"native_token_max_percent,omitempty"`
	NonnativeTokenMinPercent int64         `protobuf:"varint,11,opt,name=nonnative_token_min_percent,json=nonnativeTokenMinPercent,proto3" json:"nonnative_token_min_percent,omitempty"`
	NonnativeTokenMaxPercent int64         `protobuf:"varint,12,opt,name=nonnative_token_max_percent,json=nonnativeTokenMaxPercent,proto3" json:"nonnative_token_max_percent,omitempty"`
}

func (x *FlowBlockRand) Reset() {
	*x = FlowBlockRand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowBlockRand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowBlockRand) ProtoMessage() {}

func (x *FlowBlockRand) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowBlockRand.ProtoReflect.Descriptor instead.
func (*FlowBlockRand) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{22}
}

func (x *FlowBlockRand) GetStartToken() Token {
	if x != nil {
		return x.StartToken
	}
	return Token_USDT
}

func (x *FlowBlockRand) GetFinishToken() Token {
	if x != nil {
		return x.FinishToken
	}
	return Token_USDT
}

func (x *FlowBlockRand) GetStartNetwork() Network {
	if x != nil {
		return x.StartNetwork
	}
	return Network_ARBITRUM
}

func (x *FlowBlockRand) GetTasks() []*RandomTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *FlowBlockRand) GetTaskCount() int64 {
	if x != nil {
		return x.TaskCount
	}
	return 0
}

func (x *FlowBlockRand) GetMinDelay() int64 {
	if x != nil {
		return x.MinDelay
	}
	return 0
}

func (x *FlowBlockRand) GetMaxDelay() int64 {
	if x != nil {
		return x.MaxDelay
	}
	return 0
}

func (x *FlowBlockRand) GetNativeTokenMinPercent() int64 {
	if x != nil {
		return x.NativeTokenMinPercent
	}
	return 0
}

func (x *FlowBlockRand) GetNativeTokenMaxPercent() int64 {
	if x != nil {
		return x.NativeTokenMaxPercent
	}
	return 0
}

func (x *FlowBlockRand) GetNonnativeTokenMinPercent() int64 {
	if x != nil {
		return x.NonnativeTokenMinPercent
	}
	return 0
}

func (x *FlowBlockRand) GetNonnativeTokenMaxPercent() int64 {
	if x != nil {
		return x.NonnativeTokenMaxPercent
	}
	return 0
}

type CreateFlowV2Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateFlowV2Res) Reset() {
	*x = CreateFlowV2Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowV2Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowV2Res) ProtoMessage() {}

func (x *CreateFlowV2Res) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowV2Res.ProtoReflect.Descriptor instead.
func (*CreateFlowV2Res) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{23}
}

func (x *CreateFlowV2Res) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UseSharedFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UseSharedFlowReq) Reset() {
	*x = UseSharedFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseSharedFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseSharedFlowReq) ProtoMessage() {}

func (x *UseSharedFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseSharedFlowReq.ProtoReflect.Descriptor instead.
func (*UseSharedFlowReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{24}
}

func (x *UseSharedFlowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UseSharedFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UseSharedFlowRes) Reset() {
	*x = UseSharedFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseSharedFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseSharedFlowRes) ProtoMessage() {}

func (x *UseSharedFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseSharedFlowRes.ProtoReflect.Descriptor instead.
func (*UseSharedFlowRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{25}
}

func (x *UseSharedFlowRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SharedFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow *FlowShared `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *SharedFlowRes) Reset() {
	*x = SharedFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFlowRes) ProtoMessage() {}

func (x *SharedFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFlowRes.ProtoReflect.Descriptor instead.
func (*SharedFlowRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{26}
}

func (x *SharedFlowRes) GetFlow() *FlowShared {
	if x != nil {
		return x.Flow
	}
	return nil
}

type SharedFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SharedFlowReq) Reset() {
	*x = SharedFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFlowReq) ProtoMessage() {}

func (x *SharedFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFlowReq.ProtoReflect.Descriptor instead.
func (*SharedFlowReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{27}
}

func (x *SharedFlowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SharedFlowsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharedFlowsReq) Reset() {
	*x = SharedFlowsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFlowsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFlowsReq) ProtoMessage() {}

func (x *SharedFlowsReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFlowsReq.ProtoReflect.Descriptor instead.
func (*SharedFlowsReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{28}
}

type SharedFlowsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*FlowShared `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SharedFlowsRes) Reset() {
	*x = SharedFlowsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFlowsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFlowsRes) ProtoMessage() {}

func (x *SharedFlowsRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFlowsRes.ProtoReflect.Descriptor instead.
func (*SharedFlowsRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{29}
}

func (x *SharedFlowsRes) GetItems() []*FlowShared {
	if x != nil {
		return x.Items
	}
	return nil
}

type ShareFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ShareFlowReq) Reset() {
	*x = ShareFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFlowReq) ProtoMessage() {}

func (x *ShareFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFlowReq.ProtoReflect.Descriptor instead.
func (*ShareFlowReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{30}
}

func (x *ShareFlowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShareFlowReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ShareFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ShareFlowRes) Reset() {
	*x = ShareFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFlowRes) ProtoMessage() {}

func (x *ShareFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFlowRes.ProtoReflect.Descriptor instead.
func (*ShareFlowRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{31}
}

func (x *ShareFlowRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HideFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HideFlowReq) Reset() {
	*x = HideFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideFlowReq) ProtoMessage() {}

func (x *HideFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideFlowReq.ProtoReflect.Descriptor instead.
func (*HideFlowReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{32}
}

func (x *HideFlowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HideFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HideFlowRes) Reset() {
	*x = HideFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideFlowRes) ProtoMessage() {}

func (x *HideFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideFlowRes.ProtoReflect.Descriptor instead.
func (*HideFlowRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{33}
}

type CopyFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CopyFlowReq) Reset() {
	*x = CopyFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFlowReq) ProtoMessage() {}

func (x *CopyFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFlowReq.ProtoReflect.Descriptor instead.
func (*CopyFlowReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{34}
}

func (x *CopyFlowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CopyFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CopyFlowRes) Reset() {
	*x = CopyFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFlowRes) ProtoMessage() {}

func (x *CopyFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFlowRes.ProtoReflect.Descriptor instead.
func (*CopyFlowRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{35}
}

func (x *CopyFlowRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetFlowRequest) Reset() {
	*x = GetFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowRequest) ProtoMessage() {}

func (x *GetFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowRequest.ProtoReflect.Descriptor instead.
func (*GetFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{36}
}

func (x *GetFlowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow *Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *GetFlowResponse) Reset() {
	*x = GetFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowResponse) ProtoMessage() {}

func (x *GetFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowResponse.ProtoReflect.Descriptor instead.
func (*GetFlowResponse) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{37}
}

func (x *GetFlowResponse) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

type WalletByWalletMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelayBetweenWallets      int64 `protobuf:"varint,1,opt,name=delayBetweenWallets,proto3" json:"delayBetweenWallets,omitempty"`
	DelayBetweenTransactions int64 `protobuf:"varint,2,opt,name=delayBetweenTransactions,proto3" json:"delayBetweenTransactions,omitempty"`
}

func (x *WalletByWalletMode) Reset() {
	*x = WalletByWalletMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletByWalletMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletByWalletMode) ProtoMessage() {}

func (x *WalletByWalletMode) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletByWalletMode.ProtoReflect.Descriptor instead.
func (*WalletByWalletMode) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{38}
}

func (x *WalletByWalletMode) GetDelayBetweenWallets() int64 {
	if x != nil {
		return x.DelayBetweenWallets
	}
	return 0
}

func (x *WalletByWalletMode) GetDelayBetweenTransactions() int64 {
	if x != nil {
		return x.DelayBetweenTransactions
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight      int64    `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	TaskType    TaskType `protobuf:"varint,2,opt,name=taskType,proto3,enum=task.TaskType" json:"taskType,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are assignable to Task:
	//
	//	*Task_StargateBridgeTask
	//	*Task_MockTask
	//	*Task_DelayTask
	//	*Task_WithdrawExchangeTask
	//	*Task_OkexDepositTask
	//	*Task_TestNetBridgeSwapTask
	//	*Task_SnapshotVoteTask
	//	*Task_OkexBinanaceTask
	//	*Task_Swap1InchTask
	//	*Task_SyncSwapTask
	//	*Task_ZkSyncOfficialBridgeToEthereumTask
	//	*Task_OrbiterBridgeTask
	//	*Task_ZkSyncOfficialBridgeFromEthereumTask
	//	*Task_WETHTask
	//	*Task_MuteioSwapTask
	//	*Task_SyncSwapLPTask
	//	*Task_MaverickSwapTask
	//	*Task_SpaceFiSwapTask
	//	*Task_VelocoreSwapTask
	//	*Task_IzumiSwapTask
	//	*Task_VeSyncSwapTask
	//	*Task_EzkaliburSwapTask
	//	*Task_ZkSwapTask
	//	*Task_TraderJoeSwapTask
	//	*Task_MerklyMintAndBridgeNFTTask
	//	*Task_DeployStarkNetAccountTask
	//	*Task_Swap10K
	//	*Task_PancakeSwapTask
	//	*Task_SithSwapTask
	//	*Task_JediSwapTask
	//	*Task_MySwapTask
	//	*Task_ProtosSwapTask
	//	*Task_StarkNetBridgeTask
	//	*Task_DmailTask
	//	*Task_StarkNetIdMintTask
	//	*Task_OdosSwapTask
	//	*Task_AcrossBridgeTask
	//	*Task_AvnuSwapTask
	//	*Task_FibrousSwapTask
	//	*Task_ExchangeSwapTask
	//	*Task_ZkLendLPTask
	//	*Task_WoofiSwapTask
	//	*Task_AaveLPTask
	//	*Task_MintFunTask
	//	*Task_MintMerklyTask
	//	*Task_MintZeriusTask
	//	*Task_KyberSwapTask
	//	*Task_EkuboSwapTask
	//	*Task_NostraLPTask
	//	*Task_WethSwapTask
	//	*Task_CoreDaoBridge
	//	*Task_StargateBridge
	//	*Task_StakeSTG
	//	*Task_MerklyRefuel
	//	*Task_L2PassRefuel
	//	*Task_StarknetClaim
	//	*Task_EralendLPTask
	Task isTask_Task `protobuf_oneof:"task"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{39}
}

func (x *Task) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Task) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_StargateBridge
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (m *Task) GetTask() isTask_Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (x *Task) GetStargateBridgeTask() *StargateBridgeTask {
	if x, ok := x.GetTask().(*Task_StargateBridgeTask); ok {
		return x.StargateBridgeTask
	}
	return nil
}

func (x *Task) GetMockTask() *MockTask {
	if x, ok := x.GetTask().(*Task_MockTask); ok {
		return x.MockTask
	}
	return nil
}

func (x *Task) GetDelayTask() *DelayTask {
	if x, ok := x.GetTask().(*Task_DelayTask); ok {
		return x.DelayTask
	}
	return nil
}

func (x *Task) GetWithdrawExchangeTask() *WithdrawExchangeTask {
	if x, ok := x.GetTask().(*Task_WithdrawExchangeTask); ok {
		return x.WithdrawExchangeTask
	}
	return nil
}

func (x *Task) GetOkexDepositTask() *OkexDepositTask {
	if x, ok := x.GetTask().(*Task_OkexDepositTask); ok {
		return x.OkexDepositTask
	}
	return nil
}

func (x *Task) GetTestNetBridgeSwapTask() *TestNetBridgeSwapTask {
	if x, ok := x.GetTask().(*Task_TestNetBridgeSwapTask); ok {
		return x.TestNetBridgeSwapTask
	}
	return nil
}

func (x *Task) GetSnapshotVoteTask() *SnapshotVoteTask {
	if x, ok := x.GetTask().(*Task_SnapshotVoteTask); ok {
		return x.SnapshotVoteTask
	}
	return nil
}

func (x *Task) GetOkexBinanaceTask() *OkexBinanaceTask {
	if x, ok := x.GetTask().(*Task_OkexBinanaceTask); ok {
		return x.OkexBinanaceTask
	}
	return nil
}

func (x *Task) GetSwap1InchTask() *Swap1InchTask {
	if x, ok := x.GetTask().(*Task_Swap1InchTask); ok {
		return x.Swap1InchTask
	}
	return nil
}

func (x *Task) GetSyncSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_SyncSwapTask); ok {
		return x.SyncSwapTask
	}
	return nil
}

func (x *Task) GetZkSyncOfficialBridgeToEthereumTask() *ZkSyncOfficialBridgeToEthereumTask {
	if x, ok := x.GetTask().(*Task_ZkSyncOfficialBridgeToEthereumTask); ok {
		return x.ZkSyncOfficialBridgeToEthereumTask
	}
	return nil
}

func (x *Task) GetOrbiterBridgeTask() *OrbiterBridgeTask {
	if x, ok := x.GetTask().(*Task_OrbiterBridgeTask); ok {
		return x.OrbiterBridgeTask
	}
	return nil
}

func (x *Task) GetZkSyncOfficialBridgeFromEthereumTask() *ZkSyncOfficialBridgeFromEthereumTask {
	if x, ok := x.GetTask().(*Task_ZkSyncOfficialBridgeFromEthereumTask); ok {
		return x.ZkSyncOfficialBridgeFromEthereumTask
	}
	return nil
}

func (x *Task) GetWETHTask() *WETHTask {
	if x, ok := x.GetTask().(*Task_WETHTask); ok {
		return x.WETHTask
	}
	return nil
}

func (x *Task) GetMuteioSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_MuteioSwapTask); ok {
		return x.MuteioSwapTask
	}
	return nil
}

func (x *Task) GetSyncSwapLPTask() *DefaultLP {
	if x, ok := x.GetTask().(*Task_SyncSwapLPTask); ok {
		return x.SyncSwapLPTask
	}
	return nil
}

func (x *Task) GetMaverickSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_MaverickSwapTask); ok {
		return x.MaverickSwapTask
	}
	return nil
}

func (x *Task) GetSpaceFiSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_SpaceFiSwapTask); ok {
		return x.SpaceFiSwapTask
	}
	return nil
}

func (x *Task) GetVelocoreSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_VelocoreSwapTask); ok {
		return x.VelocoreSwapTask
	}
	return nil
}

func (x *Task) GetIzumiSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_IzumiSwapTask); ok {
		return x.IzumiSwapTask
	}
	return nil
}

func (x *Task) GetVeSyncSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_VeSyncSwapTask); ok {
		return x.VeSyncSwapTask
	}
	return nil
}

func (x *Task) GetEzkaliburSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_EzkaliburSwapTask); ok {
		return x.EzkaliburSwapTask
	}
	return nil
}

func (x *Task) GetZkSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_ZkSwapTask); ok {
		return x.ZkSwapTask
	}
	return nil
}

func (x *Task) GetTraderJoeSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_TraderJoeSwapTask); ok {
		return x.TraderJoeSwapTask
	}
	return nil
}

func (x *Task) GetMerklyMintAndBridgeNFTTask() *MerklyMintAndBridgeNFTTask {
	if x, ok := x.GetTask().(*Task_MerklyMintAndBridgeNFTTask); ok {
		return x.MerklyMintAndBridgeNFTTask
	}
	return nil
}

func (x *Task) GetDeployStarkNetAccountTask() *DeployStarkNetAccountTask {
	if x, ok := x.GetTask().(*Task_DeployStarkNetAccountTask); ok {
		return x.DeployStarkNetAccountTask
	}
	return nil
}

func (x *Task) GetSwap10K() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_Swap10K); ok {
		return x.Swap10K
	}
	return nil
}

func (x *Task) GetPancakeSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_PancakeSwapTask); ok {
		return x.PancakeSwapTask
	}
	return nil
}

func (x *Task) GetSithSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_SithSwapTask); ok {
		return x.SithSwapTask
	}
	return nil
}

func (x *Task) GetJediSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_JediSwapTask); ok {
		return x.JediSwapTask
	}
	return nil
}

func (x *Task) GetMySwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_MySwapTask); ok {
		return x.MySwapTask
	}
	return nil
}

func (x *Task) GetProtosSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_ProtosSwapTask); ok {
		return x.ProtosSwapTask
	}
	return nil
}

func (x *Task) GetStarkNetBridgeTask() *LiquidityBridgeTask {
	if x, ok := x.GetTask().(*Task_StarkNetBridgeTask); ok {
		return x.StarkNetBridgeTask
	}
	return nil
}

func (x *Task) GetDmailTask() *SimpleTask {
	if x, ok := x.GetTask().(*Task_DmailTask); ok {
		return x.DmailTask
	}
	return nil
}

func (x *Task) GetStarkNetIdMintTask() *SimpleTask {
	if x, ok := x.GetTask().(*Task_StarkNetIdMintTask); ok {
		return x.StarkNetIdMintTask
	}
	return nil
}

func (x *Task) GetOdosSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_OdosSwapTask); ok {
		return x.OdosSwapTask
	}
	return nil
}

func (x *Task) GetAcrossBridgeTask() *DefaultBridge {
	if x, ok := x.GetTask().(*Task_AcrossBridgeTask); ok {
		return x.AcrossBridgeTask
	}
	return nil
}

func (x *Task) GetAvnuSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_AvnuSwapTask); ok {
		return x.AvnuSwapTask
	}
	return nil
}

func (x *Task) GetFibrousSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_FibrousSwapTask); ok {
		return x.FibrousSwapTask
	}
	return nil
}

func (x *Task) GetExchangeSwapTask() *ExchangeSwapTask {
	if x, ok := x.GetTask().(*Task_ExchangeSwapTask); ok {
		return x.ExchangeSwapTask
	}
	return nil
}

func (x *Task) GetZkLendLPTask() *DefaultLP {
	if x, ok := x.GetTask().(*Task_ZkLendLPTask); ok {
		return x.ZkLendLPTask
	}
	return nil
}

func (x *Task) GetWoofiSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_WoofiSwapTask); ok {
		return x.WoofiSwapTask
	}
	return nil
}

func (x *Task) GetAaveLPTask() *DefaultLP {
	if x, ok := x.GetTask().(*Task_AaveLPTask); ok {
		return x.AaveLPTask
	}
	return nil
}

func (x *Task) GetMintFunTask() *SimpleTask {
	if x, ok := x.GetTask().(*Task_MintFunTask); ok {
		return x.MintFunTask
	}
	return nil
}

func (x *Task) GetMintMerklyTask() *SimpleTask {
	if x, ok := x.GetTask().(*Task_MintMerklyTask); ok {
		return x.MintMerklyTask
	}
	return nil
}

func (x *Task) GetMintZeriusTask() *SimpleTask {
	if x, ok := x.GetTask().(*Task_MintZeriusTask); ok {
		return x.MintZeriusTask
	}
	return nil
}

func (x *Task) GetKyberSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_KyberSwapTask); ok {
		return x.KyberSwapTask
	}
	return nil
}

func (x *Task) GetEkuboSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_EkuboSwapTask); ok {
		return x.EkuboSwapTask
	}
	return nil
}

func (x *Task) GetNostraLPTask() *DefaultLP {
	if x, ok := x.GetTask().(*Task_NostraLPTask); ok {
		return x.NostraLPTask
	}
	return nil
}

func (x *Task) GetWethSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_WethSwapTask); ok {
		return x.WethSwapTask
	}
	return nil
}

func (x *Task) GetCoreDaoBridge() *DefaultBridge {
	if x, ok := x.GetTask().(*Task_CoreDaoBridge); ok {
		return x.CoreDaoBridge
	}
	return nil
}

func (x *Task) GetStargateBridge() *DefaultBridge {
	if x, ok := x.GetTask().(*Task_StargateBridge); ok {
		return x.StargateBridge
	}
	return nil
}

func (x *Task) GetStakeSTG() *DefaultLP {
	if x, ok := x.GetTask().(*Task_StakeSTG); ok {
		return x.StakeSTG
	}
	return nil
}

func (x *Task) GetMerklyRefuel() *DefaultBridge {
	if x, ok := x.GetTask().(*Task_MerklyRefuel); ok {
		return x.MerklyRefuel
	}
	return nil
}

func (x *Task) GetL2PassRefuel() *DefaultBridge {
	if x, ok := x.GetTask().(*Task_L2PassRefuel); ok {
		return x.L2PassRefuel
	}
	return nil
}

func (x *Task) GetStarknetClaim() *SimpleTask {
	if x, ok := x.GetTask().(*Task_StarknetClaim); ok {
		return x.StarknetClaim
	}
	return nil
}

func (x *Task) GetEralendLPTask() *DefaultLP {
	if x, ok := x.GetTask().(*Task_EralendLPTask); ok {
		return x.EralendLPTask
	}
	return nil
}

type isTask_Task interface {
	isTask_Task()
}

type Task_StargateBridgeTask struct {
	StargateBridgeTask *StargateBridgeTask `protobuf:"bytes,4,opt,name=stargateBridgeTask,proto3,oneof"`
}

type Task_MockTask struct {
	MockTask *MockTask `protobuf:"bytes,5,opt,name=mock_task,json=mockTask,proto3,oneof"` //deprecated
}

type Task_DelayTask struct {
	DelayTask *DelayTask `protobuf:"bytes,6,opt,name=delay_task,json=delayTask,proto3,oneof"`
}

type Task_WithdrawExchangeTask struct {
	WithdrawExchangeTask *WithdrawExchangeTask `protobuf:"bytes,7,opt,name=withdrawExchangeTask,proto3,oneof"`
}

type Task_OkexDepositTask struct {
	OkexDepositTask *OkexDepositTask `protobuf:"bytes,8,opt,name=okexDepositTask,proto3,oneof"`
}

type Task_TestNetBridgeSwapTask struct {
	TestNetBridgeSwapTask *TestNetBridgeSwapTask `protobuf:"bytes,9,opt,name=testNetBridgeSwapTask,proto3,oneof"`
}

type Task_SnapshotVoteTask struct {
	SnapshotVoteTask *SnapshotVoteTask `protobuf:"bytes,10,opt,name=snapshotVoteTask,proto3,oneof"`
}

type Task_OkexBinanaceTask struct {
	OkexBinanaceTask *OkexBinanaceTask `protobuf:"bytes,11,opt,name=okexBinanaceTask,proto3,oneof"` //deprecated
}

type Task_Swap1InchTask struct {
	Swap1InchTask *Swap1InchTask `protobuf:"bytes,12,opt,name=swap1inchTask,proto3,oneof"` //deprecated
}

type Task_SyncSwapTask struct {
	SyncSwapTask *DefaultSwap `protobuf:"bytes,13,opt,name=syncSwapTask,proto3,oneof"`
}

type Task_ZkSyncOfficialBridgeToEthereumTask struct {
	ZkSyncOfficialBridgeToEthereumTask *ZkSyncOfficialBridgeToEthereumTask `protobuf:"bytes,14,opt,name=zkSyncOfficialBridgeToEthereumTask,proto3,oneof"`
}

type Task_OrbiterBridgeTask struct {
	OrbiterBridgeTask *OrbiterBridgeTask `protobuf:"bytes,15,opt,name=orbiterBridgeTask,proto3,oneof"`
}

type Task_ZkSyncOfficialBridgeFromEthereumTask struct {
	ZkSyncOfficialBridgeFromEthereumTask *ZkSyncOfficialBridgeFromEthereumTask `protobuf:"bytes,16,opt,name=zkSyncOfficialBridgeFromEthereumTask,proto3,oneof"`
}

type Task_WETHTask struct {
	WETHTask *WETHTask `protobuf:"bytes,17,opt,name=wETHTask,proto3,oneof"` //deprecated
}

type Task_MuteioSwapTask struct {
	MuteioSwapTask *DefaultSwap `protobuf:"bytes,18,opt,name=muteioSwapTask,proto3,oneof"`
}

type Task_SyncSwapLPTask struct {
	SyncSwapLPTask *DefaultLP `protobuf:"bytes,19,opt,name=syncSwapLPTask,proto3,oneof"`
}

type Task_MaverickSwapTask struct {
	MaverickSwapTask *DefaultSwap `protobuf:"bytes,20,opt,name=maverickSwapTask,proto3,oneof"`
}

type Task_SpaceFiSwapTask struct {
	SpaceFiSwapTask *DefaultSwap `protobuf:"bytes,21,opt,name=spaceFiSwapTask,proto3,oneof"`
}

type Task_VelocoreSwapTask struct {
	VelocoreSwapTask *DefaultSwap `protobuf:"bytes,22,opt,name=velocoreSwapTask,proto3,oneof"`
}

type Task_IzumiSwapTask struct {
	IzumiSwapTask *DefaultSwap `protobuf:"bytes,23,opt,name=izumiSwapTask,proto3,oneof"`
}

type Task_VeSyncSwapTask struct {
	VeSyncSwapTask *DefaultSwap `protobuf:"bytes,24,opt,name=veSyncSwapTask,proto3,oneof"`
}

type Task_EzkaliburSwapTask struct {
	EzkaliburSwapTask *DefaultSwap `protobuf:"bytes,25,opt,name=ezkaliburSwapTask,proto3,oneof"`
}

type Task_ZkSwapTask struct {
	ZkSwapTask *DefaultSwap `protobuf:"bytes,26,opt,name=zkSwapTask,proto3,oneof"`
}

type Task_TraderJoeSwapTask struct {
	TraderJoeSwapTask *DefaultSwap `protobuf:"bytes,27,opt,name=traderJoeSwapTask,proto3,oneof"`
}

type Task_MerklyMintAndBridgeNFTTask struct {
	MerklyMintAndBridgeNFTTask *MerklyMintAndBridgeNFTTask `protobuf:"bytes,28,opt,name=merklyMintAndBridgeNFTTask,proto3,oneof"`
}

type Task_DeployStarkNetAccountTask struct {
	DeployStarkNetAccountTask *DeployStarkNetAccountTask `protobuf:"bytes,29,opt,name=deployStarkNetAccountTask,proto3,oneof"`
}

type Task_Swap10K struct {
	Swap10K *DefaultSwap `protobuf:"bytes,30,opt,name=swap10k,proto3,oneof"`
}

type Task_PancakeSwapTask struct {
	PancakeSwapTask *DefaultSwap `protobuf:"bytes,31,opt,name=pancakeSwapTask,proto3,oneof"`
}

type Task_SithSwapTask struct {
	SithSwapTask *DefaultSwap `protobuf:"bytes,32,opt,name=sithSwapTask,proto3,oneof"`
}

type Task_JediSwapTask struct {
	JediSwapTask *DefaultSwap `protobuf:"bytes,33,opt,name=jediSwapTask,proto3,oneof"`
}

type Task_MySwapTask struct {
	MySwapTask *DefaultSwap `protobuf:"bytes,34,opt,name=mySwapTask,proto3,oneof"`
}

type Task_ProtosSwapTask struct {
	ProtosSwapTask *DefaultSwap `protobuf:"bytes,35,opt,name=protosSwapTask,proto3,oneof"`
}

type Task_StarkNetBridgeTask struct {
	StarkNetBridgeTask *LiquidityBridgeTask `protobuf:"bytes,36,opt,name=starkNetBridgeTask,proto3,oneof"`
}

type Task_DmailTask struct {
	DmailTask *SimpleTask `protobuf:"bytes,37,opt,name=dmailTask,proto3,oneof"`
}

type Task_StarkNetIdMintTask struct {
	StarkNetIdMintTask *SimpleTask `protobuf:"bytes,38,opt,name=starkNetIdMintTask,proto3,oneof"`
}

type Task_OdosSwapTask struct {
	OdosSwapTask *DefaultSwap `protobuf:"bytes,39,opt,name=odosSwapTask,proto3,oneof"`
}

type Task_AcrossBridgeTask struct {
	AcrossBridgeTask *DefaultBridge `protobuf:"bytes,40,opt,name=acrossBridgeTask,proto3,oneof"`
}

type Task_AvnuSwapTask struct {
	AvnuSwapTask *DefaultSwap `protobuf:"bytes,41,opt,name=avnuSwapTask,proto3,oneof"`
}

type Task_FibrousSwapTask struct {
	FibrousSwapTask *DefaultSwap `protobuf:"bytes,42,opt,name=fibrousSwapTask,proto3,oneof"`
}

type Task_ExchangeSwapTask struct {
	ExchangeSwapTask *ExchangeSwapTask `protobuf:"bytes,43,opt,name=exchangeSwapTask,proto3,oneof"`
}

type Task_ZkLendLPTask struct {
	ZkLendLPTask *DefaultLP `protobuf:"bytes,44,opt,name=zkLendLPTask,proto3,oneof"`
}

type Task_WoofiSwapTask struct {
	WoofiSwapTask *DefaultSwap `protobuf:"bytes,45,opt,name=woofiSwapTask,proto3,oneof"`
}

type Task_AaveLPTask struct {
	AaveLPTask *DefaultLP `protobuf:"bytes,46,opt,name=aaveLPTask,proto3,oneof"`
}

type Task_MintFunTask struct {
	MintFunTask *SimpleTask `protobuf:"bytes,47,opt,name=mintFunTask,proto3,oneof"`
}

type Task_MintMerklyTask struct {
	MintMerklyTask *SimpleTask `protobuf:"bytes,48,opt,name=mintMerklyTask,proto3,oneof"`
}

type Task_MintZeriusTask struct {
	MintZeriusTask *SimpleTask `protobuf:"bytes,49,opt,name=mintZeriusTask,proto3,oneof"`
}

type Task_KyberSwapTask struct {
	KyberSwapTask *DefaultSwap `protobuf:"bytes,50,opt,name=kyberSwapTask,proto3,oneof"`
}

type Task_EkuboSwapTask struct {
	EkuboSwapTask *DefaultSwap `protobuf:"bytes,51,opt,name=ekuboSwapTask,proto3,oneof"`
}

type Task_NostraLPTask struct {
	NostraLPTask *DefaultLP `protobuf:"bytes,52,opt,name=nostraLPTask,proto3,oneof"`
}

type Task_WethSwapTask struct {
	WethSwapTask *DefaultSwap `protobuf:"bytes,53,opt,name=wethSwapTask,proto3,oneof"`
}

type Task_CoreDaoBridge struct {
	CoreDaoBridge *DefaultBridge `protobuf:"bytes,54,opt,name=coreDaoBridge,proto3,oneof"`
}

type Task_StargateBridge struct {
	StargateBridge *DefaultBridge `protobuf:"bytes,55,opt,name=stargateBridge,proto3,oneof"`
}

type Task_StakeSTG struct {
	StakeSTG *DefaultLP `protobuf:"bytes,56,opt,name=stakeSTG,proto3,oneof"`
}

type Task_MerklyRefuel struct {
	MerklyRefuel *DefaultBridge `protobuf:"bytes,57,opt,name=merklyRefuel,proto3,oneof"`
}

type Task_L2PassRefuel struct {
	L2PassRefuel *DefaultBridge `protobuf:"bytes,58,opt,name=l2passRefuel,proto3,oneof"`
}

type Task_StarknetClaim struct {
	StarknetClaim *SimpleTask `protobuf:"bytes,59,opt,name=starknetClaim,proto3,oneof"`
}

type Task_EralendLPTask struct {
	EralendLPTask *DefaultLP `protobuf:"bytes,60,opt,name=eralendLPTask,proto3,oneof"`
}

func (*Task_StargateBridgeTask) isTask_Task() {}

func (*Task_MockTask) isTask_Task() {}

func (*Task_DelayTask) isTask_Task() {}

func (*Task_WithdrawExchangeTask) isTask_Task() {}

func (*Task_OkexDepositTask) isTask_Task() {}

func (*Task_TestNetBridgeSwapTask) isTask_Task() {}

func (*Task_SnapshotVoteTask) isTask_Task() {}

func (*Task_OkexBinanaceTask) isTask_Task() {}

func (*Task_Swap1InchTask) isTask_Task() {}

func (*Task_SyncSwapTask) isTask_Task() {}

func (*Task_ZkSyncOfficialBridgeToEthereumTask) isTask_Task() {}

func (*Task_OrbiterBridgeTask) isTask_Task() {}

func (*Task_ZkSyncOfficialBridgeFromEthereumTask) isTask_Task() {}

func (*Task_WETHTask) isTask_Task() {}

func (*Task_MuteioSwapTask) isTask_Task() {}

func (*Task_SyncSwapLPTask) isTask_Task() {}

func (*Task_MaverickSwapTask) isTask_Task() {}

func (*Task_SpaceFiSwapTask) isTask_Task() {}

func (*Task_VelocoreSwapTask) isTask_Task() {}

func (*Task_IzumiSwapTask) isTask_Task() {}

func (*Task_VeSyncSwapTask) isTask_Task() {}

func (*Task_EzkaliburSwapTask) isTask_Task() {}

func (*Task_ZkSwapTask) isTask_Task() {}

func (*Task_TraderJoeSwapTask) isTask_Task() {}

func (*Task_MerklyMintAndBridgeNFTTask) isTask_Task() {}

func (*Task_DeployStarkNetAccountTask) isTask_Task() {}

func (*Task_Swap10K) isTask_Task() {}

func (*Task_PancakeSwapTask) isTask_Task() {}

func (*Task_SithSwapTask) isTask_Task() {}

func (*Task_JediSwapTask) isTask_Task() {}

func (*Task_MySwapTask) isTask_Task() {}

func (*Task_ProtosSwapTask) isTask_Task() {}

func (*Task_StarkNetBridgeTask) isTask_Task() {}

func (*Task_DmailTask) isTask_Task() {}

func (*Task_StarkNetIdMintTask) isTask_Task() {}

func (*Task_OdosSwapTask) isTask_Task() {}

func (*Task_AcrossBridgeTask) isTask_Task() {}

func (*Task_AvnuSwapTask) isTask_Task() {}

func (*Task_FibrousSwapTask) isTask_Task() {}

func (*Task_ExchangeSwapTask) isTask_Task() {}

func (*Task_ZkLendLPTask) isTask_Task() {}

func (*Task_WoofiSwapTask) isTask_Task() {}

func (*Task_AaveLPTask) isTask_Task() {}

func (*Task_MintFunTask) isTask_Task() {}

func (*Task_MintMerklyTask) isTask_Task() {}

func (*Task_MintZeriusTask) isTask_Task() {}

func (*Task_KyberSwapTask) isTask_Task() {}

func (*Task_EkuboSwapTask) isTask_Task() {}

func (*Task_NostraLPTask) isTask_Task() {}

func (*Task_WethSwapTask) isTask_Task() {}

func (*Task_CoreDaoBridge) isTask_Task() {}

func (*Task_StargateBridge) isTask_Task() {}

func (*Task_StakeSTG) isTask_Task() {}

func (*Task_MerklyRefuel) isTask_Task() {}

func (*Task_L2PassRefuel) isTask_Task() {}

func (*Task_StarknetClaim) isTask_Task() {}

func (*Task_EralendLPTask) isTask_Task() {}

type CreateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label       string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Tasks       []*Task `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	RandomTasks []*Task `protobuf:"bytes,3,rep,name=random_tasks,json=randomTasks,proto3" json:"random_tasks,omitempty"`
}

func (x *CreateFlowRequest) Reset() {
	*x = CreateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowRequest) ProtoMessage() {}

func (x *CreateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowRequest.ProtoReflect.Descriptor instead.
func (*CreateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{40}
}

func (x *CreateFlowRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CreateFlowRequest) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *CreateFlowRequest) GetRandomTasks() []*Task {
	if x != nil {
		return x.RandomTasks
	}
	return nil
}

type UpdateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow *Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *UpdateFlowRequest) Reset() {
	*x = UpdateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowRequest) ProtoMessage() {}

func (x *UpdateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateFlowRequest) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

type UpdateFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow *Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *UpdateFlowResponse) Reset() {
	*x = UpdateFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowResponse) ProtoMessage() {}

func (x *UpdateFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowResponse.ProtoReflect.Descriptor instead.
func (*UpdateFlowResponse) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateFlowResponse) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

type CreateFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow *Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *CreateFlowResponse) Reset() {
	*x = CreateFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowResponse) ProtoMessage() {}

func (x *CreateFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowResponse.ProtoReflect.Descriptor instead.
func (*CreateFlowResponse) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{43}
}

func (x *CreateFlowResponse) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

type ListFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFlowRequest) Reset() {
	*x = ListFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlowRequest) ProtoMessage() {}

func (x *ListFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlowRequest.ProtoReflect.Descriptor instead.
func (*ListFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{44}
}

type ListFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flows []*FlowListItem `protobuf:"bytes,1,rep,name=flows,proto3" json:"flows,omitempty"`
}

func (x *ListFlowResponse) Reset() {
	*x = ListFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlowResponse) ProtoMessage() {}

func (x *ListFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlowResponse.ProtoReflect.Descriptor instead.
func (*ListFlowResponse) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{45}
}

func (x *ListFlowResponse) GetFlows() []*FlowListItem {
	if x != nil {
		return x.Flows
	}
	return nil
}

type FlowListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label     string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	NextId    *string                `protobuf:"bytes,6,opt,name=next_id,json=nextId,proto3,oneof" json:"next_id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Version   int64                  `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *FlowListItem) Reset() {
	*x = FlowListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowListItem) ProtoMessage() {}

func (x *FlowListItem) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowListItem.ProtoReflect.Descriptor instead.
func (*FlowListItem) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{46}
}

func (x *FlowListItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowListItem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FlowListItem) GetNextId() string {
	if x != nil && x.NextId != nil {
		return *x.NextId
	}
	return ""
}

func (x *FlowListItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FlowListItem) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *FlowListItem) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DeleteFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteFlowRequest) Reset() {
	*x = DeleteFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlowRequest) ProtoMessage() {}

func (x *DeleteFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlowRequest.ProtoReflect.Descriptor instead.
func (*DeleteFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{47}
}

func (x *DeleteFlowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFlowResponse) Reset() {
	*x = DeleteFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlowResponse) ProtoMessage() {}

func (x *DeleteFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlowResponse.ProtoReflect.Descriptor instead.
func (*DeleteFlowResponse) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{48}
}

var File_v1_flow_proto protoreflect.FileDescriptor

var file_v1_flow_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x03, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x3a, 0x4e, 0x92, 0x41, 0x4b, 0x0a, 0x49, 0xd2, 0x01, 0x02, 0x69, 0x64,
	0xd2, 0x01, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0xd2, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xd2,
	0x01, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0xd2, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x22, 0x76, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a,
	0x1a, 0x92, 0x41, 0x17, 0x0a, 0x15, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0xd2, 0x01, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x0a,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x50, 0x73, 0x77, 0x61, 0x70, 0x48, 0x00,
	0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x50,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0xd2, 0x01, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x01,
	0x70, 0x42, 0x03, 0x0a, 0x01, 0x70, 0x22, 0x46, 0x0a, 0x08, 0x52, 0x50, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x0f, 0x92,
	0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x3f,
	0x0a, 0x06, 0x52, 0x50, 0x73, 0x77, 0x61, 0x70, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x50, 0x73, 0x77, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x3a, 0x0d, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0xd2, 0x01, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xb6, 0x01, 0x0a, 0x0a, 0x52, 0x50, 0x73, 0x77, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x29,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x02, 0x61,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x02, 0x61, 0x6d, 0x3a, 0x1b, 0x92, 0x41, 0x18,
	0x0a, 0x16, 0xd2, 0x01, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0xd2, 0x01, 0x02, 0x74, 0x6f, 0x22, 0x97, 0x03, 0x0a, 0x04, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x65,
	0x78, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0xd2, 0x01, 0x02, 0x69,
	0x64, 0xd2, 0x01, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0xd2, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0xd2, 0x01, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0xd2, 0x01, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x22, 0x2f, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x3a, 0x1b, 0x92, 0x41, 0x18, 0x0a,
	0x16, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x3a,
	0x1b, 0x92, 0x41, 0x18, 0x0a, 0x16, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0xd2, 0x01, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x2a, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x32, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41,
	0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x56, 0x32, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27,
	0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x3a, 0x1b, 0x92, 0x41, 0x18, 0x0a, 0x16, 0xd2, 0x01,
	0x02, 0x69, 0x64, 0xd2, 0x01, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x06, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0xc1, 0x03, 0x0a, 0x18, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0xd2,
	0x01, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0xd2, 0x01, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0xd2, 0x01, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x54, 0x0a, 0x1b, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x3a, 0x0e,
	0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xb7,
	0x01, 0x0a, 0x18, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x72, 0x72, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x21, 0xd2, 0x01, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0xd2, 0x01,
	0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0xd2,
	0x01, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x67, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x27, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x3a, 0x16, 0x92, 0x41, 0x13, 0x0a, 0x11,
	0xd2, 0x01, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0x7c, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x0a, 0x18, 0xd2, 0x01, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0xd2, 0x01,
	0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22,
	0x5f, 0x0a, 0x08, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x72, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1d,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x02, 0x74, 0x6f, 0x3a, 0x11, 0x92,
	0x41, 0x0e, 0x0a, 0x0c, 0xd2, 0x01, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0xd2, 0x01, 0x02, 0x74, 0x6f,
	0x22, 0x3d, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x20,
	0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x3a, 0x0d, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0xd2, 0x01, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22,
	0x68, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x3a, 0x16, 0x92, 0x41, 0x13, 0x0a, 0x11, 0xd2, 0x01, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0xd2, 0x01, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x46, 0x6c,
	0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x26, 0x0a, 0x03, 0x6d, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x64, 0x3a, 0x16, 0x92, 0x41, 0x13, 0x0a, 0x11, 0xd2, 0x01, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0xd2, 0x01, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x7d, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4d, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2d, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x3a, 0x1c, 0x92, 0x41, 0x19, 0x0a, 0x17, 0xd2, 0x01, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0xd2, 0x01, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x22, 0xce, 0x04, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x26, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x37, 0x0a,
	0x18, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x1b, 0x6e, 0x6f, 0x6e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6e, 0x6f, 0x6e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x1b, 0x6e, 0x6f, 0x6e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x6e, 0x6f, 0x6e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3a, 0x34, 0x92,
	0x41, 0x31, 0x0a, 0x2f, 0xd2, 0x01, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0xd2, 0x01, 0x0c, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0xd2, 0x01, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0xd2, 0x01, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x22, 0x2d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x56, 0x32, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02,
	0x69, 0x64, 0x22, 0x2e, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02,
	0x69, 0x64, 0x22, 0x2e, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02,
	0x69, 0x64, 0x22, 0x43, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07,
	0xd2, 0x01, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x2b, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2,
	0x01, 0x02, 0x69, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x22, 0x47, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x3a, 0x0d, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0xd2, 0x01, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x5a, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x18, 0x92, 0x41, 0x15, 0x0a, 0x13, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0c, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07,
	0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x0b, 0x48, 0x69, 0x64, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02,
	0x69, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x48, 0x69, 0x64, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x22, 0x29, 0x0a, 0x0b, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x0b,
	0x43, 0x6f, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07,
	0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05,
	0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2,
	0x01, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x42, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12,
	0x3a, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x36, 0x92, 0x41, 0x33,
	0x0a, 0x31, 0xd2, 0x01, 0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0xd2, 0x01, 0x18, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xf9, 0x1d, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72,
	0x67, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d,
	0x0a, 0x09, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x30, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x50, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x14, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x6b, 0x65, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x4f, 0x6b, 0x65, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x6b, 0x65, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x53, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e,
	0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x00, 0x52, 0x15, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x44, 0x0a, 0x10, 0x6f, 0x6b, 0x65, 0x78, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x61, 0x63, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x4f, 0x6b, 0x65, 0x78, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6b, 0x65, 0x78, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x31, 0x69, 0x6e,
	0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x31, 0x69, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x31, 0x69, 0x6e, 0x63, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x79, 0x6e, 0x63, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x7a, 0x0a, 0x22, 0x7a,
	0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x54, 0x6f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x61, 0x73,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x5a,
	0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x54, 0x6f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x61, 0x73,
	0x6b, 0x48, 0x00, 0x52, 0x22, 0x7a, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x47, 0x0a, 0x11, 0x6f, 0x72, 0x62, 0x69, 0x74,
	0x65, 0x72, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x65,
	0x72, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x11, 0x6f,
	0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x80, 0x01, 0x0a, 0x24, 0x7a, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x5a, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x24, 0x7a,
	0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x2c, 0x0a, 0x08, 0x77, 0x45, 0x54, 0x48, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x45, 0x54,
	0x48, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x77, 0x45, 0x54, 0x48, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x3b, 0x0a, 0x0e, 0x6d, 0x75, 0x74, 0x65, 0x69, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0e,
	0x6d, 0x75, 0x74, 0x65, 0x69, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x39,
	0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x50, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x50, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x53,
	0x77, 0x61, 0x70, 0x4c, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x10, 0x6d, 0x61, 0x76,
	0x65, 0x72, 0x69, 0x63, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x76, 0x65, 0x72, 0x69,
	0x63, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x46, 0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46,
	0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x10, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x10, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x6f,
	0x72, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x0d, 0x69, 0x7a,
	0x75, 0x6d, 0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x7a, 0x75, 0x6d, 0x69, 0x53, 0x77, 0x61,
	0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x0e, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70,
	0x48, 0x00, 0x52, 0x0e, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x41, 0x0a, 0x11, 0x65, 0x7a, 0x6b, 0x61, 0x6c, 0x69, 0x62, 0x75, 0x72, 0x53,
	0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70,
	0x48, 0x00, 0x52, 0x11, 0x65, 0x7a, 0x6b, 0x61, 0x6c, 0x69, 0x62, 0x75, 0x72, 0x53, 0x77, 0x61,
	0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x0a, 0x0a, 0x7a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0a,
	0x7a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x4a, 0x6f, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x62, 0x0a,
	0x1a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x4e, 0x46, 0x54, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x4d,
	0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x46, 0x54, 0x54,
	0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x4d, 0x69, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x46, 0x54, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x5f, 0x0a, 0x19, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x72, 0x6b,
	0x4e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x77, 0x61, 0x70, 0x31, 0x30, 0x6b, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x07, 0x73, 0x77, 0x61, 0x70, 0x31, 0x30,
	0x6b, 0x12, 0x3d, 0x0a, 0x0f, 0x70, 0x61, 0x6e, 0x63, 0x61, 0x6b, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52,
	0x0f, 0x70, 0x61, 0x6e, 0x63, 0x61, 0x6b, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x37, 0x0a, 0x0c, 0x73, 0x69, 0x74, 0x68, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x69, 0x74,
	0x68, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x6a, 0x65, 0x64,
	0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77,
	0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x6a, 0x65, 0x64, 0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x79, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x79, 0x53,
	0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77,
	0x61, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x77, 0x61, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x30, 0x0a, 0x09, 0x64, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x64, 0x6d, 0x61, 0x69, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x42, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49,
	0x64, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x4d,
	0x69, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x64, 0x6f, 0x73, 0x53,
	0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70,
	0x48, 0x00, 0x52, 0x0c, 0x6f, 0x64, 0x6f, 0x73, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x41, 0x0a, 0x10, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x76, 0x6e, 0x75, 0x53, 0x77, 0x61, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x76, 0x6e, 0x75, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x0f,
	0x66, 0x69, 0x62, 0x72, 0x6f, 0x75, 0x73, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x62, 0x72,
	0x6f, 0x75, 0x73, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x10, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52,
	0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x35, 0x0a, 0x0c, 0x7a, 0x6b, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x50, 0x54, 0x61, 0x73,
	0x6b, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x50, 0x48, 0x00, 0x52, 0x0c, 0x7a, 0x6b, 0x4c, 0x65,
	0x6e, 0x64, 0x4c, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x0d, 0x77, 0x6f, 0x6f, 0x66,
	0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77,
	0x61, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x6f, 0x6f, 0x66, 0x69, 0x53, 0x77, 0x61, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x61, 0x76, 0x65, 0x4c, 0x50, 0x54, 0x61, 0x73,
	0x6b, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x50, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x61, 0x76, 0x65,
	0x4c, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x46, 0x75,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x0a, 0x0e,
	0x6d, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x74, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x74,
	0x5a, 0x65, 0x72, 0x69, 0x75, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x74, 0x5a, 0x65, 0x72, 0x69, 0x75, 0x73,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x0d, 0x6b, 0x79, 0x62, 0x65, 0x72, 0x53, 0x77, 0x61,
	0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00,
	0x52, 0x0d, 0x6b, 0x79, 0x62, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x39, 0x0a, 0x0d, 0x65, 0x6b, 0x75, 0x62, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6b, 0x75,
	0x62, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x0c, 0x6e, 0x6f,
	0x73, 0x74, 0x72, 0x61, 0x4c, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c,
	0x50, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x4c, 0x50, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x77, 0x65, 0x74, 0x68, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x65,
	0x74, 0x68, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x61, 0x6f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x61,
	0x6f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x67,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x53,
	0x54, 0x47, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x50, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x53, 0x54, 0x47, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x52,
	0x65, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x52, 0x65, 0x66, 0x75, 0x65, 0x6c,
	0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x32, 0x70, 0x61, 0x73, 0x73, 0x52, 0x65, 0x66, 0x75, 0x65, 0x6c,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6c,
	0x32, 0x70, 0x61, 0x73, 0x73, 0x52, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x37, 0x0a, 0x0d, 0x65, 0x72, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x4c, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x50, 0x48, 0x00, 0x52,
	0x0d, 0x65, 0x72, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x4c, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x3a, 0x27,
	0x92, 0x41, 0x24, 0x0a, 0x22, 0xd2, 0x01, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0xd2, 0x01,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22,
	0xa0, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2d, 0x0a,
	0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x24, 0x92, 0x41,
	0x21, 0x0a, 0x1f, 0xd2, 0x01, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0xd2, 0x01, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01,
	0x04, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x42, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x0c, 0x92, 0x41, 0x09,
	0x0a, 0x07, 0xd2, 0x01, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x42, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x3a,
	0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x11, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x4b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x0d,
	0x92, 0x41, 0x0a, 0x0a, 0x08, 0xd2, 0x01, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xad, 0x02,
	0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x29, 0x92, 0x41, 0x26, 0x0a, 0x24, 0xd2, 0x01,
	0x02, 0x69, 0x64, 0xd2, 0x01, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xd2, 0x01, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x2f, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x14,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb2, 0x0d, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a,
	0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x32, 0x12, 0x19, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x77, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x5a,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x15, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x51,
	0x0a, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x11, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x70,
	0x79, 0x12, 0x57, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x12,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01,
	0x2a, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x51, 0x0a, 0x08, 0x48, 0x69,
	0x64, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x11, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x48, 0x69,
	0x64, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x48, 0x69, 0x64, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x68, 0x69, 0x64, 0x65, 0x12, 0x61, 0x0a,
	0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x59, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x13,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x0d, 0x55,
	0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x73, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f,
	0x75, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x56, 0x32, 0x12, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x32, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x2f, 0x6f, 0x6e, 0x6c, 0x79, 0x2d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x94, 0x01,
	0x0a, 0x18, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x35, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x2f, 0x6f, 0x6e, 0x6c, 0x79, 0x2d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x56,
	0x32, 0x12, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x56, 0x32, 0x52, 0x65, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x32,
	0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x09, 0x5a, 0x07, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_flow_proto_rawDescOnce sync.Once
	file_v1_flow_proto_rawDescData = file_v1_flow_proto_rawDesc
)

func file_v1_flow_proto_rawDescGZIP() []byte {
	file_v1_flow_proto_rawDescOnce.Do(func() {
		file_v1_flow_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_flow_proto_rawDescData)
	})
	return file_v1_flow_proto_rawDescData
}

var file_v1_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_v1_flow_proto_goTypes = []interface{}{
	(*FlowShared)(nil),                           // 0: flow.FlowShared
	(*RandomFlow)(nil),                           // 1: flow.RandomFlow
	(*RandomTask)(nil),                           // 2: flow.RandomTask
	(*RPsimple)(nil),                             // 3: flow.RPsimple
	(*RPswap)(nil),                               // 4: flow.RPswap
	(*RPswapItem)(nil),                           // 5: flow.RPswapItem
	(*Flow)(nil),                                 // 6: flow.Flow
	(*FlowBase)(nil),                             // 7: flow.FlowBase
	(*UpdateFlowV2Request)(nil),                  // 8: flow.UpdateFlowV2Request
	(*UpdateFlowV2Response)(nil),                 // 9: flow.UpdateFlowV2Response
	(*GetFlowV2Req)(nil),                         // 10: flow.GetFlowV2Req
	(*GetFlowV2Res)(nil),                         // 11: flow.GetFlowV2Res
	(*OnlyRandomFlowPreviewReq)(nil),             // 12: flow.OnlyRandomFlowPreviewReq
	(*OnlyRandomFlowFromTokensRes)(nil),          // 13: flow.OnlyRandomFlowFromTokensRes
	(*OnlyRandomFlowPreviewRes)(nil),             // 14: flow.OnlyRandomFlowPreviewRes
	(*FlowPreviewReq)(nil),                       // 15: flow.FlowPreviewReq
	(*FlowPreviewRes)(nil),                       // 16: flow.FlowPreviewRes
	(*TokenArr)(nil),                             // 17: flow.TokenArr
	(*UniqueFlow)(nil),                           // 18: flow.UniqueFlow
	(*CreateFlowV2Req)(nil),                      // 19: flow.CreateFlowV2Req
	(*FlowBlock)(nil),                            // 20: flow.FlowBlock
	(*FlowBlockMan)(nil),                         // 21: flow.FlowBlockMan
	(*FlowBlockRand)(nil),                        // 22: flow.FlowBlockRand
	(*CreateFlowV2Res)(nil),                      // 23: flow.CreateFlowV2Res
	(*UseSharedFlowReq)(nil),                     // 24: flow.UseSharedFlowReq
	(*UseSharedFlowRes)(nil),                     // 25: flow.UseSharedFlowRes
	(*SharedFlowRes)(nil),                        // 26: flow.SharedFlowRes
	(*SharedFlowReq)(nil),                        // 27: flow.SharedFlowReq
	(*SharedFlowsReq)(nil),                       // 28: flow.SharedFlowsReq
	(*SharedFlowsRes)(nil),                       // 29: flow.SharedFlowsRes
	(*ShareFlowReq)(nil),                         // 30: flow.ShareFlowReq
	(*ShareFlowRes)(nil),                         // 31: flow.ShareFlowRes
	(*HideFlowReq)(nil),                          // 32: flow.HideFlowReq
	(*HideFlowRes)(nil),                          // 33: flow.HideFlowRes
	(*CopyFlowReq)(nil),                          // 34: flow.CopyFlowReq
	(*CopyFlowRes)(nil),                          // 35: flow.CopyFlowRes
	(*GetFlowRequest)(nil),                       // 36: flow.GetFlowRequest
	(*GetFlowResponse)(nil),                      // 37: flow.GetFlowResponse
	(*WalletByWalletMode)(nil),                   // 38: flow.WalletByWalletMode
	(*Task)(nil),                                 // 39: flow.Task
	(*CreateFlowRequest)(nil),                    // 40: flow.CreateFlowRequest
	(*UpdateFlowRequest)(nil),                    // 41: flow.UpdateFlowRequest
	(*UpdateFlowResponse)(nil),                   // 42: flow.UpdateFlowResponse
	(*CreateFlowResponse)(nil),                   // 43: flow.CreateFlowResponse
	(*ListFlowRequest)(nil),                      // 44: flow.ListFlowRequest
	(*ListFlowResponse)(nil),                     // 45: flow.ListFlowResponse
	(*FlowListItem)(nil),                         // 46: flow.FlowListItem
	(*DeleteFlowRequest)(nil),                    // 47: flow.DeleteFlowRequest
	(*DeleteFlowResponse)(nil),                   // 48: flow.DeleteFlowResponse
	(*timestamppb.Timestamp)(nil),                // 49: google.protobuf.Timestamp
	(TaskType)(0),                                // 50: task.TaskType
	(Network)(0),                                 // 51: shared.Network
	(Token)(0),                                   // 52: shared.Token
	(*Amount)(nil),                               // 53: shared.Amount
	(*StargateBridgeTask)(nil),                   // 54: task.StargateBridgeTask
	(*MockTask)(nil),                             // 55: task.MockTask
	(*DelayTask)(nil),                            // 56: task.DelayTask
	(*WithdrawExchangeTask)(nil),                 // 57: task.WithdrawExchangeTask
	(*OkexDepositTask)(nil),                      // 58: task.OkexDepositTask
	(*TestNetBridgeSwapTask)(nil),                // 59: task.TestNetBridgeSwapTask
	(*SnapshotVoteTask)(nil),                     // 60: task.SnapshotVoteTask
	(*OkexBinanaceTask)(nil),                     // 61: task.OkexBinanaceTask
	(*Swap1InchTask)(nil),                        // 62: task.Swap1inchTask
	(*DefaultSwap)(nil),                          // 63: task.DefaultSwap
	(*ZkSyncOfficialBridgeToEthereumTask)(nil),   // 64: task.ZkSyncOfficialBridgeToEthereumTask
	(*OrbiterBridgeTask)(nil),                    // 65: task.OrbiterBridgeTask
	(*ZkSyncOfficialBridgeFromEthereumTask)(nil), // 66: task.ZkSyncOfficialBridgeFromEthereumTask
	(*WETHTask)(nil),                             // 67: task.WETHTask
	(*DefaultLP)(nil),                            // 68: task.DefaultLP
	(*MerklyMintAndBridgeNFTTask)(nil),           // 69: task.MerklyMintAndBridgeNFTTask
	(*DeployStarkNetAccountTask)(nil),            // 70: task.DeployStarkNetAccountTask
	(*LiquidityBridgeTask)(nil),                  // 71: task.LiquidityBridgeTask
	(*SimpleTask)(nil),                           // 72: task.SimpleTask
	(*DefaultBridge)(nil),                        // 73: task.DefaultBridge
	(*ExchangeSwapTask)(nil),                     // 74: task.ExchangeSwapTask
}
var file_v1_flow_proto_depIdxs = []int32{
	49,  // 0: flow.FlowShared.created_at:type_name -> google.protobuf.Timestamp
	49,  // 1: flow.FlowShared.deleted_at:type_name -> google.protobuf.Timestamp
	39,  // 2: flow.FlowShared.tasks:type_name -> flow.Task
	2,   // 3: flow.RandomFlow.tasks:type_name -> flow.RandomTask
	50,  // 4: flow.RandomTask.taskType:type_name -> task.TaskType
	4,   // 5: flow.RandomTask.swap:type_name -> flow.RPswap
	3,   // 6: flow.RandomTask.simple:type_name -> flow.RPsimple
	51,  // 7: flow.RPsimple.network:type_name -> shared.Network
	5,   // 8: flow.RPswap.items:type_name -> flow.RPswapItem
	51,  // 9: flow.RPswapItem.network:type_name -> shared.Network
	52,  // 10: flow.RPswapItem.from:type_name -> shared.Token
	52,  // 11: flow.RPswapItem.to:type_name -> shared.Token
	53,  // 12: flow.RPswapItem.am:type_name -> shared.Amount
	39,  // 13: flow.Flow.tasks:type_name -> flow.Task
	49,  // 14: flow.Flow.created_at:type_name -> google.protobuf.Timestamp
	49,  // 15: flow.Flow.deleted_at:type_name -> google.protobuf.Timestamp
	39,  // 16: flow.Flow.random_tasks:type_name -> flow.Task
	7,   // 17: flow.Flow.base:type_name -> flow.FlowBase
	52,  // 18: flow.FlowBase.token:type_name -> shared.Token
	20,  // 19: flow.UpdateFlowV2Request.blocks:type_name -> flow.FlowBlock
	20,  // 20: flow.UpdateFlowV2Response.blocks:type_name -> flow.FlowBlock
	20,  // 21: flow.GetFlowV2Res.blocks:type_name -> flow.FlowBlock
	52,  // 22: flow.OnlyRandomFlowPreviewReq.start_token:type_name -> shared.Token
	52,  // 23: flow.OnlyRandomFlowPreviewReq.finish_token:type_name -> shared.Token
	51,  // 24: flow.OnlyRandomFlowPreviewReq.start_network:type_name -> shared.Network
	2,   // 25: flow.OnlyRandomFlowPreviewReq.tasks:type_name -> flow.RandomTask
	52,  // 26: flow.OnlyRandomFlowFromTokensRes.tokens:type_name -> shared.Token
	18,  // 27: flow.OnlyRandomFlowPreviewRes.flow:type_name -> flow.UniqueFlow
	17,  // 28: flow.OnlyRandomFlowPreviewRes.tokens:type_name -> flow.TokenArr
	20,  // 29: flow.FlowPreviewReq.blocks:type_name -> flow.FlowBlock
	18,  // 30: flow.FlowPreviewRes.flow:type_name -> flow.UniqueFlow
	52,  // 31: flow.TokenArr.from:type_name -> shared.Token
	52,  // 32: flow.TokenArr.to:type_name -> shared.Token
	39,  // 33: flow.UniqueFlow.tasks:type_name -> flow.Task
	20,  // 34: flow.CreateFlowV2Req.blocks:type_name -> flow.FlowBlock
	21,  // 35: flow.FlowBlock.man:type_name -> flow.FlowBlockMan
	22,  // 36: flow.FlowBlock.rand:type_name -> flow.FlowBlockRand
	39,  // 37: flow.FlowBlockMan.tasks:type_name -> flow.Task
	39,  // 38: flow.FlowBlockMan.random_tasks:type_name -> flow.Task
	52,  // 39: flow.FlowBlockRand.start_token:type_name -> shared.Token
	52,  // 40: flow.FlowBlockRand.finish_token:type_name -> shared.Token
	51,  // 41: flow.FlowBlockRand.start_network:type_name -> shared.Network
	2,   // 42: flow.FlowBlockRand.tasks:type_name -> flow.RandomTask
	0,   // 43: flow.SharedFlowRes.flow:type_name -> flow.FlowShared
	0,   // 44: flow.SharedFlowsRes.items:type_name -> flow.FlowShared
	6,   // 45: flow.GetFlowResponse.flow:type_name -> flow.Flow
	50,  // 46: flow.Task.taskType:type_name -> task.TaskType
	54,  // 47: flow.Task.stargateBridgeTask:type_name -> task.StargateBridgeTask
	55,  // 48: flow.Task.mock_task:type_name -> task.MockTask
	56,  // 49: flow.Task.delay_task:type_name -> task.DelayTask
	57,  // 50: flow.Task.withdrawExchangeTask:type_name -> task.WithdrawExchangeTask
	58,  // 51: flow.Task.okexDepositTask:type_name -> task.OkexDepositTask
	59,  // 52: flow.Task.testNetBridgeSwapTask:type_name -> task.TestNetBridgeSwapTask
	60,  // 53: flow.Task.snapshotVoteTask:type_name -> task.SnapshotVoteTask
	61,  // 54: flow.Task.okexBinanaceTask:type_name -> task.OkexBinanaceTask
	62,  // 55: flow.Task.swap1inchTask:type_name -> task.Swap1inchTask
	63,  // 56: flow.Task.syncSwapTask:type_name -> task.DefaultSwap
	64,  // 57: flow.Task.zkSyncOfficialBridgeToEthereumTask:type_name -> task.ZkSyncOfficialBridgeToEthereumTask
	65,  // 58: flow.Task.orbiterBridgeTask:type_name -> task.OrbiterBridgeTask
	66,  // 59: flow.Task.zkSyncOfficialBridgeFromEthereumTask:type_name -> task.ZkSyncOfficialBridgeFromEthereumTask
	67,  // 60: flow.Task.wETHTask:type_name -> task.WETHTask
	63,  // 61: flow.Task.muteioSwapTask:type_name -> task.DefaultSwap
	68,  // 62: flow.Task.syncSwapLPTask:type_name -> task.DefaultLP
	63,  // 63: flow.Task.maverickSwapTask:type_name -> task.DefaultSwap
	63,  // 64: flow.Task.spaceFiSwapTask:type_name -> task.DefaultSwap
	63,  // 65: flow.Task.velocoreSwapTask:type_name -> task.DefaultSwap
	63,  // 66: flow.Task.izumiSwapTask:type_name -> task.DefaultSwap
	63,  // 67: flow.Task.veSyncSwapTask:type_name -> task.DefaultSwap
	63,  // 68: flow.Task.ezkaliburSwapTask:type_name -> task.DefaultSwap
	63,  // 69: flow.Task.zkSwapTask:type_name -> task.DefaultSwap
	63,  // 70: flow.Task.traderJoeSwapTask:type_name -> task.DefaultSwap
	69,  // 71: flow.Task.merklyMintAndBridgeNFTTask:type_name -> task.MerklyMintAndBridgeNFTTask
	70,  // 72: flow.Task.deployStarkNetAccountTask:type_name -> task.DeployStarkNetAccountTask
	63,  // 73: flow.Task.swap10k:type_name -> task.DefaultSwap
	63,  // 74: flow.Task.pancakeSwapTask:type_name -> task.DefaultSwap
	63,  // 75: flow.Task.sithSwapTask:type_name -> task.DefaultSwap
	63,  // 76: flow.Task.jediSwapTask:type_name -> task.DefaultSwap
	63,  // 77: flow.Task.mySwapTask:type_name -> task.DefaultSwap
	63,  // 78: flow.Task.protosSwapTask:type_name -> task.DefaultSwap
	71,  // 79: flow.Task.starkNetBridgeTask:type_name -> task.LiquidityBridgeTask
	72,  // 80: flow.Task.dmailTask:type_name -> task.SimpleTask
	72,  // 81: flow.Task.starkNetIdMintTask:type_name -> task.SimpleTask
	63,  // 82: flow.Task.odosSwapTask:type_name -> task.DefaultSwap
	73,  // 83: flow.Task.acrossBridgeTask:type_name -> task.DefaultBridge
	63,  // 84: flow.Task.avnuSwapTask:type_name -> task.DefaultSwap
	63,  // 85: flow.Task.fibrousSwapTask:type_name -> task.DefaultSwap
	74,  // 86: flow.Task.exchangeSwapTask:type_name -> task.ExchangeSwapTask
	68,  // 87: flow.Task.zkLendLPTask:type_name -> task.DefaultLP
	63,  // 88: flow.Task.woofiSwapTask:type_name -> task.DefaultSwap
	68,  // 89: flow.Task.aaveLPTask:type_name -> task.DefaultLP
	72,  // 90: flow.Task.mintFunTask:type_name -> task.SimpleTask
	72,  // 91: flow.Task.mintMerklyTask:type_name -> task.SimpleTask
	72,  // 92: flow.Task.mintZeriusTask:type_name -> task.SimpleTask
	63,  // 93: flow.Task.kyberSwapTask:type_name -> task.DefaultSwap
	63,  // 94: flow.Task.ekuboSwapTask:type_name -> task.DefaultSwap
	68,  // 95: flow.Task.nostraLPTask:type_name -> task.DefaultLP
	63,  // 96: flow.Task.wethSwapTask:type_name -> task.DefaultSwap
	73,  // 97: flow.Task.coreDaoBridge:type_name -> task.DefaultBridge
	73,  // 98: flow.Task.stargateBridge:type_name -> task.DefaultBridge
	68,  // 99: flow.Task.stakeSTG:type_name -> task.DefaultLP
	73,  // 100: flow.Task.merklyRefuel:type_name -> task.DefaultBridge
	73,  // 101: flow.Task.l2passRefuel:type_name -> task.DefaultBridge
	72,  // 102: flow.Task.starknetClaim:type_name -> task.SimpleTask
	68,  // 103: flow.Task.eralendLPTask:type_name -> task.DefaultLP
	39,  // 104: flow.CreateFlowRequest.tasks:type_name -> flow.Task
	39,  // 105: flow.CreateFlowRequest.random_tasks:type_name -> flow.Task
	6,   // 106: flow.UpdateFlowRequest.flow:type_name -> flow.Flow
	6,   // 107: flow.UpdateFlowResponse.flow:type_name -> flow.Flow
	6,   // 108: flow.CreateFlowResponse.flow:type_name -> flow.Flow
	46,  // 109: flow.ListFlowResponse.flows:type_name -> flow.FlowListItem
	49,  // 110: flow.FlowListItem.created_at:type_name -> google.protobuf.Timestamp
	49,  // 111: flow.FlowListItem.deleted_at:type_name -> google.protobuf.Timestamp
	41,  // 112: flow.FlowService.UpdateFlow:input_type -> flow.UpdateFlowRequest
	8,   // 113: flow.FlowService.UpdateFlowV2:input_type -> flow.UpdateFlowV2Request
	40,  // 114: flow.FlowService.CreateFlow:input_type -> flow.CreateFlowRequest
	36,  // 115: flow.FlowService.GetFlow:input_type -> flow.GetFlowRequest
	44,  // 116: flow.FlowService.ListFlow:input_type -> flow.ListFlowRequest
	47,  // 117: flow.FlowService.DeleteFlow:input_type -> flow.DeleteFlowRequest
	34,  // 118: flow.FlowService.CopyFlow:input_type -> flow.CopyFlowReq
	30,  // 119: flow.FlowService.ShareFlow:input_type -> flow.ShareFlowReq
	32,  // 120: flow.FlowService.HideFlow:input_type -> flow.HideFlowReq
	28,  // 121: flow.FlowService.SharedFlows:input_type -> flow.SharedFlowsReq
	27,  // 122: flow.FlowService.SharedFlow:input_type -> flow.SharedFlowReq
	24,  // 123: flow.FlowService.UseSharedFlow:input_type -> flow.UseSharedFlowReq
	19,  // 124: flow.FlowService.CreateFlowV2:input_type -> flow.CreateFlowV2Req
	15,  // 125: flow.FlowService.FlowPreview:input_type -> flow.FlowPreviewReq
	12,  // 126: flow.FlowService.OnlyRandomFlowPreview:input_type -> flow.OnlyRandomFlowPreviewReq
	12,  // 127: flow.FlowService.OnlyRandomFlowFromTokens:input_type -> flow.OnlyRandomFlowPreviewReq
	10,  // 128: flow.FlowService.GetFlowV2:input_type -> flow.GetFlowV2Req
	42,  // 129: flow.FlowService.UpdateFlow:output_type -> flow.UpdateFlowResponse
	9,   // 130: flow.FlowService.UpdateFlowV2:output_type -> flow.UpdateFlowV2Response
	43,  // 131: flow.FlowService.CreateFlow:output_type -> flow.CreateFlowResponse
	37,  // 132: flow.FlowService.GetFlow:output_type -> flow.GetFlowResponse
	45,  // 133: flow.FlowService.ListFlow:output_type -> flow.ListFlowResponse
	48,  // 134: flow.FlowService.DeleteFlow:output_type -> flow.DeleteFlowResponse
	35,  // 135: flow.FlowService.CopyFlow:output_type -> flow.CopyFlowRes
	31,  // 136: flow.FlowService.ShareFlow:output_type -> flow.ShareFlowRes
	33,  // 137: flow.FlowService.HideFlow:output_type -> flow.HideFlowRes
	29,  // 138: flow.FlowService.SharedFlows:output_type -> flow.SharedFlowsRes
	26,  // 139: flow.FlowService.SharedFlow:output_type -> flow.SharedFlowRes
	25,  // 140: flow.FlowService.UseSharedFlow:output_type -> flow.UseSharedFlowRes
	23,  // 141: flow.FlowService.CreateFlowV2:output_type -> flow.CreateFlowV2Res
	16,  // 142: flow.FlowService.FlowPreview:output_type -> flow.FlowPreviewRes
	14,  // 143: flow.FlowService.OnlyRandomFlowPreview:output_type -> flow.OnlyRandomFlowPreviewRes
	13,  // 144: flow.FlowService.OnlyRandomFlowFromTokens:output_type -> flow.OnlyRandomFlowFromTokensRes
	11,  // 145: flow.FlowService.GetFlowV2:output_type -> flow.GetFlowV2Res
	129, // [129:146] is the sub-list for method output_type
	112, // [112:129] is the sub-list for method input_type
	112, // [112:112] is the sub-list for extension type_name
	112, // [112:112] is the sub-list for extension extendee
	0,   // [0:112] is the sub-list for field type_name
}

func init() { file_v1_flow_proto_init() }
func file_v1_flow_proto_init() {
	if File_v1_flow_proto != nil {
		return
	}
	file_v1_shared_proto_init()
	file_v1_task_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_flow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowShared); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPsimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPswap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPswapItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowV2Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowV2Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlyRandomFlowPreviewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlyRandomFlowFromTokensRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlyRandomFlowPreviewRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowPreviewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowPreviewRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowV2Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowBlockMan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowBlockRand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowV2Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseSharedFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseSharedFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFlowsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFlowsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletByWalletMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_flow_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_v1_flow_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RandomTask_Swap)(nil),
		(*RandomTask_Simple)(nil),
	}
	file_v1_flow_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_v1_flow_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*FlowBlock_Man)(nil),
		(*FlowBlock_Rand)(nil),
	}
	file_v1_flow_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*Task_StargateBridgeTask)(nil),
		(*Task_MockTask)(nil),
		(*Task_DelayTask)(nil),
		(*Task_WithdrawExchangeTask)(nil),
		(*Task_OkexDepositTask)(nil),
		(*Task_TestNetBridgeSwapTask)(nil),
		(*Task_SnapshotVoteTask)(nil),
		(*Task_OkexBinanaceTask)(nil),
		(*Task_Swap1InchTask)(nil),
		(*Task_SyncSwapTask)(nil),
		(*Task_ZkSyncOfficialBridgeToEthereumTask)(nil),
		(*Task_OrbiterBridgeTask)(nil),
		(*Task_ZkSyncOfficialBridgeFromEthereumTask)(nil),
		(*Task_WETHTask)(nil),
		(*Task_MuteioSwapTask)(nil),
		(*Task_SyncSwapLPTask)(nil),
		(*Task_MaverickSwapTask)(nil),
		(*Task_SpaceFiSwapTask)(nil),
		(*Task_VelocoreSwapTask)(nil),
		(*Task_IzumiSwapTask)(nil),
		(*Task_VeSyncSwapTask)(nil),
		(*Task_EzkaliburSwapTask)(nil),
		(*Task_ZkSwapTask)(nil),
		(*Task_TraderJoeSwapTask)(nil),
		(*Task_MerklyMintAndBridgeNFTTask)(nil),
		(*Task_DeployStarkNetAccountTask)(nil),
		(*Task_Swap10K)(nil),
		(*Task_PancakeSwapTask)(nil),
		(*Task_SithSwapTask)(nil),
		(*Task_JediSwapTask)(nil),
		(*Task_MySwapTask)(nil),
		(*Task_ProtosSwapTask)(nil),
		(*Task_StarkNetBridgeTask)(nil),
		(*Task_DmailTask)(nil),
		(*Task_StarkNetIdMintTask)(nil),
		(*Task_OdosSwapTask)(nil),
		(*Task_AcrossBridgeTask)(nil),
		(*Task_AvnuSwapTask)(nil),
		(*Task_FibrousSwapTask)(nil),
		(*Task_ExchangeSwapTask)(nil),
		(*Task_ZkLendLPTask)(nil),
		(*Task_WoofiSwapTask)(nil),
		(*Task_AaveLPTask)(nil),
		(*Task_MintFunTask)(nil),
		(*Task_MintMerklyTask)(nil),
		(*Task_MintZeriusTask)(nil),
		(*Task_KyberSwapTask)(nil),
		(*Task_EkuboSwapTask)(nil),
		(*Task_NostraLPTask)(nil),
		(*Task_WethSwapTask)(nil),
		(*Task_CoreDaoBridge)(nil),
		(*Task_StargateBridge)(nil),
		(*Task_StakeSTG)(nil),
		(*Task_MerklyRefuel)(nil),
		(*Task_L2PassRefuel)(nil),
		(*Task_StarknetClaim)(nil),
		(*Task_EralendLPTask)(nil),
	}
	file_v1_flow_proto_msgTypes[46].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_flow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_flow_proto_goTypes,
		DependencyIndexes: file_v1_flow_proto_depIdxs,
		MessageInfos:      file_v1_flow_proto_msgTypes,
	}.Build()
	File_v1_flow_proto = out.File
	file_v1_flow_proto_rawDesc = nil
	file_v1_flow_proto_goTypes = nil
	file_v1_flow_proto_depIdxs = nil
}

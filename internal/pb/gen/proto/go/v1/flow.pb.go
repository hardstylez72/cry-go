// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: v1/flow.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlowShared struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Label       string                 `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	ParentId    string                 `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeletedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Tasks       []*Task                `protobuf:"bytes,7,rep,name=tasks,proto3" json:"tasks,omitempty"`
	CreatorId   string                 `protobuf:"bytes,8,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
}

func (x *FlowShared) Reset() {
	*x = FlowShared{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowShared) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowShared) ProtoMessage() {}

func (x *FlowShared) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowShared.ProtoReflect.Descriptor instead.
func (*FlowShared) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{0}
}

func (x *FlowShared) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowShared) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FlowShared) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FlowShared) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *FlowShared) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FlowShared) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *FlowShared) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *FlowShared) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

type UseSharedFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UseSharedFlowReq) Reset() {
	*x = UseSharedFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseSharedFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseSharedFlowReq) ProtoMessage() {}

func (x *UseSharedFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseSharedFlowReq.ProtoReflect.Descriptor instead.
func (*UseSharedFlowReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{1}
}

func (x *UseSharedFlowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UseSharedFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UseSharedFlowRes) Reset() {
	*x = UseSharedFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseSharedFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseSharedFlowRes) ProtoMessage() {}

func (x *UseSharedFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseSharedFlowRes.ProtoReflect.Descriptor instead.
func (*UseSharedFlowRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{2}
}

func (x *UseSharedFlowRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SharedFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow *FlowShared `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *SharedFlowRes) Reset() {
	*x = SharedFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFlowRes) ProtoMessage() {}

func (x *SharedFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFlowRes.ProtoReflect.Descriptor instead.
func (*SharedFlowRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{3}
}

func (x *SharedFlowRes) GetFlow() *FlowShared {
	if x != nil {
		return x.Flow
	}
	return nil
}

type SharedFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SharedFlowReq) Reset() {
	*x = SharedFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFlowReq) ProtoMessage() {}

func (x *SharedFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFlowReq.ProtoReflect.Descriptor instead.
func (*SharedFlowReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{4}
}

func (x *SharedFlowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SharedFlowsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharedFlowsReq) Reset() {
	*x = SharedFlowsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFlowsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFlowsReq) ProtoMessage() {}

func (x *SharedFlowsReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFlowsReq.ProtoReflect.Descriptor instead.
func (*SharedFlowsReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{5}
}

type SharedFlowsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*FlowShared `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SharedFlowsRes) Reset() {
	*x = SharedFlowsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFlowsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFlowsRes) ProtoMessage() {}

func (x *SharedFlowsRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFlowsRes.ProtoReflect.Descriptor instead.
func (*SharedFlowsRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{6}
}

func (x *SharedFlowsRes) GetItems() []*FlowShared {
	if x != nil {
		return x.Items
	}
	return nil
}

type ShareFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ShareFlowReq) Reset() {
	*x = ShareFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFlowReq) ProtoMessage() {}

func (x *ShareFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFlowReq.ProtoReflect.Descriptor instead.
func (*ShareFlowReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{7}
}

func (x *ShareFlowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShareFlowReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ShareFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ShareFlowRes) Reset() {
	*x = ShareFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFlowRes) ProtoMessage() {}

func (x *ShareFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFlowRes.ProtoReflect.Descriptor instead.
func (*ShareFlowRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{8}
}

func (x *ShareFlowRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HideFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HideFlowReq) Reset() {
	*x = HideFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideFlowReq) ProtoMessage() {}

func (x *HideFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideFlowReq.ProtoReflect.Descriptor instead.
func (*HideFlowReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{9}
}

func (x *HideFlowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HideFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HideFlowRes) Reset() {
	*x = HideFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideFlowRes) ProtoMessage() {}

func (x *HideFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideFlowRes.ProtoReflect.Descriptor instead.
func (*HideFlowRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{10}
}

type CopyFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CopyFlowReq) Reset() {
	*x = CopyFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFlowReq) ProtoMessage() {}

func (x *CopyFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFlowReq.ProtoReflect.Descriptor instead.
func (*CopyFlowReq) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{11}
}

func (x *CopyFlowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CopyFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CopyFlowRes) Reset() {
	*x = CopyFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFlowRes) ProtoMessage() {}

func (x *CopyFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFlowRes.ProtoReflect.Descriptor instead.
func (*CopyFlowRes) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{12}
}

func (x *CopyFlowRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetFlowRequest) Reset() {
	*x = GetFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowRequest) ProtoMessage() {}

func (x *GetFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowRequest.ProtoReflect.Descriptor instead.
func (*GetFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{13}
}

func (x *GetFlowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow *Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *GetFlowResponse) Reset() {
	*x = GetFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowResponse) ProtoMessage() {}

func (x *GetFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowResponse.ProtoReflect.Descriptor instead.
func (*GetFlowResponse) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{14}
}

func (x *GetFlowResponse) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label     string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Tasks     []*Task                `protobuf:"bytes,5,rep,name=tasks,proto3" json:"tasks,omitempty"`
	NextId    *string                `protobuf:"bytes,6,opt,name=next_id,json=nextId,proto3,oneof" json:"next_id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{15}
}

func (x *Flow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Flow) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Flow) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Flow) GetNextId() string {
	if x != nil && x.NextId != nil {
		return *x.NextId
	}
	return ""
}

func (x *Flow) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Flow) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type WalletByWalletMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelayBetweenWallets      int64 `protobuf:"varint,1,opt,name=delayBetweenWallets,proto3" json:"delayBetweenWallets,omitempty"`
	DelayBetweenTransactions int64 `protobuf:"varint,2,opt,name=delayBetweenTransactions,proto3" json:"delayBetweenTransactions,omitempty"`
}

func (x *WalletByWalletMode) Reset() {
	*x = WalletByWalletMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletByWalletMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletByWalletMode) ProtoMessage() {}

func (x *WalletByWalletMode) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletByWalletMode.ProtoReflect.Descriptor instead.
func (*WalletByWalletMode) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{16}
}

func (x *WalletByWalletMode) GetDelayBetweenWallets() int64 {
	if x != nil {
		return x.DelayBetweenWallets
	}
	return 0
}

func (x *WalletByWalletMode) GetDelayBetweenTransactions() int64 {
	if x != nil {
		return x.DelayBetweenTransactions
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight      int64    `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	TaskType    TaskType `protobuf:"varint,2,opt,name=taskType,proto3,enum=task.TaskType" json:"taskType,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are assignable to Task:
	//
	//	*Task_StargateBridgeTask
	//	*Task_MockTask
	//	*Task_DelayTask
	//	*Task_WithdrawExchangeTask
	//	*Task_OkexDepositTask
	//	*Task_TestNetBridgeSwapTask
	//	*Task_SnapshotVoteTask
	//	*Task_OkexBinanaceTask
	//	*Task_Swap1InchTask
	//	*Task_SyncSwapTask
	//	*Task_ZkSyncOfficialBridgeToEthereumTask
	//	*Task_OrbiterBridgeTask
	//	*Task_ZkSyncOfficialBridgeFromEthereumTask
	//	*Task_WETHTask
	//	*Task_MuteioSwapTask
	//	*Task_SyncSwapLPTask
	//	*Task_MaverickSwapTask
	//	*Task_SpaceFiSwapTask
	//	*Task_VelocoreSwapTask
	//	*Task_IzumiSwapTask
	//	*Task_VeSyncSwapTask
	//	*Task_EzkaliburSwapTask
	//	*Task_ZkSwapTask
	//	*Task_TraderJoeSwapTask
	//	*Task_MerklyMintAndBridgeNFTTask
	//	*Task_DeployStarkNetAccountTask
	//	*Task_Swap10K
	//	*Task_PancakeSwapTask
	//	*Task_SithSwapTask
	//	*Task_JediSwapTask
	//	*Task_MySwapTask
	//	*Task_ProtosSwapTask
	//	*Task_StarkNetBridgeTask
	//	*Task_DmailTask
	//	*Task_StarkNetIdMintTask
	//	*Task_OdosSwapTask
	//	*Task_AcrossBridgeTask
	//	*Task_AvnuSwapTask
	//	*Task_FibrousSwapTask
	//	*Task_ExchangeSwapTask
	//	*Task_ZkLendLPTask
	Task isTask_Task `protobuf_oneof:"task"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{17}
}

func (x *Task) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Task) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_StargateBridge
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (m *Task) GetTask() isTask_Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (x *Task) GetStargateBridgeTask() *StargateBridgeTask {
	if x, ok := x.GetTask().(*Task_StargateBridgeTask); ok {
		return x.StargateBridgeTask
	}
	return nil
}

func (x *Task) GetMockTask() *MockTask {
	if x, ok := x.GetTask().(*Task_MockTask); ok {
		return x.MockTask
	}
	return nil
}

func (x *Task) GetDelayTask() *DelayTask {
	if x, ok := x.GetTask().(*Task_DelayTask); ok {
		return x.DelayTask
	}
	return nil
}

func (x *Task) GetWithdrawExchangeTask() *WithdrawExchangeTask {
	if x, ok := x.GetTask().(*Task_WithdrawExchangeTask); ok {
		return x.WithdrawExchangeTask
	}
	return nil
}

func (x *Task) GetOkexDepositTask() *OkexDepositTask {
	if x, ok := x.GetTask().(*Task_OkexDepositTask); ok {
		return x.OkexDepositTask
	}
	return nil
}

func (x *Task) GetTestNetBridgeSwapTask() *TestNetBridgeSwapTask {
	if x, ok := x.GetTask().(*Task_TestNetBridgeSwapTask); ok {
		return x.TestNetBridgeSwapTask
	}
	return nil
}

func (x *Task) GetSnapshotVoteTask() *SnapshotVoteTask {
	if x, ok := x.GetTask().(*Task_SnapshotVoteTask); ok {
		return x.SnapshotVoteTask
	}
	return nil
}

func (x *Task) GetOkexBinanaceTask() *OkexBinanaceTask {
	if x, ok := x.GetTask().(*Task_OkexBinanaceTask); ok {
		return x.OkexBinanaceTask
	}
	return nil
}

func (x *Task) GetSwap1InchTask() *Swap1InchTask {
	if x, ok := x.GetTask().(*Task_Swap1InchTask); ok {
		return x.Swap1InchTask
	}
	return nil
}

func (x *Task) GetSyncSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_SyncSwapTask); ok {
		return x.SyncSwapTask
	}
	return nil
}

func (x *Task) GetZkSyncOfficialBridgeToEthereumTask() *ZkSyncOfficialBridgeToEthereumTask {
	if x, ok := x.GetTask().(*Task_ZkSyncOfficialBridgeToEthereumTask); ok {
		return x.ZkSyncOfficialBridgeToEthereumTask
	}
	return nil
}

func (x *Task) GetOrbiterBridgeTask() *OrbiterBridgeTask {
	if x, ok := x.GetTask().(*Task_OrbiterBridgeTask); ok {
		return x.OrbiterBridgeTask
	}
	return nil
}

func (x *Task) GetZkSyncOfficialBridgeFromEthereumTask() *ZkSyncOfficialBridgeFromEthereumTask {
	if x, ok := x.GetTask().(*Task_ZkSyncOfficialBridgeFromEthereumTask); ok {
		return x.ZkSyncOfficialBridgeFromEthereumTask
	}
	return nil
}

func (x *Task) GetWETHTask() *WETHTask {
	if x, ok := x.GetTask().(*Task_WETHTask); ok {
		return x.WETHTask
	}
	return nil
}

func (x *Task) GetMuteioSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_MuteioSwapTask); ok {
		return x.MuteioSwapTask
	}
	return nil
}

func (x *Task) GetSyncSwapLPTask() *DefaultLP {
	if x, ok := x.GetTask().(*Task_SyncSwapLPTask); ok {
		return x.SyncSwapLPTask
	}
	return nil
}

func (x *Task) GetMaverickSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_MaverickSwapTask); ok {
		return x.MaverickSwapTask
	}
	return nil
}

func (x *Task) GetSpaceFiSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_SpaceFiSwapTask); ok {
		return x.SpaceFiSwapTask
	}
	return nil
}

func (x *Task) GetVelocoreSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_VelocoreSwapTask); ok {
		return x.VelocoreSwapTask
	}
	return nil
}

func (x *Task) GetIzumiSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_IzumiSwapTask); ok {
		return x.IzumiSwapTask
	}
	return nil
}

func (x *Task) GetVeSyncSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_VeSyncSwapTask); ok {
		return x.VeSyncSwapTask
	}
	return nil
}

func (x *Task) GetEzkaliburSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_EzkaliburSwapTask); ok {
		return x.EzkaliburSwapTask
	}
	return nil
}

func (x *Task) GetZkSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_ZkSwapTask); ok {
		return x.ZkSwapTask
	}
	return nil
}

func (x *Task) GetTraderJoeSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_TraderJoeSwapTask); ok {
		return x.TraderJoeSwapTask
	}
	return nil
}

func (x *Task) GetMerklyMintAndBridgeNFTTask() *MerklyMintAndBridgeNFTTask {
	if x, ok := x.GetTask().(*Task_MerklyMintAndBridgeNFTTask); ok {
		return x.MerklyMintAndBridgeNFTTask
	}
	return nil
}

func (x *Task) GetDeployStarkNetAccountTask() *DeployStarkNetAccountTask {
	if x, ok := x.GetTask().(*Task_DeployStarkNetAccountTask); ok {
		return x.DeployStarkNetAccountTask
	}
	return nil
}

func (x *Task) GetSwap10K() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_Swap10K); ok {
		return x.Swap10K
	}
	return nil
}

func (x *Task) GetPancakeSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_PancakeSwapTask); ok {
		return x.PancakeSwapTask
	}
	return nil
}

func (x *Task) GetSithSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_SithSwapTask); ok {
		return x.SithSwapTask
	}
	return nil
}

func (x *Task) GetJediSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_JediSwapTask); ok {
		return x.JediSwapTask
	}
	return nil
}

func (x *Task) GetMySwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_MySwapTask); ok {
		return x.MySwapTask
	}
	return nil
}

func (x *Task) GetProtosSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_ProtosSwapTask); ok {
		return x.ProtosSwapTask
	}
	return nil
}

func (x *Task) GetStarkNetBridgeTask() *LiquidityBridgeTask {
	if x, ok := x.GetTask().(*Task_StarkNetBridgeTask); ok {
		return x.StarkNetBridgeTask
	}
	return nil
}

func (x *Task) GetDmailTask() *SimpleTask {
	if x, ok := x.GetTask().(*Task_DmailTask); ok {
		return x.DmailTask
	}
	return nil
}

func (x *Task) GetStarkNetIdMintTask() *SimpleTask {
	if x, ok := x.GetTask().(*Task_StarkNetIdMintTask); ok {
		return x.StarkNetIdMintTask
	}
	return nil
}

func (x *Task) GetOdosSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_OdosSwapTask); ok {
		return x.OdosSwapTask
	}
	return nil
}

func (x *Task) GetAcrossBridgeTask() *DefaultBridge {
	if x, ok := x.GetTask().(*Task_AcrossBridgeTask); ok {
		return x.AcrossBridgeTask
	}
	return nil
}

func (x *Task) GetAvnuSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_AvnuSwapTask); ok {
		return x.AvnuSwapTask
	}
	return nil
}

func (x *Task) GetFibrousSwapTask() *DefaultSwap {
	if x, ok := x.GetTask().(*Task_FibrousSwapTask); ok {
		return x.FibrousSwapTask
	}
	return nil
}

func (x *Task) GetExchangeSwapTask() *ExchangeSwapTask {
	if x, ok := x.GetTask().(*Task_ExchangeSwapTask); ok {
		return x.ExchangeSwapTask
	}
	return nil
}

func (x *Task) GetZkLendLPTask() *DefaultLP {
	if x, ok := x.GetTask().(*Task_ZkLendLPTask); ok {
		return x.ZkLendLPTask
	}
	return nil
}

type isTask_Task interface {
	isTask_Task()
}

type Task_StargateBridgeTask struct {
	StargateBridgeTask *StargateBridgeTask `protobuf:"bytes,4,opt,name=stargateBridgeTask,proto3,oneof"`
}

type Task_MockTask struct {
	MockTask *MockTask `protobuf:"bytes,5,opt,name=mock_task,json=mockTask,proto3,oneof"` //deprecated
}

type Task_DelayTask struct {
	DelayTask *DelayTask `protobuf:"bytes,6,opt,name=delay_task,json=delayTask,proto3,oneof"`
}

type Task_WithdrawExchangeTask struct {
	WithdrawExchangeTask *WithdrawExchangeTask `protobuf:"bytes,7,opt,name=withdrawExchangeTask,proto3,oneof"`
}

type Task_OkexDepositTask struct {
	OkexDepositTask *OkexDepositTask `protobuf:"bytes,8,opt,name=okexDepositTask,proto3,oneof"`
}

type Task_TestNetBridgeSwapTask struct {
	TestNetBridgeSwapTask *TestNetBridgeSwapTask `protobuf:"bytes,9,opt,name=testNetBridgeSwapTask,proto3,oneof"`
}

type Task_SnapshotVoteTask struct {
	SnapshotVoteTask *SnapshotVoteTask `protobuf:"bytes,10,opt,name=snapshotVoteTask,proto3,oneof"`
}

type Task_OkexBinanaceTask struct {
	OkexBinanaceTask *OkexBinanaceTask `protobuf:"bytes,11,opt,name=okexBinanaceTask,proto3,oneof"` //deprecated
}

type Task_Swap1InchTask struct {
	Swap1InchTask *Swap1InchTask `protobuf:"bytes,12,opt,name=swap1inchTask,proto3,oneof"` //deprecated
}

type Task_SyncSwapTask struct {
	SyncSwapTask *DefaultSwap `protobuf:"bytes,13,opt,name=syncSwapTask,proto3,oneof"`
}

type Task_ZkSyncOfficialBridgeToEthereumTask struct {
	ZkSyncOfficialBridgeToEthereumTask *ZkSyncOfficialBridgeToEthereumTask `protobuf:"bytes,14,opt,name=zkSyncOfficialBridgeToEthereumTask,proto3,oneof"`
}

type Task_OrbiterBridgeTask struct {
	OrbiterBridgeTask *OrbiterBridgeTask `protobuf:"bytes,15,opt,name=orbiterBridgeTask,proto3,oneof"`
}

type Task_ZkSyncOfficialBridgeFromEthereumTask struct {
	ZkSyncOfficialBridgeFromEthereumTask *ZkSyncOfficialBridgeFromEthereumTask `protobuf:"bytes,16,opt,name=zkSyncOfficialBridgeFromEthereumTask,proto3,oneof"`
}

type Task_WETHTask struct {
	WETHTask *WETHTask `protobuf:"bytes,17,opt,name=wETHTask,proto3,oneof"`
}

type Task_MuteioSwapTask struct {
	MuteioSwapTask *DefaultSwap `protobuf:"bytes,18,opt,name=muteioSwapTask,proto3,oneof"`
}

type Task_SyncSwapLPTask struct {
	SyncSwapLPTask *DefaultLP `protobuf:"bytes,19,opt,name=syncSwapLPTask,proto3,oneof"`
}

type Task_MaverickSwapTask struct {
	MaverickSwapTask *DefaultSwap `protobuf:"bytes,20,opt,name=maverickSwapTask,proto3,oneof"`
}

type Task_SpaceFiSwapTask struct {
	SpaceFiSwapTask *DefaultSwap `protobuf:"bytes,21,opt,name=spaceFiSwapTask,proto3,oneof"`
}

type Task_VelocoreSwapTask struct {
	VelocoreSwapTask *DefaultSwap `protobuf:"bytes,22,opt,name=velocoreSwapTask,proto3,oneof"`
}

type Task_IzumiSwapTask struct {
	IzumiSwapTask *DefaultSwap `protobuf:"bytes,23,opt,name=izumiSwapTask,proto3,oneof"`
}

type Task_VeSyncSwapTask struct {
	VeSyncSwapTask *DefaultSwap `protobuf:"bytes,24,opt,name=veSyncSwapTask,proto3,oneof"`
}

type Task_EzkaliburSwapTask struct {
	EzkaliburSwapTask *DefaultSwap `protobuf:"bytes,25,opt,name=ezkaliburSwapTask,proto3,oneof"`
}

type Task_ZkSwapTask struct {
	ZkSwapTask *DefaultSwap `protobuf:"bytes,26,opt,name=zkSwapTask,proto3,oneof"`
}

type Task_TraderJoeSwapTask struct {
	TraderJoeSwapTask *DefaultSwap `protobuf:"bytes,27,opt,name=traderJoeSwapTask,proto3,oneof"`
}

type Task_MerklyMintAndBridgeNFTTask struct {
	MerklyMintAndBridgeNFTTask *MerklyMintAndBridgeNFTTask `protobuf:"bytes,28,opt,name=merklyMintAndBridgeNFTTask,proto3,oneof"`
}

type Task_DeployStarkNetAccountTask struct {
	DeployStarkNetAccountTask *DeployStarkNetAccountTask `protobuf:"bytes,29,opt,name=deployStarkNetAccountTask,proto3,oneof"`
}

type Task_Swap10K struct {
	Swap10K *DefaultSwap `protobuf:"bytes,30,opt,name=swap10k,proto3,oneof"`
}

type Task_PancakeSwapTask struct {
	PancakeSwapTask *DefaultSwap `protobuf:"bytes,31,opt,name=pancakeSwapTask,proto3,oneof"`
}

type Task_SithSwapTask struct {
	SithSwapTask *DefaultSwap `protobuf:"bytes,32,opt,name=sithSwapTask,proto3,oneof"`
}

type Task_JediSwapTask struct {
	JediSwapTask *DefaultSwap `protobuf:"bytes,33,opt,name=jediSwapTask,proto3,oneof"`
}

type Task_MySwapTask struct {
	MySwapTask *DefaultSwap `protobuf:"bytes,34,opt,name=mySwapTask,proto3,oneof"`
}

type Task_ProtosSwapTask struct {
	ProtosSwapTask *DefaultSwap `protobuf:"bytes,35,opt,name=protosSwapTask,proto3,oneof"`
}

type Task_StarkNetBridgeTask struct {
	StarkNetBridgeTask *LiquidityBridgeTask `protobuf:"bytes,36,opt,name=starkNetBridgeTask,proto3,oneof"`
}

type Task_DmailTask struct {
	DmailTask *SimpleTask `protobuf:"bytes,37,opt,name=dmailTask,proto3,oneof"`
}

type Task_StarkNetIdMintTask struct {
	StarkNetIdMintTask *SimpleTask `protobuf:"bytes,38,opt,name=starkNetIdMintTask,proto3,oneof"`
}

type Task_OdosSwapTask struct {
	OdosSwapTask *DefaultSwap `protobuf:"bytes,39,opt,name=odosSwapTask,proto3,oneof"`
}

type Task_AcrossBridgeTask struct {
	AcrossBridgeTask *DefaultBridge `protobuf:"bytes,40,opt,name=acrossBridgeTask,proto3,oneof"`
}

type Task_AvnuSwapTask struct {
	AvnuSwapTask *DefaultSwap `protobuf:"bytes,41,opt,name=avnuSwapTask,proto3,oneof"`
}

type Task_FibrousSwapTask struct {
	FibrousSwapTask *DefaultSwap `protobuf:"bytes,42,opt,name=fibrousSwapTask,proto3,oneof"`
}

type Task_ExchangeSwapTask struct {
	ExchangeSwapTask *ExchangeSwapTask `protobuf:"bytes,43,opt,name=exchangeSwapTask,proto3,oneof"`
}

type Task_ZkLendLPTask struct {
	ZkLendLPTask *DefaultLP `protobuf:"bytes,44,opt,name=zkLendLPTask,proto3,oneof"`
}

func (*Task_StargateBridgeTask) isTask_Task() {}

func (*Task_MockTask) isTask_Task() {}

func (*Task_DelayTask) isTask_Task() {}

func (*Task_WithdrawExchangeTask) isTask_Task() {}

func (*Task_OkexDepositTask) isTask_Task() {}

func (*Task_TestNetBridgeSwapTask) isTask_Task() {}

func (*Task_SnapshotVoteTask) isTask_Task() {}

func (*Task_OkexBinanaceTask) isTask_Task() {}

func (*Task_Swap1InchTask) isTask_Task() {}

func (*Task_SyncSwapTask) isTask_Task() {}

func (*Task_ZkSyncOfficialBridgeToEthereumTask) isTask_Task() {}

func (*Task_OrbiterBridgeTask) isTask_Task() {}

func (*Task_ZkSyncOfficialBridgeFromEthereumTask) isTask_Task() {}

func (*Task_WETHTask) isTask_Task() {}

func (*Task_MuteioSwapTask) isTask_Task() {}

func (*Task_SyncSwapLPTask) isTask_Task() {}

func (*Task_MaverickSwapTask) isTask_Task() {}

func (*Task_SpaceFiSwapTask) isTask_Task() {}

func (*Task_VelocoreSwapTask) isTask_Task() {}

func (*Task_IzumiSwapTask) isTask_Task() {}

func (*Task_VeSyncSwapTask) isTask_Task() {}

func (*Task_EzkaliburSwapTask) isTask_Task() {}

func (*Task_ZkSwapTask) isTask_Task() {}

func (*Task_TraderJoeSwapTask) isTask_Task() {}

func (*Task_MerklyMintAndBridgeNFTTask) isTask_Task() {}

func (*Task_DeployStarkNetAccountTask) isTask_Task() {}

func (*Task_Swap10K) isTask_Task() {}

func (*Task_PancakeSwapTask) isTask_Task() {}

func (*Task_SithSwapTask) isTask_Task() {}

func (*Task_JediSwapTask) isTask_Task() {}

func (*Task_MySwapTask) isTask_Task() {}

func (*Task_ProtosSwapTask) isTask_Task() {}

func (*Task_StarkNetBridgeTask) isTask_Task() {}

func (*Task_DmailTask) isTask_Task() {}

func (*Task_StarkNetIdMintTask) isTask_Task() {}

func (*Task_OdosSwapTask) isTask_Task() {}

func (*Task_AcrossBridgeTask) isTask_Task() {}

func (*Task_AvnuSwapTask) isTask_Task() {}

func (*Task_FibrousSwapTask) isTask_Task() {}

func (*Task_ExchangeSwapTask) isTask_Task() {}

func (*Task_ZkLendLPTask) isTask_Task() {}

type CreateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Tasks []*Task `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *CreateFlowRequest) Reset() {
	*x = CreateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowRequest) ProtoMessage() {}

func (x *CreateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowRequest.ProtoReflect.Descriptor instead.
func (*CreateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{18}
}

func (x *CreateFlowRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CreateFlowRequest) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type UpdateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow *Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *UpdateFlowRequest) Reset() {
	*x = UpdateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowRequest) ProtoMessage() {}

func (x *UpdateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateFlowRequest) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

type UpdateFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow *Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *UpdateFlowResponse) Reset() {
	*x = UpdateFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowResponse) ProtoMessage() {}

func (x *UpdateFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowResponse.ProtoReflect.Descriptor instead.
func (*UpdateFlowResponse) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateFlowResponse) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

type CreateFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow *Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *CreateFlowResponse) Reset() {
	*x = CreateFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowResponse) ProtoMessage() {}

func (x *CreateFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowResponse.ProtoReflect.Descriptor instead.
func (*CreateFlowResponse) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{21}
}

func (x *CreateFlowResponse) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

type ListFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFlowRequest) Reset() {
	*x = ListFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlowRequest) ProtoMessage() {}

func (x *ListFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlowRequest.ProtoReflect.Descriptor instead.
func (*ListFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{22}
}

type ListFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flows []*Flow `protobuf:"bytes,1,rep,name=flows,proto3" json:"flows,omitempty"`
}

func (x *ListFlowResponse) Reset() {
	*x = ListFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlowResponse) ProtoMessage() {}

func (x *ListFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlowResponse.ProtoReflect.Descriptor instead.
func (*ListFlowResponse) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{23}
}

func (x *ListFlowResponse) GetFlows() []*Flow {
	if x != nil {
		return x.Flows
	}
	return nil
}

type DeleteFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteFlowRequest) Reset() {
	*x = DeleteFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlowRequest) ProtoMessage() {}

func (x *DeleteFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlowRequest.ProtoReflect.Descriptor instead.
func (*DeleteFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteFlowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFlowResponse) Reset() {
	*x = DeleteFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlowResponse) ProtoMessage() {}

func (x *DeleteFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlowResponse.ProtoReflect.Descriptor instead.
func (*DeleteFlowResponse) Descriptor() ([]byte, []int) {
	return file_v1_flow_proto_rawDescGZIP(), []int{25}
}

var File_v1_flow_proto protoreflect.FileDescriptor

var file_v1_flow_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x03, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x3a, 0x4e, 0x92, 0x41, 0x4b, 0x0a, 0x49, 0xd2, 0x01, 0x02, 0x69, 0x64,
	0xd2, 0x01, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0xd2, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xd2,
	0x01, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0xd2, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x22, 0x2e, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01,
	0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01,
	0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a,
	0x07, 0xd2, 0x01, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x2b, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05,
	0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x22, 0x47, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x3a, 0x0d, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0xd2, 0x01, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x5a, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x18, 0x92, 0x41, 0x15, 0x0a, 0x13, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0c,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41,
	0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x0b, 0x48, 0x69, 0x64, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01,
	0x02, 0x69, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x48, 0x69, 0x64, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x22, 0x29, 0x0a, 0x0b, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a,
	0x0b, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41,
	0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a,
	0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07,
	0xd2, 0x01, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xb5, 0x02, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x65, 0x78,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x3a, 0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0xd2,
	0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xd2, 0x01, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22,
	0xba, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x79, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0xd2, 0x01, 0x13, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0xd2, 0x01, 0x18, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe3, 0x16, 0x0a,
	0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x73,
	0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x09, 0x6d, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6f,
	0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x50, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x48, 0x00, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x6b,
	0x65, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x6b, 0x65, 0x78, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x6b,
	0x65, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x53, 0x0a,
	0x15, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x15, 0x74, 0x65, 0x73,
	0x74, 0x4e, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x6f, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x56, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x10, 0x6f, 0x6b, 0x65, 0x78,
	0x42, 0x69, 0x6e, 0x61, 0x6e, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x6b, 0x65, 0x78, 0x42, 0x69,
	0x6e, 0x61, 0x6e, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6b,
	0x65, 0x78, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3b,
	0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x31, 0x69, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x77, 0x61,
	0x70, 0x31, 0x69, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x77,
	0x61, 0x70, 0x31, 0x69, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x73,
	0x79, 0x6e, 0x63, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x77, 0x61, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x7a, 0x0a, 0x22, 0x7a, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x5a, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x22, 0x7a, 0x6b,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x54, 0x6f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x47, 0x0a, 0x11, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x80, 0x01, 0x0a, 0x24, 0x7a, 0x6b,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x61,
	0x73, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x5a, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x24, 0x7a, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2c, 0x0a, 0x08,
	0x77, 0x45, 0x54, 0x48, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x45, 0x54, 0x48, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00,
	0x52, 0x08, 0x77, 0x45, 0x54, 0x48, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x0e, 0x6d, 0x75,
	0x74, 0x65, 0x69, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x75, 0x74, 0x65, 0x69, 0x6f, 0x53,
	0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x53,
	0x77, 0x61, 0x70, 0x4c, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x50,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x50, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x10, 0x6d, 0x61, 0x76, 0x65, 0x72, 0x69, 0x63, 0x6b, 0x53, 0x77,
	0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x10, 0x6d, 0x61, 0x76, 0x65, 0x72, 0x69, 0x63, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x69, 0x53, 0x77,
	0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x0f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x10, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x10, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x0d, 0x69, 0x7a, 0x75, 0x6d, 0x69, 0x53, 0x77, 0x61, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52,
	0x0d, 0x69, 0x7a, 0x75, 0x6d, 0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3b,
	0x0a, 0x0e, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x11, 0x65,
	0x7a, 0x6b, 0x61, 0x6c, 0x69, 0x62, 0x75, 0x72, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x11, 0x65, 0x7a, 0x6b,
	0x61, 0x6c, 0x69, 0x62, 0x75, 0x72, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33,
	0x0a, 0x0a, 0x7a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x7a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x62, 0x0a, 0x1a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x79,
	0x4d, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x46, 0x54,
	0x54, 0x61, 0x73, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x46, 0x54, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x1a,
	0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x4e, 0x46, 0x54, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x5f, 0x0a, 0x19, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x72, 0x6b,
	0x4e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00,
	0x52, 0x19, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x07, 0x73,
	0x77, 0x61, 0x70, 0x31, 0x30, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x77, 0x61, 0x70, 0x31, 0x30, 0x6b, 0x12, 0x3d, 0x0a, 0x0f, 0x70, 0x61,
	0x6e, 0x63, 0x61, 0x6b, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x6e, 0x63, 0x61, 0x6b,
	0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x69, 0x74,
	0x68, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77,
	0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x69, 0x74, 0x68, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x6a, 0x65, 0x64, 0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x6a,
	0x65, 0x64, 0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x0a, 0x0a, 0x6d,
	0x79, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77,
	0x61, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x79, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x4b, 0x0a,
	0x12, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x09, 0x64, 0x6d,
	0x61, 0x69, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x42, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x64, 0x6f, 0x73, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x64, 0x6f,
	0x73, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x61, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x0c,
	0x61, 0x76, 0x6e, 0x75, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x76, 0x6e, 0x75, 0x53, 0x77, 0x61,
	0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x0f, 0x66, 0x69, 0x62, 0x72, 0x6f, 0x75, 0x73,
	0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x62, 0x72, 0x6f, 0x75, 0x73, 0x53, 0x77, 0x61, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x0c, 0x7a, 0x6b,
	0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c,
	0x50, 0x48, 0x00, 0x52, 0x0c, 0x7a, 0x6b, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x50, 0x54, 0x61, 0x73,
	0x6b, 0x3a, 0x27, 0x92, 0x41, 0x24, 0x0a, 0x22, 0xd2, 0x01, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0xd2, 0x01, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x22, 0x62, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a,
	0x15, 0x92, 0x41, 0x12, 0x0a, 0x10, 0xd2, 0x01, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x0c, 0x92, 0x41, 0x09,
	0x0a, 0x07, 0xd2, 0x01, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x42, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x3a,
	0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x42, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66,
	0x6c, 0x6f, 0x77, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x66, 0x6c, 0x6f,
	0x77, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x0d, 0x92, 0x41, 0x0a, 0x0a,
	0x08, 0xd2, 0x01, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x2f, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a,
	0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x92, 0x08, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x62, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x17,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a,
	0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x67, 0x65, 0x74,
	0x12, 0x5a, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x15, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x17, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x51, 0x0a, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x11, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63,
	0x6f, 0x70, 0x79, 0x12, 0x57, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x51, 0x0a, 0x08,
	0x48, 0x69, 0x64, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x11, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x48, 0x69, 0x64, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x68, 0x69, 0x64, 0x65, 0x12,
	0x61, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x14,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x59, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x66, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x16,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x73,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x22, 0x25,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2f, 0x75, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_flow_proto_rawDescOnce sync.Once
	file_v1_flow_proto_rawDescData = file_v1_flow_proto_rawDesc
)

func file_v1_flow_proto_rawDescGZIP() []byte {
	file_v1_flow_proto_rawDescOnce.Do(func() {
		file_v1_flow_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_flow_proto_rawDescData)
	})
	return file_v1_flow_proto_rawDescData
}

var file_v1_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_v1_flow_proto_goTypes = []interface{}{
	(*FlowShared)(nil),                           // 0: flow.FlowShared
	(*UseSharedFlowReq)(nil),                     // 1: flow.UseSharedFlowReq
	(*UseSharedFlowRes)(nil),                     // 2: flow.UseSharedFlowRes
	(*SharedFlowRes)(nil),                        // 3: flow.SharedFlowRes
	(*SharedFlowReq)(nil),                        // 4: flow.SharedFlowReq
	(*SharedFlowsReq)(nil),                       // 5: flow.SharedFlowsReq
	(*SharedFlowsRes)(nil),                       // 6: flow.SharedFlowsRes
	(*ShareFlowReq)(nil),                         // 7: flow.ShareFlowReq
	(*ShareFlowRes)(nil),                         // 8: flow.ShareFlowRes
	(*HideFlowReq)(nil),                          // 9: flow.HideFlowReq
	(*HideFlowRes)(nil),                          // 10: flow.HideFlowRes
	(*CopyFlowReq)(nil),                          // 11: flow.CopyFlowReq
	(*CopyFlowRes)(nil),                          // 12: flow.CopyFlowRes
	(*GetFlowRequest)(nil),                       // 13: flow.GetFlowRequest
	(*GetFlowResponse)(nil),                      // 14: flow.GetFlowResponse
	(*Flow)(nil),                                 // 15: flow.Flow
	(*WalletByWalletMode)(nil),                   // 16: flow.WalletByWalletMode
	(*Task)(nil),                                 // 17: flow.Task
	(*CreateFlowRequest)(nil),                    // 18: flow.CreateFlowRequest
	(*UpdateFlowRequest)(nil),                    // 19: flow.UpdateFlowRequest
	(*UpdateFlowResponse)(nil),                   // 20: flow.UpdateFlowResponse
	(*CreateFlowResponse)(nil),                   // 21: flow.CreateFlowResponse
	(*ListFlowRequest)(nil),                      // 22: flow.ListFlowRequest
	(*ListFlowResponse)(nil),                     // 23: flow.ListFlowResponse
	(*DeleteFlowRequest)(nil),                    // 24: flow.DeleteFlowRequest
	(*DeleteFlowResponse)(nil),                   // 25: flow.DeleteFlowResponse
	(*timestamppb.Timestamp)(nil),                // 26: google.protobuf.Timestamp
	(TaskType)(0),                                // 27: task.TaskType
	(*StargateBridgeTask)(nil),                   // 28: task.StargateBridgeTask
	(*MockTask)(nil),                             // 29: task.MockTask
	(*DelayTask)(nil),                            // 30: task.DelayTask
	(*WithdrawExchangeTask)(nil),                 // 31: task.WithdrawExchangeTask
	(*OkexDepositTask)(nil),                      // 32: task.OkexDepositTask
	(*TestNetBridgeSwapTask)(nil),                // 33: task.TestNetBridgeSwapTask
	(*SnapshotVoteTask)(nil),                     // 34: task.SnapshotVoteTask
	(*OkexBinanaceTask)(nil),                     // 35: task.OkexBinanaceTask
	(*Swap1InchTask)(nil),                        // 36: task.Swap1inchTask
	(*DefaultSwap)(nil),                          // 37: task.DefaultSwap
	(*ZkSyncOfficialBridgeToEthereumTask)(nil),   // 38: task.ZkSyncOfficialBridgeToEthereumTask
	(*OrbiterBridgeTask)(nil),                    // 39: task.OrbiterBridgeTask
	(*ZkSyncOfficialBridgeFromEthereumTask)(nil), // 40: task.ZkSyncOfficialBridgeFromEthereumTask
	(*WETHTask)(nil),                             // 41: task.WETHTask
	(*DefaultLP)(nil),                            // 42: task.DefaultLP
	(*MerklyMintAndBridgeNFTTask)(nil),           // 43: task.MerklyMintAndBridgeNFTTask
	(*DeployStarkNetAccountTask)(nil),            // 44: task.DeployStarkNetAccountTask
	(*LiquidityBridgeTask)(nil),                  // 45: task.LiquidityBridgeTask
	(*SimpleTask)(nil),                           // 46: task.SimpleTask
	(*DefaultBridge)(nil),                        // 47: task.DefaultBridge
	(*ExchangeSwapTask)(nil),                     // 48: task.ExchangeSwapTask
}
var file_v1_flow_proto_depIdxs = []int32{
	26, // 0: flow.FlowShared.created_at:type_name -> google.protobuf.Timestamp
	26, // 1: flow.FlowShared.deleted_at:type_name -> google.protobuf.Timestamp
	17, // 2: flow.FlowShared.tasks:type_name -> flow.Task
	0,  // 3: flow.SharedFlowRes.flow:type_name -> flow.FlowShared
	0,  // 4: flow.SharedFlowsRes.items:type_name -> flow.FlowShared
	15, // 5: flow.GetFlowResponse.flow:type_name -> flow.Flow
	17, // 6: flow.Flow.tasks:type_name -> flow.Task
	26, // 7: flow.Flow.created_at:type_name -> google.protobuf.Timestamp
	26, // 8: flow.Flow.deleted_at:type_name -> google.protobuf.Timestamp
	27, // 9: flow.Task.taskType:type_name -> task.TaskType
	28, // 10: flow.Task.stargateBridgeTask:type_name -> task.StargateBridgeTask
	29, // 11: flow.Task.mock_task:type_name -> task.MockTask
	30, // 12: flow.Task.delay_task:type_name -> task.DelayTask
	31, // 13: flow.Task.withdrawExchangeTask:type_name -> task.WithdrawExchangeTask
	32, // 14: flow.Task.okexDepositTask:type_name -> task.OkexDepositTask
	33, // 15: flow.Task.testNetBridgeSwapTask:type_name -> task.TestNetBridgeSwapTask
	34, // 16: flow.Task.snapshotVoteTask:type_name -> task.SnapshotVoteTask
	35, // 17: flow.Task.okexBinanaceTask:type_name -> task.OkexBinanaceTask
	36, // 18: flow.Task.swap1inchTask:type_name -> task.Swap1inchTask
	37, // 19: flow.Task.syncSwapTask:type_name -> task.DefaultSwap
	38, // 20: flow.Task.zkSyncOfficialBridgeToEthereumTask:type_name -> task.ZkSyncOfficialBridgeToEthereumTask
	39, // 21: flow.Task.orbiterBridgeTask:type_name -> task.OrbiterBridgeTask
	40, // 22: flow.Task.zkSyncOfficialBridgeFromEthereumTask:type_name -> task.ZkSyncOfficialBridgeFromEthereumTask
	41, // 23: flow.Task.wETHTask:type_name -> task.WETHTask
	37, // 24: flow.Task.muteioSwapTask:type_name -> task.DefaultSwap
	42, // 25: flow.Task.syncSwapLPTask:type_name -> task.DefaultLP
	37, // 26: flow.Task.maverickSwapTask:type_name -> task.DefaultSwap
	37, // 27: flow.Task.spaceFiSwapTask:type_name -> task.DefaultSwap
	37, // 28: flow.Task.velocoreSwapTask:type_name -> task.DefaultSwap
	37, // 29: flow.Task.izumiSwapTask:type_name -> task.DefaultSwap
	37, // 30: flow.Task.veSyncSwapTask:type_name -> task.DefaultSwap
	37, // 31: flow.Task.ezkaliburSwapTask:type_name -> task.DefaultSwap
	37, // 32: flow.Task.zkSwapTask:type_name -> task.DefaultSwap
	37, // 33: flow.Task.traderJoeSwapTask:type_name -> task.DefaultSwap
	43, // 34: flow.Task.merklyMintAndBridgeNFTTask:type_name -> task.MerklyMintAndBridgeNFTTask
	44, // 35: flow.Task.deployStarkNetAccountTask:type_name -> task.DeployStarkNetAccountTask
	37, // 36: flow.Task.swap10k:type_name -> task.DefaultSwap
	37, // 37: flow.Task.pancakeSwapTask:type_name -> task.DefaultSwap
	37, // 38: flow.Task.sithSwapTask:type_name -> task.DefaultSwap
	37, // 39: flow.Task.jediSwapTask:type_name -> task.DefaultSwap
	37, // 40: flow.Task.mySwapTask:type_name -> task.DefaultSwap
	37, // 41: flow.Task.protosSwapTask:type_name -> task.DefaultSwap
	45, // 42: flow.Task.starkNetBridgeTask:type_name -> task.LiquidityBridgeTask
	46, // 43: flow.Task.dmailTask:type_name -> task.SimpleTask
	46, // 44: flow.Task.starkNetIdMintTask:type_name -> task.SimpleTask
	37, // 45: flow.Task.odosSwapTask:type_name -> task.DefaultSwap
	47, // 46: flow.Task.acrossBridgeTask:type_name -> task.DefaultBridge
	37, // 47: flow.Task.avnuSwapTask:type_name -> task.DefaultSwap
	37, // 48: flow.Task.fibrousSwapTask:type_name -> task.DefaultSwap
	48, // 49: flow.Task.exchangeSwapTask:type_name -> task.ExchangeSwapTask
	42, // 50: flow.Task.zkLendLPTask:type_name -> task.DefaultLP
	17, // 51: flow.CreateFlowRequest.tasks:type_name -> flow.Task
	15, // 52: flow.UpdateFlowRequest.flow:type_name -> flow.Flow
	15, // 53: flow.UpdateFlowResponse.flow:type_name -> flow.Flow
	15, // 54: flow.CreateFlowResponse.flow:type_name -> flow.Flow
	15, // 55: flow.ListFlowResponse.flows:type_name -> flow.Flow
	19, // 56: flow.FlowService.UpdateFlow:input_type -> flow.UpdateFlowRequest
	18, // 57: flow.FlowService.CreateFlow:input_type -> flow.CreateFlowRequest
	13, // 58: flow.FlowService.GetFlow:input_type -> flow.GetFlowRequest
	22, // 59: flow.FlowService.ListFlow:input_type -> flow.ListFlowRequest
	24, // 60: flow.FlowService.DeleteFlow:input_type -> flow.DeleteFlowRequest
	11, // 61: flow.FlowService.CopyFlow:input_type -> flow.CopyFlowReq
	7,  // 62: flow.FlowService.ShareFlow:input_type -> flow.ShareFlowReq
	9,  // 63: flow.FlowService.HideFlow:input_type -> flow.HideFlowReq
	5,  // 64: flow.FlowService.SharedFlows:input_type -> flow.SharedFlowsReq
	4,  // 65: flow.FlowService.SharedFlow:input_type -> flow.SharedFlowReq
	1,  // 66: flow.FlowService.UseSharedFlow:input_type -> flow.UseSharedFlowReq
	20, // 67: flow.FlowService.UpdateFlow:output_type -> flow.UpdateFlowResponse
	21, // 68: flow.FlowService.CreateFlow:output_type -> flow.CreateFlowResponse
	14, // 69: flow.FlowService.GetFlow:output_type -> flow.GetFlowResponse
	23, // 70: flow.FlowService.ListFlow:output_type -> flow.ListFlowResponse
	25, // 71: flow.FlowService.DeleteFlow:output_type -> flow.DeleteFlowResponse
	12, // 72: flow.FlowService.CopyFlow:output_type -> flow.CopyFlowRes
	8,  // 73: flow.FlowService.ShareFlow:output_type -> flow.ShareFlowRes
	10, // 74: flow.FlowService.HideFlow:output_type -> flow.HideFlowRes
	6,  // 75: flow.FlowService.SharedFlows:output_type -> flow.SharedFlowsRes
	3,  // 76: flow.FlowService.SharedFlow:output_type -> flow.SharedFlowRes
	2,  // 77: flow.FlowService.UseSharedFlow:output_type -> flow.UseSharedFlowRes
	67, // [67:78] is the sub-list for method output_type
	56, // [56:67] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_v1_flow_proto_init() }
func file_v1_flow_proto_init() {
	if File_v1_flow_proto != nil {
		return
	}
	file_v1_shared_proto_init()
	file_v1_task_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_flow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowShared); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseSharedFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseSharedFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFlowsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFlowsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletByWalletMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flow_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_flow_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_v1_flow_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_v1_flow_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Task_StargateBridgeTask)(nil),
		(*Task_MockTask)(nil),
		(*Task_DelayTask)(nil),
		(*Task_WithdrawExchangeTask)(nil),
		(*Task_OkexDepositTask)(nil),
		(*Task_TestNetBridgeSwapTask)(nil),
		(*Task_SnapshotVoteTask)(nil),
		(*Task_OkexBinanaceTask)(nil),
		(*Task_Swap1InchTask)(nil),
		(*Task_SyncSwapTask)(nil),
		(*Task_ZkSyncOfficialBridgeToEthereumTask)(nil),
		(*Task_OrbiterBridgeTask)(nil),
		(*Task_ZkSyncOfficialBridgeFromEthereumTask)(nil),
		(*Task_WETHTask)(nil),
		(*Task_MuteioSwapTask)(nil),
		(*Task_SyncSwapLPTask)(nil),
		(*Task_MaverickSwapTask)(nil),
		(*Task_SpaceFiSwapTask)(nil),
		(*Task_VelocoreSwapTask)(nil),
		(*Task_IzumiSwapTask)(nil),
		(*Task_VeSyncSwapTask)(nil),
		(*Task_EzkaliburSwapTask)(nil),
		(*Task_ZkSwapTask)(nil),
		(*Task_TraderJoeSwapTask)(nil),
		(*Task_MerklyMintAndBridgeNFTTask)(nil),
		(*Task_DeployStarkNetAccountTask)(nil),
		(*Task_Swap10K)(nil),
		(*Task_PancakeSwapTask)(nil),
		(*Task_SithSwapTask)(nil),
		(*Task_JediSwapTask)(nil),
		(*Task_MySwapTask)(nil),
		(*Task_ProtosSwapTask)(nil),
		(*Task_StarkNetBridgeTask)(nil),
		(*Task_DmailTask)(nil),
		(*Task_StarkNetIdMintTask)(nil),
		(*Task_OdosSwapTask)(nil),
		(*Task_AcrossBridgeTask)(nil),
		(*Task_AvnuSwapTask)(nil),
		(*Task_FibrousSwapTask)(nil),
		(*Task_ExchangeSwapTask)(nil),
		(*Task_ZkLendLPTask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_flow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_flow_proto_goTypes,
		DependencyIndexes: file_v1_flow_proto_depIdxs,
		MessageInfos:      file_v1_flow_proto_msgTypes,
	}.Build()
	File_v1_flow_proto = out.File
	file_v1_flow_proto_rawDesc = nil
	file_v1_flow_proto_goTypes = nil
	file_v1_flow_proto_depIdxs = nil
}

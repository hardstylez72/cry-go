// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: v1/task.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskType int32

const (
	TaskType_StargateBridge                   TaskType = 0
	TaskType_Mock                             TaskType = 1
	TaskType_Delay                            TaskType = 2
	TaskType_WithdrawExchange                 TaskType = 3
	TaskType_OkexDeposit                      TaskType = 4
	TaskType_TestNetBridgeSwap                TaskType = 5
	TaskType_SnapshotVote                     TaskType = 6
	TaskType_OkexBinance                      TaskType = 7 //deprecated
	TaskType_Swap1inch                        TaskType = 8
	TaskType_SyncSwap                         TaskType = 9
	TaskType_ZkSyncOfficialBridgeToEthereum   TaskType = 10
	TaskType_OrbiterBridge                    TaskType = 11
	TaskType_ZkSyncOfficialBridgeFromEthereum TaskType = 12
	TaskType_WETH                             TaskType = 13
	TaskType_MuteioSwap                       TaskType = 14
	TaskType_SyncSwapLP                       TaskType = 15
	TaskType_MaverickSwap                     TaskType = 16
	TaskType_SpaceFISwap                      TaskType = 17
	TaskType_VelocoreSwap                     TaskType = 18
	TaskType_IzumiSwap                        TaskType = 19
	TaskType_VeSyncSwap                       TaskType = 20
	TaskType_EzkaliburSwap                    TaskType = 21
	TaskType_ZkSwap                           TaskType = 22
	TaskType_TraderJoeSwap                    TaskType = 23
	TaskType_MerklyMintAndBridgeNFT           TaskType = 24
	TaskType_DeployStarkNetAccount            TaskType = 25
	TaskType_Swap10k                          TaskType = 26
	TaskType_PancakeSwap                      TaskType = 27
	TaskType_SithSwap                         TaskType = 28
	TaskType_JediSwap                         TaskType = 29
	TaskType_MySwap                           TaskType = 30
	TaskType_ProtossSwap                      TaskType = 31
	TaskType_StarkNetBridge                   TaskType = 32
	TaskType_Dmail                            TaskType = 33
	TaskType_StarkNetIdMint                   TaskType = 34
	TaskType_OdosSwap                         TaskType = 35
	TaskType_AcrossBridge                     TaskType = 36
	TaskType_AvnuSwap                         TaskType = 37
	TaskType_FibrousSwap                      TaskType = 38
	TaskType_ExchangeSwap                     TaskType = 39
	TaskType_ZkLendLP                         TaskType = 40
	TaskType_WoofiSwap                        TaskType = 41
	TaskType_AaveLP                           TaskType = 42
	TaskType_MintFun                          TaskType = 43
	TaskType_MintMerkly                       TaskType = 44
	TaskType_MintZerius                       TaskType = 45
	TaskType_KyberSwap                        TaskType = 46
	TaskType_EkuboSwap                        TaskType = 47
	TaskType_NostraLP                         TaskType = 48
	TaskType_CoreDaoBridge                    TaskType = 49
	TaskType_StakeSTG                         TaskType = 50
	TaskType_MerklyRefuel                     TaskType = 51
	TaskType_L2PassRefuel                     TaskType = 52
	TaskType_StarknetClaim                    TaskType = 53
	TaskType_EraLend                          TaskType = 54
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0:  "StargateBridge",
		1:  "Mock",
		2:  "Delay",
		3:  "WithdrawExchange",
		4:  "OkexDeposit",
		5:  "TestNetBridgeSwap",
		6:  "SnapshotVote",
		7:  "OkexBinance",
		8:  "Swap1inch",
		9:  "SyncSwap",
		10: "ZkSyncOfficialBridgeToEthereum",
		11: "OrbiterBridge",
		12: "ZkSyncOfficialBridgeFromEthereum",
		13: "WETH",
		14: "MuteioSwap",
		15: "SyncSwapLP",
		16: "MaverickSwap",
		17: "SpaceFISwap",
		18: "VelocoreSwap",
		19: "IzumiSwap",
		20: "VeSyncSwap",
		21: "EzkaliburSwap",
		22: "ZkSwap",
		23: "TraderJoeSwap",
		24: "MerklyMintAndBridgeNFT",
		25: "DeployStarkNetAccount",
		26: "Swap10k",
		27: "PancakeSwap",
		28: "SithSwap",
		29: "JediSwap",
		30: "MySwap",
		31: "ProtossSwap",
		32: "StarkNetBridge",
		33: "Dmail",
		34: "StarkNetIdMint",
		35: "OdosSwap",
		36: "AcrossBridge",
		37: "AvnuSwap",
		38: "FibrousSwap",
		39: "ExchangeSwap",
		40: "ZkLendLP",
		41: "WoofiSwap",
		42: "AaveLP",
		43: "MintFun",
		44: "MintMerkly",
		45: "MintZerius",
		46: "KyberSwap",
		47: "EkuboSwap",
		48: "NostraLP",
		49: "CoreDaoBridge",
		50: "StakeSTG",
		51: "MerklyRefuel",
		52: "L2PassRefuel",
		53: "StarknetClaim",
		54: "EraLend",
	}
	TaskType_value = map[string]int32{
		"StargateBridge":                   0,
		"Mock":                             1,
		"Delay":                            2,
		"WithdrawExchange":                 3,
		"OkexDeposit":                      4,
		"TestNetBridgeSwap":                5,
		"SnapshotVote":                     6,
		"OkexBinance":                      7,
		"Swap1inch":                        8,
		"SyncSwap":                         9,
		"ZkSyncOfficialBridgeToEthereum":   10,
		"OrbiterBridge":                    11,
		"ZkSyncOfficialBridgeFromEthereum": 12,
		"WETH":                             13,
		"MuteioSwap":                       14,
		"SyncSwapLP":                       15,
		"MaverickSwap":                     16,
		"SpaceFISwap":                      17,
		"VelocoreSwap":                     18,
		"IzumiSwap":                        19,
		"VeSyncSwap":                       20,
		"EzkaliburSwap":                    21,
		"ZkSwap":                           22,
		"TraderJoeSwap":                    23,
		"MerklyMintAndBridgeNFT":           24,
		"DeployStarkNetAccount":            25,
		"Swap10k":                          26,
		"PancakeSwap":                      27,
		"SithSwap":                         28,
		"JediSwap":                         29,
		"MySwap":                           30,
		"ProtossSwap":                      31,
		"StarkNetBridge":                   32,
		"Dmail":                            33,
		"StarkNetIdMint":                   34,
		"OdosSwap":                         35,
		"AcrossBridge":                     36,
		"AvnuSwap":                         37,
		"FibrousSwap":                      38,
		"ExchangeSwap":                     39,
		"ZkLendLP":                         40,
		"WoofiSwap":                        41,
		"AaveLP":                           42,
		"MintFun":                          43,
		"MintMerkly":                       44,
		"MintZerius":                       45,
		"KyberSwap":                        46,
		"EkuboSwap":                        47,
		"NostraLP":                         48,
		"CoreDaoBridge":                    49,
		"StakeSTG":                         50,
		"MerklyRefuel":                     51,
		"L2PassRefuel":                     52,
		"StarknetClaim":                    53,
		"EraLend":                          54,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_task_proto_enumTypes[0].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_v1_task_proto_enumTypes[0]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{0}
}

type DefaultBridge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromNetwork Network `protobuf:"varint,1,opt,name=fromNetwork,proto3,enum=shared.Network" json:"fromNetwork,omitempty"`
	ToNetwork   Network `protobuf:"varint,2,opt,name=toNetwork,proto3,enum=shared.Network" json:"toNetwork,omitempty"`
	FromToken   Token   `protobuf:"varint,3,opt,name=fromToken,proto3,enum=shared.Token" json:"fromToken,omitempty"`
	ToToken     Token   `protobuf:"varint,4,opt,name=toToken,proto3,enum=shared.Token" json:"toToken,omitempty"`
	Amount      *Amount `protobuf:"bytes,5,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	ApproveTx   *TaskTx `protobuf:"bytes,6,opt,name=approveTx,proto3,oneof" json:"approveTx,omitempty"`
	Tx          *TaskTx `protobuf:"bytes,7,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
	Received    bool    `protobuf:"varint,8,opt,name=received,proto3" json:"received,omitempty"`
}

func (x *DefaultBridge) Reset() {
	*x = DefaultBridge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultBridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultBridge) ProtoMessage() {}

func (x *DefaultBridge) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultBridge.ProtoReflect.Descriptor instead.
func (*DefaultBridge) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{0}
}

func (x *DefaultBridge) GetFromNetwork() Network {
	if x != nil {
		return x.FromNetwork
	}
	return Network_ARBITRUM
}

func (x *DefaultBridge) GetToNetwork() Network {
	if x != nil {
		return x.ToNetwork
	}
	return Network_ARBITRUM
}

func (x *DefaultBridge) GetFromToken() Token {
	if x != nil {
		return x.FromToken
	}
	return Token_USDT
}

func (x *DefaultBridge) GetToToken() Token {
	if x != nil {
		return x.ToToken
	}
	return Token_USDT
}

func (x *DefaultBridge) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *DefaultBridge) GetApproveTx() *TaskTx {
	if x != nil {
		return x.ApproveTx
	}
	return nil
}

func (x *DefaultBridge) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *DefaultBridge) GetReceived() bool {
	if x != nil {
		return x.Received
	}
	return false
}

type TxDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TxDetail) Reset() {
	*x = TxDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDetail) ProtoMessage() {}

func (x *TxDetail) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDetail.ProtoReflect.Descriptor instead.
func (*TxDetail) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{1}
}

func (x *TxDetail) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TxDetail) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LPToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     Token   `protobuf:"varint,1,opt,name=token,proto3,enum=shared.Token" json:"token,omitempty"`
	ApproveTx *TaskTx `protobuf:"bytes,2,opt,name=approveTx,proto3,oneof" json:"approveTx,omitempty"`
}

func (x *LPToken) Reset() {
	*x = LPToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LPToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPToken) ProtoMessage() {}

func (x *LPToken) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPToken.ProtoReflect.Descriptor instead.
func (*LPToken) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{2}
}

func (x *LPToken) GetToken() Token {
	if x != nil {
		return x.Token
	}
	return Token_USDT
}

func (x *LPToken) GetApproveTx() *TaskTx {
	if x != nil {
		return x.ApproveTx
	}
	return nil
}

type LiquidityBridgeTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount      *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	FromNetwork Network `protobuf:"varint,2,opt,name=from_network,json=fromNetwork,proto3,enum=shared.Network" json:"from_network,omitempty"`
	ToNetwork   Network `protobuf:"varint,3,opt,name=to_network,json=toNetwork,proto3,enum=shared.Network" json:"to_network,omitempty"`
	Token       Token   `protobuf:"varint,4,opt,name=token,proto3,enum=shared.Token" json:"token,omitempty"`
	Tx          *TaskTx `protobuf:"bytes,6,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
	ApproveTx   *TaskTx `protobuf:"bytes,7,opt,name=approveTx,proto3,oneof" json:"approveTx,omitempty"`
}

func (x *LiquidityBridgeTask) Reset() {
	*x = LiquidityBridgeTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityBridgeTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityBridgeTask) ProtoMessage() {}

func (x *LiquidityBridgeTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityBridgeTask.ProtoReflect.Descriptor instead.
func (*LiquidityBridgeTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{3}
}

func (x *LiquidityBridgeTask) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *LiquidityBridgeTask) GetFromNetwork() Network {
	if x != nil {
		return x.FromNetwork
	}
	return Network_ARBITRUM
}

func (x *LiquidityBridgeTask) GetToNetwork() Network {
	if x != nil {
		return x.ToNetwork
	}
	return Network_ARBITRUM
}

func (x *LiquidityBridgeTask) GetToken() Token {
	if x != nil {
		return x.Token
	}
	return Token_USDT
}

func (x *LiquidityBridgeTask) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *LiquidityBridgeTask) GetApproveTx() *TaskTx {
	if x != nil {
		return x.ApproveTx
	}
	return nil
}

type SimpleTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network   Network `protobuf:"varint,1,opt,name=network,proto3,enum=shared.Network" json:"network,omitempty"`
	Tx        *TaskTx `protobuf:"bytes,2,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
	ApproveTx *TaskTx `protobuf:"bytes,3,opt,name=approveTx,proto3,oneof" json:"approveTx,omitempty"`
}

func (x *SimpleTask) Reset() {
	*x = SimpleTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTask) ProtoMessage() {}

func (x *SimpleTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTask.ProtoReflect.Descriptor instead.
func (*SimpleTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{4}
}

func (x *SimpleTask) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_ARBITRUM
}

func (x *SimpleTask) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SimpleTask) GetApproveTx() *TaskTx {
	if x != nil {
		return x.ApproveTx
	}
	return nil
}

type ExchangeSwapTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount        *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	FromToken     Token   `protobuf:"varint,3,opt,name=from_token,json=fromToken,proto3,enum=shared.Token" json:"from_token,omitempty"`
	ToToken       Token   `protobuf:"varint,4,opt,name=to_token,json=toToken,proto3,enum=shared.Token" json:"to_token,omitempty"`
	WithdrawerId  string  `protobuf:"bytes,6,opt,name=withdrawer_id,json=withdrawerId,proto3" json:"withdrawer_id,omitempty"`
	TradeId       *string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3,oneof" json:"trade_id,omitempty"`
	Pair          *string `protobuf:"bytes,7,opt,name=pair,proto3,oneof" json:"pair,omitempty"`
	Before        *bool   `protobuf:"varint,8,opt,name=before,proto3,oneof" json:"before,omitempty"`
	After         *bool   `protobuf:"varint,9,opt,name=after,proto3,oneof" json:"after,omitempty"`
	SwapCompleted *bool   `protobuf:"varint,10,opt,name=swap_completed,json=swapCompleted,proto3,oneof" json:"swap_completed,omitempty"`
}

func (x *ExchangeSwapTask) Reset() {
	*x = ExchangeSwapTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSwapTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSwapTask) ProtoMessage() {}

func (x *ExchangeSwapTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSwapTask.ProtoReflect.Descriptor instead.
func (*ExchangeSwapTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{5}
}

func (x *ExchangeSwapTask) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ExchangeSwapTask) GetFromToken() Token {
	if x != nil {
		return x.FromToken
	}
	return Token_USDT
}

func (x *ExchangeSwapTask) GetToToken() Token {
	if x != nil {
		return x.ToToken
	}
	return Token_USDT
}

func (x *ExchangeSwapTask) GetWithdrawerId() string {
	if x != nil {
		return x.WithdrawerId
	}
	return ""
}

func (x *ExchangeSwapTask) GetTradeId() string {
	if x != nil && x.TradeId != nil {
		return *x.TradeId
	}
	return ""
}

func (x *ExchangeSwapTask) GetPair() string {
	if x != nil && x.Pair != nil {
		return *x.Pair
	}
	return ""
}

func (x *ExchangeSwapTask) GetBefore() bool {
	if x != nil && x.Before != nil {
		return *x.Before
	}
	return false
}

func (x *ExchangeSwapTask) GetAfter() bool {
	if x != nil && x.After != nil {
		return *x.After
	}
	return false
}

func (x *ExchangeSwapTask) GetSwapCompleted() bool {
	if x != nil && x.SwapCompleted != nil {
		return *x.SwapCompleted
	}
	return false
}

type DefaultSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount    *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Network   Network `protobuf:"varint,2,opt,name=network,proto3,enum=shared.Network" json:"network,omitempty"`
	FromToken Token   `protobuf:"varint,3,opt,name=from_token,json=fromToken,proto3,enum=shared.Token" json:"from_token,omitempty"`
	ToToken   Token   `protobuf:"varint,4,opt,name=to_token,json=toToken,proto3,enum=shared.Token" json:"to_token,omitempty"`
	Tx        *TaskTx `protobuf:"bytes,5,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
	ApproveTx *TaskTx `protobuf:"bytes,6,opt,name=approveTx,proto3,oneof" json:"approveTx,omitempty"`
}

func (x *DefaultSwap) Reset() {
	*x = DefaultSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultSwap) ProtoMessage() {}

func (x *DefaultSwap) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultSwap.ProtoReflect.Descriptor instead.
func (*DefaultSwap) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{6}
}

func (x *DefaultSwap) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *DefaultSwap) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_ARBITRUM
}

func (x *DefaultSwap) GetFromToken() Token {
	if x != nil {
		return x.FromToken
	}
	return Token_USDT
}

func (x *DefaultSwap) GetToToken() Token {
	if x != nil {
		return x.ToToken
	}
	return Token_USDT
}

func (x *DefaultSwap) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *DefaultSwap) GetApproveTx() *TaskTx {
	if x != nil {
		return x.ApproveTx
	}
	return nil
}

type TaskTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxCompleted  bool        `protobuf:"varint,1,opt,name=tx_completed,json=txCompleted,proto3" json:"tx_completed,omitempty"`
	TxId         string      `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	RetryCount   int64       `protobuf:"varint,3,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	Url          *string     `protobuf:"bytes,4,opt,name=url,proto3,oneof" json:"url,omitempty"`                                       //mandatory
	Network      *Network    `protobuf:"varint,5,opt,name=network,proto3,enum=shared.Network,oneof" json:"network,omitempty"`          //mandatory
	Code         *string     `protobuf:"bytes,6,opt,name=code,proto3,oneof" json:"code,omitempty"`                                     //mandatory
	GasEstimated *AmUni      `protobuf:"bytes,7,opt,name=gas_estimated,json=gasEstimated,proto3,oneof" json:"gas_estimated,omitempty"` //deprecated
	GasResult    *AmUni      `protobuf:"bytes,8,opt,name=gas_result,json=gasResult,proto3,oneof" json:"gas_result,omitempty"`          //deprecated
	GasLimit     *AmUni      `protobuf:"bytes,9,opt,name=gas_limit,json=gasLimit,proto3,oneof" json:"gas_limit,omitempty"`             //deprecated
	Multiplier   *float32    `protobuf:"fixed32,10,opt,name=multiplier,proto3,oneof" json:"multiplier,omitempty"`
	Details      []*TxDetail `protobuf:"bytes,11,rep,name=details,proto3" json:"details,omitempty"`
	Ts           int64       `protobuf:"varint,12,opt,name=ts,proto3" json:"ts,omitempty"`
	CompleteTs   int64       `protobuf:"varint,13,opt,name=complete_ts,json=completeTs,proto3" json:"complete_ts,omitempty"`
}

func (x *TaskTx) Reset() {
	*x = TaskTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTx) ProtoMessage() {}

func (x *TaskTx) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTx.ProtoReflect.Descriptor instead.
func (*TaskTx) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{7}
}

func (x *TaskTx) GetTxCompleted() bool {
	if x != nil {
		return x.TxCompleted
	}
	return false
}

func (x *TaskTx) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TaskTx) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *TaskTx) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *TaskTx) GetNetwork() Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return Network_ARBITRUM
}

func (x *TaskTx) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *TaskTx) GetGasEstimated() *AmUni {
	if x != nil {
		return x.GasEstimated
	}
	return nil
}

func (x *TaskTx) GetGasResult() *AmUni {
	if x != nil {
		return x.GasResult
	}
	return nil
}

func (x *TaskTx) GetGasLimit() *AmUni {
	if x != nil {
		return x.GasLimit
	}
	return nil
}

func (x *TaskTx) GetMultiplier() float32 {
	if x != nil && x.Multiplier != nil {
		return *x.Multiplier
	}
	return 0
}

func (x *TaskTx) GetDetails() []*TxDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TaskTx) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *TaskTx) GetCompleteTs() int64 {
	if x != nil {
		return x.CompleteTs
	}
	return 0
}

type MerklyMintAndBridgeNFTTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromNetwork Network `protobuf:"varint,1,opt,name=from_network,json=fromNetwork,proto3,enum=shared.Network" json:"from_network,omitempty"`
	ToNetwork   Network `protobuf:"varint,2,opt,name=to_network,json=toNetwork,proto3,enum=shared.Network" json:"to_network,omitempty"`
	MintTx      *TaskTx `protobuf:"bytes,3,opt,name=mint_tx,json=mintTx,proto3,oneof" json:"mint_tx,omitempty"`
	BridgeTx    *TaskTx `protobuf:"bytes,4,opt,name=bridge_tx,json=bridgeTx,proto3,oneof" json:"bridge_tx,omitempty"`
	NftId       *string `protobuf:"bytes,5,opt,name=nft_id,json=nftId,proto3,oneof" json:"nft_id,omitempty"`
	Fee         *string `protobuf:"bytes,6,opt,name=fee,proto3,oneof" json:"fee,omitempty"` //deprecated
}

func (x *MerklyMintAndBridgeNFTTask) Reset() {
	*x = MerklyMintAndBridgeNFTTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklyMintAndBridgeNFTTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklyMintAndBridgeNFTTask) ProtoMessage() {}

func (x *MerklyMintAndBridgeNFTTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklyMintAndBridgeNFTTask.ProtoReflect.Descriptor instead.
func (*MerklyMintAndBridgeNFTTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{8}
}

func (x *MerklyMintAndBridgeNFTTask) GetFromNetwork() Network {
	if x != nil {
		return x.FromNetwork
	}
	return Network_ARBITRUM
}

func (x *MerklyMintAndBridgeNFTTask) GetToNetwork() Network {
	if x != nil {
		return x.ToNetwork
	}
	return Network_ARBITRUM
}

func (x *MerklyMintAndBridgeNFTTask) GetMintTx() *TaskTx {
	if x != nil {
		return x.MintTx
	}
	return nil
}

func (x *MerklyMintAndBridgeNFTTask) GetBridgeTx() *TaskTx {
	if x != nil {
		return x.BridgeTx
	}
	return nil
}

func (x *MerklyMintAndBridgeNFTTask) GetNftId() string {
	if x != nil && x.NftId != nil {
		return *x.NftId
	}
	return ""
}

func (x *MerklyMintAndBridgeNFTTask) GetFee() string {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return ""
}

type DeployStarkNetAccountTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network Network `protobuf:"varint,1,opt,name=network,proto3,enum=shared.Network" json:"network,omitempty"`
	Tx      *TaskTx `protobuf:"bytes,2,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
}

func (x *DeployStarkNetAccountTask) Reset() {
	*x = DeployStarkNetAccountTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployStarkNetAccountTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployStarkNetAccountTask) ProtoMessage() {}

func (x *DeployStarkNetAccountTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployStarkNetAccountTask.ProtoReflect.Descriptor instead.
func (*DeployStarkNetAccountTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{9}
}

func (x *DeployStarkNetAccountTask) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_ARBITRUM
}

func (x *DeployStarkNetAccountTask) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

type DefaultLP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount   *Amount    `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Network  Network    `protobuf:"varint,2,opt,name=network,proto3,enum=shared.Network" json:"network,omitempty"`
	A        Token      `protobuf:"varint,3,opt,name=a,proto3,enum=shared.Token" json:"a,omitempty"` //deprecated
	B        Token      `protobuf:"varint,4,opt,name=b,proto3,enum=shared.Token" json:"b,omitempty"` //deprecated
	Tx       *TaskTx    `protobuf:"bytes,5,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
	Add      bool       `protobuf:"varint,6,opt,name=add,proto3" json:"add,omitempty"`
	ApproveA *TaskTx    `protobuf:"bytes,7,opt,name=approveA,proto3,oneof" json:"approveA,omitempty"` //deprecated
	ApproveB *TaskTx    `protobuf:"bytes,8,opt,name=approveB,proto3,oneof" json:"approveB,omitempty"` //deprecated
	Tokens   []*LPToken `protobuf:"bytes,9,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *DefaultLP) Reset() {
	*x = DefaultLP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultLP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultLP) ProtoMessage() {}

func (x *DefaultLP) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultLP.ProtoReflect.Descriptor instead.
func (*DefaultLP) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{10}
}

func (x *DefaultLP) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *DefaultLP) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_ARBITRUM
}

func (x *DefaultLP) GetA() Token {
	if x != nil {
		return x.A
	}
	return Token_USDT
}

func (x *DefaultLP) GetB() Token {
	if x != nil {
		return x.B
	}
	return Token_USDT
}

func (x *DefaultLP) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *DefaultLP) GetAdd() bool {
	if x != nil {
		return x.Add
	}
	return false
}

func (x *DefaultLP) GetApproveA() *TaskTx {
	if x != nil {
		return x.ApproveA
	}
	return nil
}

func (x *DefaultLP) GetApproveB() *TaskTx {
	if x != nil {
		return x.ApproveB
	}
	return nil
}

func (x *DefaultLP) GetTokens() []*LPToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type WETHTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount  *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Network Network `protobuf:"varint,2,opt,name=network,proto3,enum=shared.Network" json:"network,omitempty"`
	Wrap    bool    `protobuf:"varint,3,opt,name=wrap,proto3" json:"wrap,omitempty"`
	Tx      *TaskTx `protobuf:"bytes,4,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
}

func (x *WETHTask) Reset() {
	*x = WETHTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WETHTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WETHTask) ProtoMessage() {}

func (x *WETHTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WETHTask.ProtoReflect.Descriptor instead.
func (*WETHTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{11}
}

func (x *WETHTask) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *WETHTask) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_ARBITRUM
}

func (x *WETHTask) GetWrap() bool {
	if x != nil {
		return x.Wrap
	}
	return false
}

func (x *WETHTask) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

type OrbiterBridgeTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount              *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	FromNetwork         Network `protobuf:"varint,2,opt,name=from_network,json=fromNetwork,proto3,enum=shared.Network" json:"from_network,omitempty"`
	ToNetwork           Network `protobuf:"varint,3,opt,name=to_network,json=toNetwork,proto3,enum=shared.Network" json:"to_network,omitempty"`
	FromToken           Token   `protobuf:"varint,4,opt,name=from_token,json=fromToken,proto3,enum=shared.Token" json:"from_token,omitempty"`
	ToToken             Token   `protobuf:"varint,5,opt,name=to_token,json=toToken,proto3,enum=shared.Token" json:"to_token,omitempty"`
	TxCompleted         *bool   `protobuf:"varint,6,opt,name=tx_completed,json=txCompleted,proto3,oneof" json:"tx_completed,omitempty"` //deprecated
	TxId                *string `protobuf:"bytes,7,opt,name=tx_id,json=txId,proto3,oneof" json:"tx_id,omitempty"`                       //deprecated
	OrbiterReceiverAddr *string `protobuf:"bytes,8,opt,name=orbiter_receiver_addr,json=orbiterReceiverAddr,proto3,oneof" json:"orbiter_receiver_addr,omitempty"`
	OrbiterSenderAddr   *string `protobuf:"bytes,9,opt,name=orbiter_sender_addr,json=orbiterSenderAddr,proto3,oneof" json:"orbiter_sender_addr,omitempty"`
	SwapCompleted       *bool   `protobuf:"varint,10,opt,name=swap_completed,json=swapCompleted,proto3,oneof" json:"swap_completed,omitempty"` //deprecated
	Tx                  *TaskTx `protobuf:"bytes,11,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
}

func (x *OrbiterBridgeTask) Reset() {
	*x = OrbiterBridgeTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrbiterBridgeTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrbiterBridgeTask) ProtoMessage() {}

func (x *OrbiterBridgeTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrbiterBridgeTask.ProtoReflect.Descriptor instead.
func (*OrbiterBridgeTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{12}
}

func (x *OrbiterBridgeTask) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *OrbiterBridgeTask) GetFromNetwork() Network {
	if x != nil {
		return x.FromNetwork
	}
	return Network_ARBITRUM
}

func (x *OrbiterBridgeTask) GetToNetwork() Network {
	if x != nil {
		return x.ToNetwork
	}
	return Network_ARBITRUM
}

func (x *OrbiterBridgeTask) GetFromToken() Token {
	if x != nil {
		return x.FromToken
	}
	return Token_USDT
}

func (x *OrbiterBridgeTask) GetToToken() Token {
	if x != nil {
		return x.ToToken
	}
	return Token_USDT
}

func (x *OrbiterBridgeTask) GetTxCompleted() bool {
	if x != nil && x.TxCompleted != nil {
		return *x.TxCompleted
	}
	return false
}

func (x *OrbiterBridgeTask) GetTxId() string {
	if x != nil && x.TxId != nil {
		return *x.TxId
	}
	return ""
}

func (x *OrbiterBridgeTask) GetOrbiterReceiverAddr() string {
	if x != nil && x.OrbiterReceiverAddr != nil {
		return *x.OrbiterReceiverAddr
	}
	return ""
}

func (x *OrbiterBridgeTask) GetOrbiterSenderAddr() string {
	if x != nil && x.OrbiterSenderAddr != nil {
		return *x.OrbiterSenderAddr
	}
	return ""
}

func (x *OrbiterBridgeTask) GetSwapCompleted() bool {
	if x != nil && x.SwapCompleted != nil {
		return *x.SwapCompleted
	}
	return false
}

func (x *OrbiterBridgeTask) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

type ZkSyncOfficialBridgeFromEthereumTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount      *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	TxCompleted *bool   `protobuf:"varint,4,opt,name=tx_completed,json=txCompleted,proto3,oneof" json:"tx_completed,omitempty"` //deprecated
	TxId        *string `protobuf:"bytes,5,opt,name=txId,proto3,oneof" json:"txId,omitempty"`                                   //deprecated
	Tx          *TaskTx `protobuf:"bytes,6,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
}

func (x *ZkSyncOfficialBridgeFromEthereumTask) Reset() {
	*x = ZkSyncOfficialBridgeFromEthereumTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSyncOfficialBridgeFromEthereumTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSyncOfficialBridgeFromEthereumTask) ProtoMessage() {}

func (x *ZkSyncOfficialBridgeFromEthereumTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSyncOfficialBridgeFromEthereumTask.ProtoReflect.Descriptor instead.
func (*ZkSyncOfficialBridgeFromEthereumTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{13}
}

func (x *ZkSyncOfficialBridgeFromEthereumTask) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ZkSyncOfficialBridgeFromEthereumTask) GetTxCompleted() bool {
	if x != nil && x.TxCompleted != nil {
		return *x.TxCompleted
	}
	return false
}

func (x *ZkSyncOfficialBridgeFromEthereumTask) GetTxId() string {
	if x != nil && x.TxId != nil {
		return *x.TxId
	}
	return ""
}

func (x *ZkSyncOfficialBridgeFromEthereumTask) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

type ZkSyncOfficialBridgeToEthereumTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount      *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Network     Network `protobuf:"varint,2,opt,name=network,proto3,enum=shared.Network" json:"network,omitempty"`
	AmountKind  string  `protobuf:"bytes,3,opt,name=amount_kind,json=amountKind,proto3" json:"amount_kind,omitempty"`           //deprecated
	TxCompleted *bool   `protobuf:"varint,4,opt,name=tx_completed,json=txCompleted,proto3,oneof" json:"tx_completed,omitempty"` //deprecated
	TxId        *string `protobuf:"bytes,5,opt,name=txId,proto3,oneof" json:"txId,omitempty"`                                   //deprecated
	Tx          *TaskTx `protobuf:"bytes,6,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
}

func (x *ZkSyncOfficialBridgeToEthereumTask) Reset() {
	*x = ZkSyncOfficialBridgeToEthereumTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSyncOfficialBridgeToEthereumTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSyncOfficialBridgeToEthereumTask) ProtoMessage() {}

func (x *ZkSyncOfficialBridgeToEthereumTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSyncOfficialBridgeToEthereumTask.ProtoReflect.Descriptor instead.
func (*ZkSyncOfficialBridgeToEthereumTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{14}
}

func (x *ZkSyncOfficialBridgeToEthereumTask) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ZkSyncOfficialBridgeToEthereumTask) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_ARBITRUM
}

func (x *ZkSyncOfficialBridgeToEthereumTask) GetAmountKind() string {
	if x != nil {
		return x.AmountKind
	}
	return ""
}

func (x *ZkSyncOfficialBridgeToEthereumTask) GetTxCompleted() bool {
	if x != nil && x.TxCompleted != nil {
		return *x.TxCompleted
	}
	return false
}

func (x *ZkSyncOfficialBridgeToEthereumTask) GetTxId() string {
	if x != nil && x.TxId != nil {
		return *x.TxId
	}
	return ""
}

func (x *ZkSyncOfficialBridgeToEthereumTask) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

type Swap1InchTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network       Network `protobuf:"varint,1,opt,name=network,proto3,enum=shared.Network" json:"network,omitempty"`
	FromTokenName string  `protobuf:"bytes,2,opt,name=from_token_name,json=fromTokenName,proto3" json:"from_token_name,omitempty"`
	FromTokenCode string  `protobuf:"bytes,3,opt,name=from_token_code,json=fromTokenCode,proto3" json:"from_token_code,omitempty"`
	FromTokenAddr string  `protobuf:"bytes,4,opt,name=from_token_addr,json=fromTokenAddr,proto3" json:"from_token_addr,omitempty"`
	ToTokenName   string  `protobuf:"bytes,5,opt,name=to_token_name,json=toTokenName,proto3" json:"to_token_name,omitempty"`
	ToTokenCode   string  `protobuf:"bytes,6,opt,name=to_token_code,json=toTokenCode,proto3" json:"to_token_code,omitempty"`
	ToTokenAddr   string  `protobuf:"bytes,7,opt,name=to_token_addr,json=toTokenAddr,proto3" json:"to_token_addr,omitempty"`
	// Types that are assignable to Amount:
	//
	//	*Swap1InchTask_SendAll
	//	*Swap1InchTask_SendPercent
	//	*Swap1InchTask_SendAmount
	Amount        isSwap1InchTask_Amount `protobuf_oneof:"amount"`
	TxId          *string                `protobuf:"bytes,11,opt,name=txId,proto3,oneof" json:"txId,omitempty"`
	TxCompleted   *bool                  `protobuf:"varint,12,opt,name=tx_completed,json=txCompleted,proto3,oneof" json:"tx_completed,omitempty"`
	SwapCompleted *bool                  `protobuf:"varint,13,opt,name=swap_completed,json=swapCompleted,proto3,oneof" json:"swap_completed,omitempty"`
}

func (x *Swap1InchTask) Reset() {
	*x = Swap1InchTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap1InchTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap1InchTask) ProtoMessage() {}

func (x *Swap1InchTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap1InchTask.ProtoReflect.Descriptor instead.
func (*Swap1InchTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{15}
}

func (x *Swap1InchTask) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_ARBITRUM
}

func (x *Swap1InchTask) GetFromTokenName() string {
	if x != nil {
		return x.FromTokenName
	}
	return ""
}

func (x *Swap1InchTask) GetFromTokenCode() string {
	if x != nil {
		return x.FromTokenCode
	}
	return ""
}

func (x *Swap1InchTask) GetFromTokenAddr() string {
	if x != nil {
		return x.FromTokenAddr
	}
	return ""
}

func (x *Swap1InchTask) GetToTokenName() string {
	if x != nil {
		return x.ToTokenName
	}
	return ""
}

func (x *Swap1InchTask) GetToTokenCode() string {
	if x != nil {
		return x.ToTokenCode
	}
	return ""
}

func (x *Swap1InchTask) GetToTokenAddr() string {
	if x != nil {
		return x.ToTokenAddr
	}
	return ""
}

func (m *Swap1InchTask) GetAmount() isSwap1InchTask_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *Swap1InchTask) GetSendAll() bool {
	if x, ok := x.GetAmount().(*Swap1InchTask_SendAll); ok {
		return x.SendAll
	}
	return false
}

func (x *Swap1InchTask) GetSendPercent() int64 {
	if x, ok := x.GetAmount().(*Swap1InchTask_SendPercent); ok {
		return x.SendPercent
	}
	return 0
}

func (x *Swap1InchTask) GetSendAmount() float32 {
	if x, ok := x.GetAmount().(*Swap1InchTask_SendAmount); ok {
		return x.SendAmount
	}
	return 0
}

func (x *Swap1InchTask) GetTxId() string {
	if x != nil && x.TxId != nil {
		return *x.TxId
	}
	return ""
}

func (x *Swap1InchTask) GetTxCompleted() bool {
	if x != nil && x.TxCompleted != nil {
		return *x.TxCompleted
	}
	return false
}

func (x *Swap1InchTask) GetSwapCompleted() bool {
	if x != nil && x.SwapCompleted != nil {
		return *x.SwapCompleted
	}
	return false
}

type isSwap1InchTask_Amount interface {
	isSwap1InchTask_Amount()
}

type Swap1InchTask_SendAll struct {
	SendAll bool `protobuf:"varint,8,opt,name=send_all,json=sendAll,proto3,oneof"`
}

type Swap1InchTask_SendPercent struct {
	SendPercent int64 `protobuf:"varint,9,opt,name=send_percent,json=sendPercent,proto3,oneof"`
}

type Swap1InchTask_SendAmount struct {
	SendAmount float32 `protobuf:"fixed32,10,opt,name=send_amount,json=sendAmount,proto3,oneof"`
}

func (*Swap1InchTask_SendAll) isSwap1InchTask_Amount() {}

func (*Swap1InchTask_SendPercent) isSwap1InchTask_Amount() {}

func (*Swap1InchTask_SendAmount) isSwap1InchTask_Amount() {}

type SnapshotVoteTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Space    string                           `protobuf:"bytes,1,opt,name=space,proto3" json:"space,omitempty"`
	Proposal map[string]*SnapshotVoteProposal `protobuf:"bytes,2,rep,name=proposal,proto3" json:"proposal,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SnapshotVoteTask) Reset() {
	*x = SnapshotVoteTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotVoteTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotVoteTask) ProtoMessage() {}

func (x *SnapshotVoteTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotVoteTask.ProtoReflect.Descriptor instead.
func (*SnapshotVoteTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{16}
}

func (x *SnapshotVoteTask) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *SnapshotVoteTask) GetProposal() map[string]*SnapshotVoteProposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

type SnapshotVoteProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     ProcessStatus `protobuf:"varint,1,opt,name=status,proto3,enum=shared.ProcessStatus" json:"status,omitempty"`
	Msg        string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Link       string        `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Id         string        `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Type       string        `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Symbol     string        `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	RetryCount int64         `protobuf:"varint,7,opt,name=retryCount,proto3" json:"retryCount,omitempty"`
}

func (x *SnapshotVoteProposal) Reset() {
	*x = SnapshotVoteProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotVoteProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotVoteProposal) ProtoMessage() {}

func (x *SnapshotVoteProposal) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotVoteProposal.ProtoReflect.Descriptor instead.
func (*SnapshotVoteProposal) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{17}
}

func (x *SnapshotVoteProposal) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_StatusReady
}

func (x *SnapshotVoteProposal) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SnapshotVoteProposal) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *SnapshotVoteProposal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SnapshotVoteProposal) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SnapshotVoteProposal) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SnapshotVoteProposal) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

type TestNetBridgeSwapTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network   Network `protobuf:"varint,1,opt,name=network,proto3,enum=shared.Network" json:"network,omitempty"`
	MinAmount string  `protobuf:"bytes,2,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	MaxAmount string  `protobuf:"bytes,3,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	Amount    *string `protobuf:"bytes,4,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Tx        *TaskTx `protobuf:"bytes,5,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
}

func (x *TestNetBridgeSwapTask) Reset() {
	*x = TestNetBridgeSwapTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestNetBridgeSwapTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNetBridgeSwapTask) ProtoMessage() {}

func (x *TestNetBridgeSwapTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestNetBridgeSwapTask.ProtoReflect.Descriptor instead.
func (*TestNetBridgeSwapTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{18}
}

func (x *TestNetBridgeSwapTask) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_ARBITRUM
}

func (x *TestNetBridgeSwapTask) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *TestNetBridgeSwapTask) GetMaxAmount() string {
	if x != nil {
		return x.MaxAmount
	}
	return ""
}

func (x *TestNetBridgeSwapTask) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *TestNetBridgeSwapTask) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

type OkexDepositTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network         Network `protobuf:"varint,1,opt,name=network,proto3,enum=shared.Network" json:"network,omitempty"`
	OkexAccName     *string `protobuf:"bytes,2,opt,name=okex_acc_name,json=okexAccName,proto3,oneof" json:"okex_acc_name,omitempty"` //deprecated
	OkexAddr        *string `protobuf:"bytes,3,opt,name=okex_addr,json=okexAddr,proto3,oneof" json:"okex_addr,omitempty"`            //deprecated
	Token           Token   `protobuf:"varint,4,opt,name=token,proto3,enum=shared.Token" json:"token,omitempty"`
	Address         *string `protobuf:"bytes,5,opt,name=address,proto3,oneof" json:"address,omitempty"`
	TxId            *string `protobuf:"bytes,6,opt,name=txId,proto3,oneof" json:"txId,omitempty"`                                //deprecated
	TxComplete      *bool   `protobuf:"varint,7,opt,name=tx_complete,json=txComplete,proto3,oneof" json:"tx_complete,omitempty"` //deprecated
	SubMainTransfer *bool   `protobuf:"varint,8,opt,name=sub_main_transfer,json=subMainTransfer,proto3,oneof" json:"sub_main_transfer,omitempty"`
	Amount          *Amount `protobuf:"bytes,9,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Tx              *TaskTx `protobuf:"bytes,10,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
	ApproveTx       *TaskTx `protobuf:"bytes,11,opt,name=approve_tx,json=approveTx,proto3,oneof" json:"approve_tx,omitempty"`
}

func (x *OkexDepositTask) Reset() {
	*x = OkexDepositTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OkexDepositTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OkexDepositTask) ProtoMessage() {}

func (x *OkexDepositTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OkexDepositTask.ProtoReflect.Descriptor instead.
func (*OkexDepositTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{19}
}

func (x *OkexDepositTask) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_ARBITRUM
}

func (x *OkexDepositTask) GetOkexAccName() string {
	if x != nil && x.OkexAccName != nil {
		return *x.OkexAccName
	}
	return ""
}

func (x *OkexDepositTask) GetOkexAddr() string {
	if x != nil && x.OkexAddr != nil {
		return *x.OkexAddr
	}
	return ""
}

func (x *OkexDepositTask) GetToken() Token {
	if x != nil {
		return x.Token
	}
	return Token_USDT
}

func (x *OkexDepositTask) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *OkexDepositTask) GetTxId() string {
	if x != nil && x.TxId != nil {
		return *x.TxId
	}
	return ""
}

func (x *OkexDepositTask) GetTxComplete() bool {
	if x != nil && x.TxComplete != nil {
		return *x.TxComplete
	}
	return false
}

func (x *OkexDepositTask) GetSubMainTransfer() bool {
	if x != nil && x.SubMainTransfer != nil {
		return *x.SubMainTransfer
	}
	return false
}

func (x *OkexDepositTask) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *OkexDepositTask) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *OkexDepositTask) GetApproveTx() *TaskTx {
	if x != nil {
		return x.ApproveTx
	}
	return nil
}

type WithdrawExchangeTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithdrawerId         string  `protobuf:"bytes,1,opt,name=withdrawer_id,json=withdrawerId,proto3" json:"withdrawer_id,omitempty"`
	Network              string  `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	AmountMin            string  `protobuf:"bytes,3,opt,name=amount_min,json=amountMin,proto3" json:"amount_min,omitempty"`
	AmountMax            string  `protobuf:"bytes,4,opt,name=amount_max,json=amountMax,proto3" json:"amount_max,omitempty"`
	Token                string  `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	WithdrawOrderId      *string `protobuf:"bytes,7,opt,name=withdraw_order_id,json=withdrawOrderId,proto3,oneof" json:"withdraw_order_id,omitempty"`
	Amount               *string `protobuf:"bytes,8,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	TxId                 *string `protobuf:"bytes,9,opt,name=tx_id,json=txId,proto3,oneof" json:"tx_id,omitempty"`
	WithdrawAddr         *string `protobuf:"bytes,10,opt,name=withdraw_addr,json=withdrawAddr,proto3,oneof" json:"withdraw_addr,omitempty"`
	UseExternalAddr      *bool   `protobuf:"varint,11,opt,name=use_external_addr,json=useExternalAddr,proto3,oneof" json:"use_external_addr,omitempty"`
	SendAllCoins         *bool   `protobuf:"varint,12,opt,name=send_all_coins,json=sendAllCoins,proto3,oneof" json:"send_all_coins,omitempty"`
	SendToRelatedProfile bool    `protobuf:"varint,13,opt,name=send_to_related_profile,json=sendToRelatedProfile,proto3" json:"send_to_related_profile,omitempty"`
}

func (x *WithdrawExchangeTask) Reset() {
	*x = WithdrawExchangeTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawExchangeTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawExchangeTask) ProtoMessage() {}

func (x *WithdrawExchangeTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawExchangeTask.ProtoReflect.Descriptor instead.
func (*WithdrawExchangeTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{20}
}

func (x *WithdrawExchangeTask) GetWithdrawerId() string {
	if x != nil {
		return x.WithdrawerId
	}
	return ""
}

func (x *WithdrawExchangeTask) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *WithdrawExchangeTask) GetAmountMin() string {
	if x != nil {
		return x.AmountMin
	}
	return ""
}

func (x *WithdrawExchangeTask) GetAmountMax() string {
	if x != nil {
		return x.AmountMax
	}
	return ""
}

func (x *WithdrawExchangeTask) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *WithdrawExchangeTask) GetWithdrawOrderId() string {
	if x != nil && x.WithdrawOrderId != nil {
		return *x.WithdrawOrderId
	}
	return ""
}

func (x *WithdrawExchangeTask) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *WithdrawExchangeTask) GetTxId() string {
	if x != nil && x.TxId != nil {
		return *x.TxId
	}
	return ""
}

func (x *WithdrawExchangeTask) GetWithdrawAddr() string {
	if x != nil && x.WithdrawAddr != nil {
		return *x.WithdrawAddr
	}
	return ""
}

func (x *WithdrawExchangeTask) GetUseExternalAddr() bool {
	if x != nil && x.UseExternalAddr != nil {
		return *x.UseExternalAddr
	}
	return false
}

func (x *WithdrawExchangeTask) GetSendAllCoins() bool {
	if x != nil && x.SendAllCoins != nil {
		return *x.SendAllCoins
	}
	return false
}

func (x *WithdrawExchangeTask) GetSendToRelatedProfile() bool {
	if x != nil {
		return x.SendToRelatedProfile
	}
	return false
}

type StargateBridgeTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromNetwork     Network `protobuf:"varint,1,opt,name=fromNetwork,proto3,enum=shared.Network" json:"fromNetwork,omitempty"`
	ToNetwork       Network `protobuf:"varint,2,opt,name=toNetwork,proto3,enum=shared.Network" json:"toNetwork,omitempty"`
	FromToken       Token   `protobuf:"varint,3,opt,name=fromToken,proto3,enum=shared.Token" json:"fromToken,omitempty"`
	ToToken         Token   `protobuf:"varint,4,opt,name=toToken,proto3,enum=shared.Token" json:"toToken,omitempty"`
	Fee             *string `protobuf:"bytes,5,opt,name=fee,proto3,oneof" json:"fee,omitempty"`   //deprecated
	TxId            *string `protobuf:"bytes,6,opt,name=txId,proto3,oneof" json:"txId,omitempty"` //deprecated
	LayerZeroStatus *string `protobuf:"bytes,7,opt,name=layer_zero_status,json=layerZeroStatus,proto3,oneof" json:"layer_zero_status,omitempty"`
	LzscanUrl       *string `protobuf:"bytes,8,opt,name=lzscan_url,json=lzscanUrl,proto3,oneof" json:"lzscan_url,omitempty"`
	TxCompleted     *bool   `protobuf:"varint,9,opt,name=tx_completed,json=txCompleted,proto3,oneof" json:"tx_completed,omitempty"` //deprecated
	Amount          *Amount `protobuf:"bytes,10,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Tx              *TaskTx `protobuf:"bytes,11,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
}

func (x *StargateBridgeTask) Reset() {
	*x = StargateBridgeTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StargateBridgeTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StargateBridgeTask) ProtoMessage() {}

func (x *StargateBridgeTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StargateBridgeTask.ProtoReflect.Descriptor instead.
func (*StargateBridgeTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{21}
}

func (x *StargateBridgeTask) GetFromNetwork() Network {
	if x != nil {
		return x.FromNetwork
	}
	return Network_ARBITRUM
}

func (x *StargateBridgeTask) GetToNetwork() Network {
	if x != nil {
		return x.ToNetwork
	}
	return Network_ARBITRUM
}

func (x *StargateBridgeTask) GetFromToken() Token {
	if x != nil {
		return x.FromToken
	}
	return Token_USDT
}

func (x *StargateBridgeTask) GetToToken() Token {
	if x != nil {
		return x.ToToken
	}
	return Token_USDT
}

func (x *StargateBridgeTask) GetFee() string {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return ""
}

func (x *StargateBridgeTask) GetTxId() string {
	if x != nil && x.TxId != nil {
		return *x.TxId
	}
	return ""
}

func (x *StargateBridgeTask) GetLayerZeroStatus() string {
	if x != nil && x.LayerZeroStatus != nil {
		return *x.LayerZeroStatus
	}
	return ""
}

func (x *StargateBridgeTask) GetLzscanUrl() string {
	if x != nil && x.LzscanUrl != nil {
		return *x.LzscanUrl
	}
	return ""
}

func (x *StargateBridgeTask) GetTxCompleted() bool {
	if x != nil && x.TxCompleted != nil {
		return *x.TxCompleted
	}
	return false
}

func (x *StargateBridgeTask) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *StargateBridgeTask) GetTx() *TaskTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

// deprecated
type MockTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MockTask) Reset() {
	*x = MockTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockTask) ProtoMessage() {}

func (x *MockTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockTask.ProtoReflect.Descriptor instead.
func (*MockTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{22}
}

type DelayTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration       int64                  `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	WaitFor        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=wait_for,json=waitFor,proto3,oneof" json:"wait_for,omitempty"`
	Random         bool                   `protobuf:"varint,3,opt,name=random,proto3" json:"random,omitempty"`
	MinRandom      *int64                 `protobuf:"varint,4,opt,name=min_random,json=minRandom,proto3,oneof" json:"min_random,omitempty"`
	MaxRandom      *int64                 `protobuf:"varint,5,opt,name=max_random,json=maxRandom,proto3,oneof" json:"max_random,omitempty"`
	RandomDuration *string                `protobuf:"bytes,6,opt,name=random_duration,json=randomDuration,proto3,oneof" json:"random_duration,omitempty"`
}

func (x *DelayTask) Reset() {
	*x = DelayTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelayTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayTask) ProtoMessage() {}

func (x *DelayTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayTask.ProtoReflect.Descriptor instead.
func (*DelayTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{23}
}

func (x *DelayTask) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DelayTask) GetWaitFor() *timestamppb.Timestamp {
	if x != nil {
		return x.WaitFor
	}
	return nil
}

func (x *DelayTask) GetRandom() bool {
	if x != nil {
		return x.Random
	}
	return false
}

func (x *DelayTask) GetMinRandom() int64 {
	if x != nil && x.MinRandom != nil {
		return *x.MinRandom
	}
	return 0
}

func (x *DelayTask) GetMaxRandom() int64 {
	if x != nil && x.MaxRandom != nil {
		return *x.MaxRandom
	}
	return 0
}

func (x *DelayTask) GetRandomDuration() string {
	if x != nil && x.RandomDuration != nil {
		return *x.RandomDuration
	}
	return ""
}

// deprecated
type OkexBinanaceTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OkexWithdrawerId    string  `protobuf:"bytes,1,opt,name=okexWithdrawerId,proto3" json:"okexWithdrawerId,omitempty"`
	OkexToken           string  `protobuf:"bytes,3,opt,name=okexToken,proto3" json:"okexToken,omitempty"`
	OkexNetwork         string  `protobuf:"bytes,4,opt,name=okexNetwork,proto3" json:"okexNetwork,omitempty"`
	BinanaceDepositAddr string  `protobuf:"bytes,7,opt,name=binanaceDepositAddr,proto3" json:"binanaceDepositAddr,omitempty"`
	TxId                *string `protobuf:"bytes,8,opt,name=txId,proto3,oneof" json:"txId,omitempty"`
	WithdrawTxId        *string `protobuf:"bytes,9,opt,name=withdrawTxId,proto3,oneof" json:"withdrawTxId,omitempty"`
}

func (x *OkexBinanaceTask) Reset() {
	*x = OkexBinanaceTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_task_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OkexBinanaceTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OkexBinanaceTask) ProtoMessage() {}

func (x *OkexBinanaceTask) ProtoReflect() protoreflect.Message {
	mi := &file_v1_task_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OkexBinanaceTask.ProtoReflect.Descriptor instead.
func (*OkexBinanaceTask) Descriptor() ([]byte, []int) {
	return file_v1_task_proto_rawDescGZIP(), []int{24}
}

func (x *OkexBinanaceTask) GetOkexWithdrawerId() string {
	if x != nil {
		return x.OkexWithdrawerId
	}
	return ""
}

func (x *OkexBinanaceTask) GetOkexToken() string {
	if x != nil {
		return x.OkexToken
	}
	return ""
}

func (x *OkexBinanaceTask) GetOkexNetwork() string {
	if x != nil {
		return x.OkexNetwork
	}
	return ""
}

func (x *OkexBinanaceTask) GetBinanaceDepositAddr() string {
	if x != nil {
		return x.BinanaceDepositAddr
	}
	return ""
}

func (x *OkexBinanaceTask) GetTxId() string {
	if x != nil && x.TxId != nil {
		return *x.TxId
	}
	return ""
}

func (x *OkexBinanaceTask) GetWithdrawTxId() string {
	if x != nil && x.WithdrawTxId != nil {
		return *x.WithdrawTxId
	}
	return ""
}

var File_v1_task_proto protoreflect.FileDescriptor

var file_v1_task_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x76, 0x31, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x03, 0x0a, 0x0d, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2d, 0x0a,
	0x09, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x09, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x6f, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x07, 0x74, 0x6f, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78,
	0x48, 0x01, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x02, 0x52, 0x02, 0x74, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x3a,
	0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0xd2, 0x01, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x09, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0xd2, 0x01, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0xd2, 0x01, 0x07, 0x74,
	0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2,
	0x01, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x54, 0x78, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x78, 0x22, 0x47, 0x0a, 0x08, 0x54, 0x78,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x13,
	0x92, 0x41, 0x10, 0x0a, 0x0e, 0xd2, 0x01, 0x03, 0x6b, 0x65, 0x79, 0xd2, 0x01, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x7c, 0x0a, 0x07, 0x4c, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54,
	0x78, 0x88, 0x01, 0x01, 0x3a, 0x0d, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0xd2, 0x01, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54,
	0x78, 0x22, 0xe3, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x09, 0x74, 0x6f, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52, 0x02, 0x74, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x01,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x78, 0x88, 0x01, 0x01, 0x3a, 0x32,
	0x92, 0x41, 0x2f, 0x0a, 0x2d, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x0a,
	0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x78, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52, 0x02, 0x74,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x01, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x54, 0x78, 0x88, 0x01, 0x01, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x78, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x78, 0x22, 0xca, 0x03, 0x0a, 0x10,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x07, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0xd2, 0x01, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0xd2, 0x01, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xd2,
	0x01, 0x08, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x72,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xd3, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2c, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x6f, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x07, 0x74, 0x6f, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52,
	0x02, 0x74, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x54, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x01, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x54, 0x78, 0x88, 0x01, 0x01, 0x3a, 0x30, 0x92, 0x41, 0x2d, 0x0a, 0x2b, 0xd2, 0x01,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0xd2, 0x01, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xd2, 0x01,
	0x08, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x78,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x78, 0x22, 0xef,
	0x04, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x78, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x74, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x01, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x0d, 0x67, 0x61, 0x73, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x41, 0x6d, 0x55, 0x6e, 0x69, 0x48, 0x03, 0x52, 0x0c, 0x67, 0x61, 0x73, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0a, 0x67,
	0x61, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x6d, 0x55, 0x6e, 0x69, 0x48, 0x04,
	0x52, 0x09, 0x67, 0x61, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x6d, 0x55, 0x6e, 0x69,
	0x48, 0x05, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x78, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x73, 0x3a,
	0x34, 0x92, 0x41, 0x31, 0x0a, 0x2f, 0xd2, 0x01, 0x0c, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0xd2, 0x01, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0b,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x22, 0xf5, 0x02, 0x0a, 0x1a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x4d, 0x69, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x46, 0x54, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x32, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x09, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x78, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78,
	0x48, 0x01, 0x52, 0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x6e, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x05, 0x6e, 0x66, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0xd2, 0x01, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x0a, 0x74, 0x6f, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x07, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0xd2,
	0x01, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x74, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x65, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52, 0x02, 0x74,
	0x78, 0x88, 0x01, 0x01, 0x3a, 0x14, 0x92, 0x41, 0x11, 0x0a, 0x0f, 0xd2, 0x01, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x02, 0x74, 0x78, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74,
	0x78, 0x22, 0xa4, 0x03, 0x0a, 0x09, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x50, 0x12,
	0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x01, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x01, 0x61, 0x12,
	0x1b, 0x0a, 0x01, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x01, 0x62, 0x12, 0x21, 0x0a, 0x02,
	0x74, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52, 0x02, 0x74, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x64,
	0x64, 0x12, 0x2d, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x78, 0x48, 0x01, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78,
	0x48, 0x02, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0xd2, 0x01, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0xd2, 0x01, 0x01, 0x61, 0xd2, 0x01, 0x01, 0x62, 0xd2, 0x01, 0x03, 0x61, 0x64, 0x64, 0xd2, 0x01,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x78, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x57, 0x45, 0x54,
	0x48, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x72, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x72, 0x61, 0x70, 0x12, 0x21, 0x0a, 0x02,
	0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52, 0x02, 0x74, 0x78, 0x88, 0x01, 0x01, 0x3a,
	0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2,
	0x01, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x04, 0x77, 0x72, 0x61, 0x70,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x78, 0x22, 0xa1, 0x05, 0x0a, 0x11, 0x4f, 0x72, 0x62, 0x69,
	0x74, 0x65, 0x72, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x09,
	0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2c, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x07, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x78, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x13, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x11, 0x6f, 0x72, 0x62,
	0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0d, 0x73, 0x77, 0x61,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x02, 0x74, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x05, 0x52, 0x02, 0x74, 0x78, 0x88, 0x01, 0x01,
	0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0xd2, 0x01, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2,
	0x01, 0x0a, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xd2, 0x01, 0x08, 0x74, 0x6f, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x72,
	0x62, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x78, 0x22, 0xe3, 0x01, 0x0a, 0x24,
	0x5a, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c,
	0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x02, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x02, 0x52, 0x02, 0x74, 0x78, 0x88, 0x01, 0x01,
	0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x78, 0x49, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74,
	0x78, 0x22, 0xc5, 0x02, 0x0a, 0x22, 0x5a, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0c,
	0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x02, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x02, 0x52, 0x02, 0x74, 0x78, 0x88, 0x01, 0x01,
	0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x21, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0xd2, 0x01, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x0b, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x78, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x78,
	0x49, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x78, 0x22, 0xa7, 0x05, 0x0a, 0x0d, 0x53, 0x77,
	0x61, 0x70, 0x31, 0x69, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x65, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x0b, 0x74, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x7e, 0x92, 0x41,
	0x7b, 0x0a, 0x79, 0xd2, 0x01, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x0f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2,
	0x01, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0xd2, 0x01, 0x0d, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0d, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x0d, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x78, 0x49, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x56, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x56, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x1a, 0x57, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x18, 0x92, 0x41, 0x15, 0x0a, 0x13,
	0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0xd2, 0x01, 0x05, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x14, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x56, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x01,
	0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53,
	0x77, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x02, 0x74, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x01, 0x52, 0x02, 0x74, 0x78, 0x88, 0x01, 0x01,
	0x3a, 0x29, 0x92, 0x41, 0x26, 0x0a, 0x24, 0xd2, 0x01, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0xd2, 0x01, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x78, 0x22, 0xd2, 0x04,
	0x0a, 0x0f, 0x4f, 0x6b, 0x65, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x29, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x27, 0x0a, 0x0d,
	0x6f, 0x6b, 0x65, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6b, 0x65, 0x78, 0x41, 0x63, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6b, 0x65, 0x78, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x6b, 0x65, 0x78,
	0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x78, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x75,
	0x62, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x4d, 0x61, 0x69, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x06, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x78, 0x48, 0x07, 0x52, 0x02, 0x74, 0x78, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x48, 0x08, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x78, 0x88, 0x01, 0x01, 0x3a, 0x17, 0x92,
	0x41, 0x14, 0x0a, 0x12, 0xd2, 0x01, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x6b, 0x65, 0x78, 0x5f,
	0x61, 0x63, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6b, 0x65,
	0x78, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x78, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x74, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x74, 0x78, 0x22, 0x8b, 0x05, 0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f,
	0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x74,
	0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x17,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x50, 0xd2, 0x01, 0x0d, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x69,
	0x6e, 0xd2, 0x01, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0xd2, 0x01,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xd2, 0x01, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73,
	0x22, 0xe2, 0x04, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x31, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x6f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x09,
	0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x07, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x15, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5a, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x7a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x6c, 0x7a, 0x73, 0x63, 0x61, 0x6e, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0b, 0x74, 0x78,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x05, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x78, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x78, 0x48, 0x06, 0x52, 0x02, 0x74, 0x78, 0x88, 0x01, 0x01, 0x3a, 0x3e, 0x92, 0x41,
	0x3b, 0x0a, 0x39, 0xd2, 0x01, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0xd2, 0x01, 0x09, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0xd2, 0x01, 0x07, 0x74, 0x6f, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x66, 0x65, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x78, 0x49, 0x64, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x7a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x74, 0x78, 0x22, 0x0a, 0x0a, 0x08, 0x4d, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x22, 0xcb, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x77, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12,
	0x22, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x19, 0x92, 0x41, 0x16, 0x0a, 0x14, 0xd2, 0x01, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xed, 0x02, 0x0a, 0x10, 0x4f, 0x6b, 0x65, 0x78, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x61, 0x63, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x6b, 0x65, 0x78, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x6b, 0x65, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6b, 0x65, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x6b, 0x65, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x6b, 0x65, 0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6b, 0x65, 0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x30, 0x0a, 0x13, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x61, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62,
	0x69, 0x6e, 0x61, 0x6e, 0x61, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x78, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x78, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a, 0x5a, 0xd2, 0x01, 0x10, 0x6f, 0x6b,
	0x65, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01,
	0x14, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x61, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x0b, 0x6f, 0x6b, 0x65, 0x78, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x09, 0x6f, 0x6b, 0x65, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0xd2,
	0x01, 0x13, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x61, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x78, 0x49, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x78, 0x49, 0x64, 0x2a,
	0xb7, 0x07, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4d, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x6b, 0x65, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56,
	0x6f, 0x74, 0x65, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x6b, 0x65, 0x78, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x31, 0x69,
	0x6e, 0x63, 0x68, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x77, 0x61,
	0x70, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x5a, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x72, 0x62, 0x69, 0x74,
	0x65, 0x72, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x5a, 0x6b,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x10, 0x0c,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x54, 0x48, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x75,
	0x74, 0x65, 0x69, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x50, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x61,
	0x76, 0x65, 0x72, 0x69, 0x63, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x46, 0x49, 0x53, 0x77, 0x61, 0x70, 0x10, 0x11, 0x12, 0x10, 0x0a,
	0x0c, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x77, 0x61, 0x70, 0x10, 0x12, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x7a, 0x75, 0x6d, 0x69, 0x53, 0x77, 0x61, 0x70, 0x10, 0x13, 0x12, 0x0e,
	0x0a, 0x0a, 0x56, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x77, 0x61, 0x70, 0x10, 0x14, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x7a, 0x6b, 0x61, 0x6c, 0x69, 0x62, 0x75, 0x72, 0x53, 0x77, 0x61, 0x70, 0x10,
	0x15, 0x12, 0x0a, 0x0a, 0x06, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x10, 0x16, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x65, 0x53, 0x77, 0x61, 0x70, 0x10, 0x17,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x46, 0x54, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x77, 0x61, 0x70, 0x31,
	0x30, 0x6b, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x6e, 0x63, 0x61, 0x6b, 0x65, 0x53,
	0x77, 0x61, 0x70, 0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x69, 0x74, 0x68, 0x53, 0x77, 0x61,
	0x70, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x65, 0x64, 0x69, 0x53, 0x77, 0x61, 0x70, 0x10,
	0x1d, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x79, 0x53, 0x77, 0x61, 0x70, 0x10, 0x1e, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x73, 0x53, 0x77, 0x61, 0x70, 0x10, 0x1f, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x10, 0x20, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x21, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x4d, 0x69, 0x6e, 0x74, 0x10,
	0x22, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x64, 0x6f, 0x73, 0x53, 0x77, 0x61, 0x70, 0x10, 0x23, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x10,
	0x24, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x76, 0x6e, 0x75, 0x53, 0x77, 0x61, 0x70, 0x10, 0x25, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x69, 0x62, 0x72, 0x6f, 0x75, 0x73, 0x53, 0x77, 0x61, 0x70, 0x10, 0x26,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x10, 0x27, 0x12, 0x0c, 0x0a, 0x08, 0x5a, 0x6b, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x50, 0x10, 0x28,
	0x12, 0x0d, 0x0a, 0x09, 0x57, 0x6f, 0x6f, 0x66, 0x69, 0x53, 0x77, 0x61, 0x70, 0x10, 0x29, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x61, 0x76, 0x65, 0x4c, 0x50, 0x10, 0x2a, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x69, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x10, 0x2b, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x74,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x10, 0x2c, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x74,
	0x5a, 0x65, 0x72, 0x69, 0x75, 0x73, 0x10, 0x2d, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x79, 0x62, 0x65,
	0x72, 0x53, 0x77, 0x61, 0x70, 0x10, 0x2e, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x6b, 0x75, 0x62, 0x6f,
	0x53, 0x77, 0x61, 0x70, 0x10, 0x2f, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x73, 0x74, 0x72, 0x61,
	0x4c, 0x50, 0x10, 0x30, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x6f, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x10, 0x31, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x53, 0x54, 0x47, 0x10, 0x32, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x79, 0x52,
	0x65, 0x66, 0x75, 0x65, 0x6c, 0x10, 0x33, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x32, 0x50, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x10, 0x34, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x10, 0x35, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x72, 0x61, 0x4c, 0x65, 0x6e, 0x64, 0x10, 0x36, 0x42, 0x09, 0x5a, 0x07, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_task_proto_rawDescOnce sync.Once
	file_v1_task_proto_rawDescData = file_v1_task_proto_rawDesc
)

func file_v1_task_proto_rawDescGZIP() []byte {
	file_v1_task_proto_rawDescOnce.Do(func() {
		file_v1_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_task_proto_rawDescData)
	})
	return file_v1_task_proto_rawDescData
}

var file_v1_task_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_task_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_v1_task_proto_goTypes = []interface{}{
	(TaskType)(0),                                // 0: task.TaskType
	(*DefaultBridge)(nil),                        // 1: task.DefaultBridge
	(*TxDetail)(nil),                             // 2: task.TxDetail
	(*LPToken)(nil),                              // 3: task.LPToken
	(*LiquidityBridgeTask)(nil),                  // 4: task.LiquidityBridgeTask
	(*SimpleTask)(nil),                           // 5: task.SimpleTask
	(*ExchangeSwapTask)(nil),                     // 6: task.ExchangeSwapTask
	(*DefaultSwap)(nil),                          // 7: task.DefaultSwap
	(*TaskTx)(nil),                               // 8: task.TaskTx
	(*MerklyMintAndBridgeNFTTask)(nil),           // 9: task.MerklyMintAndBridgeNFTTask
	(*DeployStarkNetAccountTask)(nil),            // 10: task.DeployStarkNetAccountTask
	(*DefaultLP)(nil),                            // 11: task.DefaultLP
	(*WETHTask)(nil),                             // 12: task.WETHTask
	(*OrbiterBridgeTask)(nil),                    // 13: task.OrbiterBridgeTask
	(*ZkSyncOfficialBridgeFromEthereumTask)(nil), // 14: task.ZkSyncOfficialBridgeFromEthereumTask
	(*ZkSyncOfficialBridgeToEthereumTask)(nil),   // 15: task.ZkSyncOfficialBridgeToEthereumTask
	(*Swap1InchTask)(nil),                        // 16: task.Swap1inchTask
	(*SnapshotVoteTask)(nil),                     // 17: task.SnapshotVoteTask
	(*SnapshotVoteProposal)(nil),                 // 18: task.SnapshotVoteProposal
	(*TestNetBridgeSwapTask)(nil),                // 19: task.TestNetBridgeSwapTask
	(*OkexDepositTask)(nil),                      // 20: task.OkexDepositTask
	(*WithdrawExchangeTask)(nil),                 // 21: task.WithdrawExchangeTask
	(*StargateBridgeTask)(nil),                   // 22: task.StargateBridgeTask
	(*MockTask)(nil),                             // 23: task.MockTask
	(*DelayTask)(nil),                            // 24: task.DelayTask
	(*OkexBinanaceTask)(nil),                     // 25: task.OkexBinanaceTask
	nil,                                          // 26: task.SnapshotVoteTask.ProposalEntry
	(Network)(0),                                 // 27: shared.Network
	(Token)(0),                                   // 28: shared.Token
	(*Amount)(nil),                               // 29: shared.Amount
	(*AmUni)(nil),                                // 30: shared.AmUni
	(ProcessStatus)(0),                           // 31: shared.ProcessStatus
	(*timestamppb.Timestamp)(nil),                // 32: google.protobuf.Timestamp
}
var file_v1_task_proto_depIdxs = []int32{
	27, // 0: task.DefaultBridge.fromNetwork:type_name -> shared.Network
	27, // 1: task.DefaultBridge.toNetwork:type_name -> shared.Network
	28, // 2: task.DefaultBridge.fromToken:type_name -> shared.Token
	28, // 3: task.DefaultBridge.toToken:type_name -> shared.Token
	29, // 4: task.DefaultBridge.amount:type_name -> shared.Amount
	8,  // 5: task.DefaultBridge.approveTx:type_name -> task.TaskTx
	8,  // 6: task.DefaultBridge.tx:type_name -> task.TaskTx
	28, // 7: task.LPToken.token:type_name -> shared.Token
	8,  // 8: task.LPToken.approveTx:type_name -> task.TaskTx
	29, // 9: task.LiquidityBridgeTask.amount:type_name -> shared.Amount
	27, // 10: task.LiquidityBridgeTask.from_network:type_name -> shared.Network
	27, // 11: task.LiquidityBridgeTask.to_network:type_name -> shared.Network
	28, // 12: task.LiquidityBridgeTask.token:type_name -> shared.Token
	8,  // 13: task.LiquidityBridgeTask.tx:type_name -> task.TaskTx
	8,  // 14: task.LiquidityBridgeTask.approveTx:type_name -> task.TaskTx
	27, // 15: task.SimpleTask.network:type_name -> shared.Network
	8,  // 16: task.SimpleTask.tx:type_name -> task.TaskTx
	8,  // 17: task.SimpleTask.approveTx:type_name -> task.TaskTx
	29, // 18: task.ExchangeSwapTask.amount:type_name -> shared.Amount
	28, // 19: task.ExchangeSwapTask.from_token:type_name -> shared.Token
	28, // 20: task.ExchangeSwapTask.to_token:type_name -> shared.Token
	29, // 21: task.DefaultSwap.amount:type_name -> shared.Amount
	27, // 22: task.DefaultSwap.network:type_name -> shared.Network
	28, // 23: task.DefaultSwap.from_token:type_name -> shared.Token
	28, // 24: task.DefaultSwap.to_token:type_name -> shared.Token
	8,  // 25: task.DefaultSwap.tx:type_name -> task.TaskTx
	8,  // 26: task.DefaultSwap.approveTx:type_name -> task.TaskTx
	27, // 27: task.TaskTx.network:type_name -> shared.Network
	30, // 28: task.TaskTx.gas_estimated:type_name -> shared.AmUni
	30, // 29: task.TaskTx.gas_result:type_name -> shared.AmUni
	30, // 30: task.TaskTx.gas_limit:type_name -> shared.AmUni
	2,  // 31: task.TaskTx.details:type_name -> task.TxDetail
	27, // 32: task.MerklyMintAndBridgeNFTTask.from_network:type_name -> shared.Network
	27, // 33: task.MerklyMintAndBridgeNFTTask.to_network:type_name -> shared.Network
	8,  // 34: task.MerklyMintAndBridgeNFTTask.mint_tx:type_name -> task.TaskTx
	8,  // 35: task.MerklyMintAndBridgeNFTTask.bridge_tx:type_name -> task.TaskTx
	27, // 36: task.DeployStarkNetAccountTask.network:type_name -> shared.Network
	8,  // 37: task.DeployStarkNetAccountTask.tx:type_name -> task.TaskTx
	29, // 38: task.DefaultLP.amount:type_name -> shared.Amount
	27, // 39: task.DefaultLP.network:type_name -> shared.Network
	28, // 40: task.DefaultLP.a:type_name -> shared.Token
	28, // 41: task.DefaultLP.b:type_name -> shared.Token
	8,  // 42: task.DefaultLP.tx:type_name -> task.TaskTx
	8,  // 43: task.DefaultLP.approveA:type_name -> task.TaskTx
	8,  // 44: task.DefaultLP.approveB:type_name -> task.TaskTx
	3,  // 45: task.DefaultLP.tokens:type_name -> task.LPToken
	29, // 46: task.WETHTask.amount:type_name -> shared.Amount
	27, // 47: task.WETHTask.network:type_name -> shared.Network
	8,  // 48: task.WETHTask.tx:type_name -> task.TaskTx
	29, // 49: task.OrbiterBridgeTask.amount:type_name -> shared.Amount
	27, // 50: task.OrbiterBridgeTask.from_network:type_name -> shared.Network
	27, // 51: task.OrbiterBridgeTask.to_network:type_name -> shared.Network
	28, // 52: task.OrbiterBridgeTask.from_token:type_name -> shared.Token
	28, // 53: task.OrbiterBridgeTask.to_token:type_name -> shared.Token
	8,  // 54: task.OrbiterBridgeTask.tx:type_name -> task.TaskTx
	29, // 55: task.ZkSyncOfficialBridgeFromEthereumTask.amount:type_name -> shared.Amount
	8,  // 56: task.ZkSyncOfficialBridgeFromEthereumTask.tx:type_name -> task.TaskTx
	29, // 57: task.ZkSyncOfficialBridgeToEthereumTask.amount:type_name -> shared.Amount
	27, // 58: task.ZkSyncOfficialBridgeToEthereumTask.network:type_name -> shared.Network
	8,  // 59: task.ZkSyncOfficialBridgeToEthereumTask.tx:type_name -> task.TaskTx
	27, // 60: task.Swap1inchTask.network:type_name -> shared.Network
	26, // 61: task.SnapshotVoteTask.proposal:type_name -> task.SnapshotVoteTask.ProposalEntry
	31, // 62: task.SnapshotVoteProposal.status:type_name -> shared.ProcessStatus
	27, // 63: task.TestNetBridgeSwapTask.network:type_name -> shared.Network
	8,  // 64: task.TestNetBridgeSwapTask.tx:type_name -> task.TaskTx
	27, // 65: task.OkexDepositTask.network:type_name -> shared.Network
	28, // 66: task.OkexDepositTask.token:type_name -> shared.Token
	29, // 67: task.OkexDepositTask.amount:type_name -> shared.Amount
	8,  // 68: task.OkexDepositTask.tx:type_name -> task.TaskTx
	8,  // 69: task.OkexDepositTask.approve_tx:type_name -> task.TaskTx
	27, // 70: task.StargateBridgeTask.fromNetwork:type_name -> shared.Network
	27, // 71: task.StargateBridgeTask.toNetwork:type_name -> shared.Network
	28, // 72: task.StargateBridgeTask.fromToken:type_name -> shared.Token
	28, // 73: task.StargateBridgeTask.toToken:type_name -> shared.Token
	29, // 74: task.StargateBridgeTask.amount:type_name -> shared.Amount
	8,  // 75: task.StargateBridgeTask.tx:type_name -> task.TaskTx
	32, // 76: task.DelayTask.wait_for:type_name -> google.protobuf.Timestamp
	18, // 77: task.SnapshotVoteTask.ProposalEntry.value:type_name -> task.SnapshotVoteProposal
	78, // [78:78] is the sub-list for method output_type
	78, // [78:78] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_v1_task_proto_init() }
func file_v1_task_proto_init() {
	if File_v1_task_proto != nil {
		return
	}
	file_v1_shared_proto_init()
	file_v1_withdraw_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultBridge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LPToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityBridgeTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSwapTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerklyMintAndBridgeNFTTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployStarkNetAccountTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultLP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WETHTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrbiterBridgeTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSyncOfficialBridgeFromEthereumTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSyncOfficialBridgeToEthereumTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swap1InchTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotVoteTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotVoteProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestNetBridgeSwapTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OkexDepositTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawExchangeTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StargateBridgeTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelayTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_task_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OkexBinanaceTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_task_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Swap1InchTask_SendAll)(nil),
		(*Swap1InchTask_SendPercent)(nil),
		(*Swap1InchTask_SendAmount)(nil),
	}
	file_v1_task_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_v1_task_proto_msgTypes[24].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_task_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_task_proto_goTypes,
		DependencyIndexes: file_v1_task_proto_depIdxs,
		EnumInfos:         file_v1_task_proto_enumTypes,
		MessageInfos:      file_v1_task_proto_msgTypes,
	}.Build()
	File_v1_task_proto = out.File
	file_v1_task_proto_rawDesc = nil
	file_v1_task_proto_goTypes = nil
	file_v1_task_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/helper.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HelperService_GetUser_FullMethodName                   = "/helper.HelperService/GetUser"
	HelperService_EstimateStargateBridgeFee_FullMethodName = "/helper.HelperService/EstimateStargateBridgeFee"
	HelperService_ValidatePK_FullMethodName                = "/helper.HelperService/ValidatePK"
	HelperService_ValidateProxy_FullMethodName             = "/helper.HelperService/ValidateProxy"
	HelperService_CastWEI_FullMethodName                   = "/helper.HelperService/CastWEI"
	HelperService_GetBillingHistory_FullMethodName         = "/helper.HelperService/GetBillingHistory"
	HelperService_CreateOrder_FullMethodName               = "/helper.HelperService/CreateOrder"
	HelperService_GetOrderStatus_FullMethodName            = "/helper.HelperService/GetOrderStatus"
	HelperService_GetOrderHistory_FullMethodName           = "/helper.HelperService/GetOrderHistory"
	HelperService_TransactionsDailyImpact_FullMethodName   = "/helper.HelperService/TransactionsDailyImpact"
	HelperService_SupportMessage_FullMethodName            = "/helper.HelperService/SupportMessage"
	HelperService_UsePromo_FullMethodName                  = "/helper.HelperService/UsePromo"
)

// HelperServiceClient is the client API for HelperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelperServiceClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	EstimateStargateBridgeFee(ctx context.Context, in *EstimateStargateBridgeFeeRequest, opts ...grpc.CallOption) (*EstimateStargateBridgeFeeResponse, error)
	ValidatePK(ctx context.Context, in *ValidatePKRequest, opts ...grpc.CallOption) (*ValidatePKResponse, error)
	ValidateProxy(ctx context.Context, in *ValidateProxyRequest, opts ...grpc.CallOption) (*ValidateProxyResponse, error)
	CastWEI(ctx context.Context, in *CastWEIRequest, opts ...grpc.CallOption) (*CastWEIResponse, error)
	GetBillingHistory(ctx context.Context, in *GetBillingHistoryReq, opts ...grpc.CallOption) (*GetBillingHistoryRes, error)
	CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderRes, error)
	GetOrderStatus(ctx context.Context, in *GetOrderStatusReq, opts ...grpc.CallOption) (*GetOrderStatusRes, error)
	GetOrderHistory(ctx context.Context, in *GetOrderHistoryReq, opts ...grpc.CallOption) (*GetOrderHistoryRes, error)
	TransactionsDailyImpact(ctx context.Context, in *TransactionsDailyImpactReq, opts ...grpc.CallOption) (*TransactionsDailyImpactRes, error)
	SupportMessage(ctx context.Context, in *SupportMessageReq, opts ...grpc.CallOption) (*SupportMessageRes, error)
	UsePromo(ctx context.Context, in *UsePromoReq, opts ...grpc.CallOption) (*UsePromoRes, error)
}

type helperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelperServiceClient(cc grpc.ClientConnInterface) HelperServiceClient {
	return &helperServiceClient{cc}
}

func (c *helperServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, HelperService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) EstimateStargateBridgeFee(ctx context.Context, in *EstimateStargateBridgeFeeRequest, opts ...grpc.CallOption) (*EstimateStargateBridgeFeeResponse, error) {
	out := new(EstimateStargateBridgeFeeResponse)
	err := c.cc.Invoke(ctx, HelperService_EstimateStargateBridgeFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) ValidatePK(ctx context.Context, in *ValidatePKRequest, opts ...grpc.CallOption) (*ValidatePKResponse, error) {
	out := new(ValidatePKResponse)
	err := c.cc.Invoke(ctx, HelperService_ValidatePK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) ValidateProxy(ctx context.Context, in *ValidateProxyRequest, opts ...grpc.CallOption) (*ValidateProxyResponse, error) {
	out := new(ValidateProxyResponse)
	err := c.cc.Invoke(ctx, HelperService_ValidateProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) CastWEI(ctx context.Context, in *CastWEIRequest, opts ...grpc.CallOption) (*CastWEIResponse, error) {
	out := new(CastWEIResponse)
	err := c.cc.Invoke(ctx, HelperService_CastWEI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) GetBillingHistory(ctx context.Context, in *GetBillingHistoryReq, opts ...grpc.CallOption) (*GetBillingHistoryRes, error) {
	out := new(GetBillingHistoryRes)
	err := c.cc.Invoke(ctx, HelperService_GetBillingHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderRes, error) {
	out := new(CreateOrderRes)
	err := c.cc.Invoke(ctx, HelperService_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) GetOrderStatus(ctx context.Context, in *GetOrderStatusReq, opts ...grpc.CallOption) (*GetOrderStatusRes, error) {
	out := new(GetOrderStatusRes)
	err := c.cc.Invoke(ctx, HelperService_GetOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) GetOrderHistory(ctx context.Context, in *GetOrderHistoryReq, opts ...grpc.CallOption) (*GetOrderHistoryRes, error) {
	out := new(GetOrderHistoryRes)
	err := c.cc.Invoke(ctx, HelperService_GetOrderHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) TransactionsDailyImpact(ctx context.Context, in *TransactionsDailyImpactReq, opts ...grpc.CallOption) (*TransactionsDailyImpactRes, error) {
	out := new(TransactionsDailyImpactRes)
	err := c.cc.Invoke(ctx, HelperService_TransactionsDailyImpact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) SupportMessage(ctx context.Context, in *SupportMessageReq, opts ...grpc.CallOption) (*SupportMessageRes, error) {
	out := new(SupportMessageRes)
	err := c.cc.Invoke(ctx, HelperService_SupportMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) UsePromo(ctx context.Context, in *UsePromoReq, opts ...grpc.CallOption) (*UsePromoRes, error) {
	out := new(UsePromoRes)
	err := c.cc.Invoke(ctx, HelperService_UsePromo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelperServiceServer is the server API for HelperService service.
// All implementations must embed UnimplementedHelperServiceServer
// for forward compatibility
type HelperServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	EstimateStargateBridgeFee(context.Context, *EstimateStargateBridgeFeeRequest) (*EstimateStargateBridgeFeeResponse, error)
	ValidatePK(context.Context, *ValidatePKRequest) (*ValidatePKResponse, error)
	ValidateProxy(context.Context, *ValidateProxyRequest) (*ValidateProxyResponse, error)
	CastWEI(context.Context, *CastWEIRequest) (*CastWEIResponse, error)
	GetBillingHistory(context.Context, *GetBillingHistoryReq) (*GetBillingHistoryRes, error)
	CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderRes, error)
	GetOrderStatus(context.Context, *GetOrderStatusReq) (*GetOrderStatusRes, error)
	GetOrderHistory(context.Context, *GetOrderHistoryReq) (*GetOrderHistoryRes, error)
	TransactionsDailyImpact(context.Context, *TransactionsDailyImpactReq) (*TransactionsDailyImpactRes, error)
	SupportMessage(context.Context, *SupportMessageReq) (*SupportMessageRes, error)
	UsePromo(context.Context, *UsePromoReq) (*UsePromoRes, error)
	mustEmbedUnimplementedHelperServiceServer()
}

// UnimplementedHelperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelperServiceServer struct {
}

func (UnimplementedHelperServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedHelperServiceServer) EstimateStargateBridgeFee(context.Context, *EstimateStargateBridgeFeeRequest) (*EstimateStargateBridgeFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateStargateBridgeFee not implemented")
}
func (UnimplementedHelperServiceServer) ValidatePK(context.Context, *ValidatePKRequest) (*ValidatePKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePK not implemented")
}
func (UnimplementedHelperServiceServer) ValidateProxy(context.Context, *ValidateProxyRequest) (*ValidateProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateProxy not implemented")
}
func (UnimplementedHelperServiceServer) CastWEI(context.Context, *CastWEIRequest) (*CastWEIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CastWEI not implemented")
}
func (UnimplementedHelperServiceServer) GetBillingHistory(context.Context, *GetBillingHistoryReq) (*GetBillingHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingHistory not implemented")
}
func (UnimplementedHelperServiceServer) CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedHelperServiceServer) GetOrderStatus(context.Context, *GetOrderStatusReq) (*GetOrderStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatus not implemented")
}
func (UnimplementedHelperServiceServer) GetOrderHistory(context.Context, *GetOrderHistoryReq) (*GetOrderHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderHistory not implemented")
}
func (UnimplementedHelperServiceServer) TransactionsDailyImpact(context.Context, *TransactionsDailyImpactReq) (*TransactionsDailyImpactRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsDailyImpact not implemented")
}
func (UnimplementedHelperServiceServer) SupportMessage(context.Context, *SupportMessageReq) (*SupportMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportMessage not implemented")
}
func (UnimplementedHelperServiceServer) UsePromo(context.Context, *UsePromoReq) (*UsePromoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsePromo not implemented")
}
func (UnimplementedHelperServiceServer) mustEmbedUnimplementedHelperServiceServer() {}

// UnsafeHelperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelperServiceServer will
// result in compilation errors.
type UnsafeHelperServiceServer interface {
	mustEmbedUnimplementedHelperServiceServer()
}

func RegisterHelperServiceServer(s grpc.ServiceRegistrar, srv HelperServiceServer) {
	s.RegisterService(&HelperService_ServiceDesc, srv)
}

func _HelperService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_EstimateStargateBridgeFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateStargateBridgeFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).EstimateStargateBridgeFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_EstimateStargateBridgeFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).EstimateStargateBridgeFee(ctx, req.(*EstimateStargateBridgeFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_ValidatePK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).ValidatePK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_ValidatePK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).ValidatePK(ctx, req.(*ValidatePKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_ValidateProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).ValidateProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_ValidateProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).ValidateProxy(ctx, req.(*ValidateProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_CastWEI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CastWEIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).CastWEI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_CastWEI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).CastWEI(ctx, req.(*CastWEIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_GetBillingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).GetBillingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_GetBillingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).GetBillingHistory(ctx, req.(*GetBillingHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).CreateOrder(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_GetOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).GetOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_GetOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).GetOrderStatus(ctx, req.(*GetOrderStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_GetOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).GetOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_GetOrderHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).GetOrderHistory(ctx, req.(*GetOrderHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_TransactionsDailyImpact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsDailyImpactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).TransactionsDailyImpact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_TransactionsDailyImpact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).TransactionsDailyImpact(ctx, req.(*TransactionsDailyImpactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_SupportMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).SupportMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_SupportMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).SupportMessage(ctx, req.(*SupportMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_UsePromo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsePromoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).UsePromo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelperService_UsePromo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).UsePromo(ctx, req.(*UsePromoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HelperService_ServiceDesc is the grpc.ServiceDesc for HelperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helper.HelperService",
	HandlerType: (*HelperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _HelperService_GetUser_Handler,
		},
		{
			MethodName: "EstimateStargateBridgeFee",
			Handler:    _HelperService_EstimateStargateBridgeFee_Handler,
		},
		{
			MethodName: "ValidatePK",
			Handler:    _HelperService_ValidatePK_Handler,
		},
		{
			MethodName: "ValidateProxy",
			Handler:    _HelperService_ValidateProxy_Handler,
		},
		{
			MethodName: "CastWEI",
			Handler:    _HelperService_CastWEI_Handler,
		},
		{
			MethodName: "GetBillingHistory",
			Handler:    _HelperService_GetBillingHistory_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _HelperService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderStatus",
			Handler:    _HelperService_GetOrderStatus_Handler,
		},
		{
			MethodName: "GetOrderHistory",
			Handler:    _HelperService_GetOrderHistory_Handler,
		},
		{
			MethodName: "TransactionsDailyImpact",
			Handler:    _HelperService_TransactionsDailyImpact_Handler,
		},
		{
			MethodName: "SupportMessage",
			Handler:    _HelperService_SupportMessage_Handler,
		},
		{
			MethodName: "UsePromo",
			Handler:    _HelperService_UsePromo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/helper.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/orbiter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrbiterService_GetFromTokens_FullMethodName  = "/orbiter.OrbiterService/GetFromTokens"
	OrbiterService_GetToTokens_FullMethodName    = "/orbiter.OrbiterService/GetToTokens"
	OrbiterService_GetSwapOptions_FullMethodName = "/orbiter.OrbiterService/GetSwapOptions"
	OrbiterService_GetNetworks_FullMethodName    = "/orbiter.OrbiterService/GetNetworks"
)

// OrbiterServiceClient is the client API for OrbiterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrbiterServiceClient interface {
	GetFromTokens(ctx context.Context, in *GetFromTokensReq, opts ...grpc.CallOption) (*GetFromTokensRes, error)
	GetToTokens(ctx context.Context, in *GetToTokensReq, opts ...grpc.CallOption) (*GetToTokensRes, error)
	GetSwapOptions(ctx context.Context, in *GetSwapOptionsReq, opts ...grpc.CallOption) (*GetSwapOptionsRes, error)
	GetNetworks(ctx context.Context, in *GetNetworksReq, opts ...grpc.CallOption) (*GetNetworksRes, error)
}

type orbiterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrbiterServiceClient(cc grpc.ClientConnInterface) OrbiterServiceClient {
	return &orbiterServiceClient{cc}
}

func (c *orbiterServiceClient) GetFromTokens(ctx context.Context, in *GetFromTokensReq, opts ...grpc.CallOption) (*GetFromTokensRes, error) {
	out := new(GetFromTokensRes)
	err := c.cc.Invoke(ctx, OrbiterService_GetFromTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orbiterServiceClient) GetToTokens(ctx context.Context, in *GetToTokensReq, opts ...grpc.CallOption) (*GetToTokensRes, error) {
	out := new(GetToTokensRes)
	err := c.cc.Invoke(ctx, OrbiterService_GetToTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orbiterServiceClient) GetSwapOptions(ctx context.Context, in *GetSwapOptionsReq, opts ...grpc.CallOption) (*GetSwapOptionsRes, error) {
	out := new(GetSwapOptionsRes)
	err := c.cc.Invoke(ctx, OrbiterService_GetSwapOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orbiterServiceClient) GetNetworks(ctx context.Context, in *GetNetworksReq, opts ...grpc.CallOption) (*GetNetworksRes, error) {
	out := new(GetNetworksRes)
	err := c.cc.Invoke(ctx, OrbiterService_GetNetworks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrbiterServiceServer is the server API for OrbiterService service.
// All implementations must embed UnimplementedOrbiterServiceServer
// for forward compatibility
type OrbiterServiceServer interface {
	GetFromTokens(context.Context, *GetFromTokensReq) (*GetFromTokensRes, error)
	GetToTokens(context.Context, *GetToTokensReq) (*GetToTokensRes, error)
	GetSwapOptions(context.Context, *GetSwapOptionsReq) (*GetSwapOptionsRes, error)
	GetNetworks(context.Context, *GetNetworksReq) (*GetNetworksRes, error)
	mustEmbedUnimplementedOrbiterServiceServer()
}

// UnimplementedOrbiterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrbiterServiceServer struct {
}

func (UnimplementedOrbiterServiceServer) GetFromTokens(context.Context, *GetFromTokensReq) (*GetFromTokensRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFromTokens not implemented")
}
func (UnimplementedOrbiterServiceServer) GetToTokens(context.Context, *GetToTokensReq) (*GetToTokensRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToTokens not implemented")
}
func (UnimplementedOrbiterServiceServer) GetSwapOptions(context.Context, *GetSwapOptionsReq) (*GetSwapOptionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwapOptions not implemented")
}
func (UnimplementedOrbiterServiceServer) GetNetworks(context.Context, *GetNetworksReq) (*GetNetworksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworks not implemented")
}
func (UnimplementedOrbiterServiceServer) mustEmbedUnimplementedOrbiterServiceServer() {}

// UnsafeOrbiterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrbiterServiceServer will
// result in compilation errors.
type UnsafeOrbiterServiceServer interface {
	mustEmbedUnimplementedOrbiterServiceServer()
}

func RegisterOrbiterServiceServer(s grpc.ServiceRegistrar, srv OrbiterServiceServer) {
	s.RegisterService(&OrbiterService_ServiceDesc, srv)
}

func _OrbiterService_GetFromTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFromTokensReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrbiterServiceServer).GetFromTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrbiterService_GetFromTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrbiterServiceServer).GetFromTokens(ctx, req.(*GetFromTokensReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrbiterService_GetToTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToTokensReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrbiterServiceServer).GetToTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrbiterService_GetToTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrbiterServiceServer).GetToTokens(ctx, req.(*GetToTokensReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrbiterService_GetSwapOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapOptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrbiterServiceServer).GetSwapOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrbiterService_GetSwapOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrbiterServiceServer).GetSwapOptions(ctx, req.(*GetSwapOptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrbiterService_GetNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrbiterServiceServer).GetNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrbiterService_GetNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrbiterServiceServer).GetNetworks(ctx, req.(*GetNetworksReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrbiterService_ServiceDesc is the grpc.ServiceDesc for OrbiterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrbiterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orbiter.OrbiterService",
	HandlerType: (*OrbiterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFromTokens",
			Handler:    _OrbiterService_GetFromTokens_Handler,
		},
		{
			MethodName: "GetToTokens",
			Handler:    _OrbiterService_GetToTokens_Handler,
		},
		{
			MethodName: "GetSwapOptions",
			Handler:    _OrbiterService_GetSwapOptions_Handler,
		},
		{
			MethodName: "GetNetworks",
			Handler:    _OrbiterService_GetNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/orbiter.proto",
}

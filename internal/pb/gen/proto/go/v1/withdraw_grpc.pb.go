// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/withdraw.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WithdrawerService_OkexDepositAddrAttach_FullMethodName      = "/withdrawer.WithdrawerService/OkexDepositAddrAttach"
	WithdrawerService_OkexDepositAddrDetach_FullMethodName      = "/withdrawer.WithdrawerService/OkexDepositAddrDetach"
	WithdrawerService_ListDepositAddresses_FullMethodName       = "/withdrawer.WithdrawerService/ListDepositAddresses"
	WithdrawerService_ListSubWithdrawer_FullMethodName          = "/withdrawer.WithdrawerService/ListSubWithdrawer"
	WithdrawerService_CreateSubWithdrawer_FullMethodName        = "/withdrawer.WithdrawerService/CreateSubWithdrawer"
	WithdrawerService_CreateWithdrawer_FullMethodName           = "/withdrawer.WithdrawerService/CreateWithdrawer"
	WithdrawerService_UpdateWithdrawer_FullMethodName           = "/withdrawer.WithdrawerService/UpdateWithdrawer"
	WithdrawerService_ListWithdrawer_FullMethodName             = "/withdrawer.WithdrawerService/ListWithdrawer"
	WithdrawerService_DeleteWithdrawer_FullMethodName           = "/withdrawer.WithdrawerService/DeleteWithdrawer"
	WithdrawerService_GetExchangeWithdrawOptions_FullMethodName = "/withdrawer.WithdrawerService/GetExchangeWithdrawOptions"
	WithdrawerService_GetExchangeDepositOptions_FullMethodName  = "/withdrawer.WithdrawerService/GetExchangeDepositOptions"
	WithdrawerService_GetWithdrawer_FullMethodName              = "/withdrawer.WithdrawerService/GetWithdrawer"
	WithdrawerService_Withdraw_FullMethodName                   = "/withdrawer.WithdrawerService/Withdraw"
	WithdrawerService_WithdrawStatus_FullMethodName             = "/withdrawer.WithdrawerService/WithdrawStatus"
	WithdrawerService_ExportExchangeAccounts_FullMethodName     = "/withdrawer.WithdrawerService/ExportExchangeAccounts"
)

// WithdrawerServiceClient is the client API for WithdrawerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithdrawerServiceClient interface {
	OkexDepositAddrAttach(ctx context.Context, in *OkexDepositAddrAttachRequest, opts ...grpc.CallOption) (*OkexDepositAddrAttachResponse, error)
	OkexDepositAddrDetach(ctx context.Context, in *OkexDepositAddrDetachRequest, opts ...grpc.CallOption) (*OkexDepositAddrDetachResponse, error)
	ListDepositAddresses(ctx context.Context, in *ListDepositAddressesRequest, opts ...grpc.CallOption) (*ListDepositAddressesResponse, error)
	ListSubWithdrawer(ctx context.Context, in *ListSubWithdrawerRequest, opts ...grpc.CallOption) (*ListSubWithdrawerResponse, error)
	CreateSubWithdrawer(ctx context.Context, in *CreateOkexWithdrawerRequest, opts ...grpc.CallOption) (*CreateOkexWithdrawerResponse, error)
	CreateWithdrawer(ctx context.Context, in *CreateWithdrawerRequest, opts ...grpc.CallOption) (*CreateWithdrawerResponse, error)
	UpdateWithdrawer(ctx context.Context, in *UpdateWithdrawerRequest, opts ...grpc.CallOption) (*UpdateWithdrawerResponse, error)
	ListWithdrawer(ctx context.Context, in *ListWithdrawerRequest, opts ...grpc.CallOption) (*ListWithdrawerResponse, error)
	DeleteWithdrawer(ctx context.Context, in *DeleteWithdrawerRequest, opts ...grpc.CallOption) (*DeleteWithdrawerResponse, error)
	GetExchangeWithdrawOptions(ctx context.Context, in *GetExchangeWithdrawOptionsRequest, opts ...grpc.CallOption) (*GetExchangeWithdrawOptionsResponse, error)
	GetExchangeDepositOptions(ctx context.Context, in *GetExchangeDepositOptionsRequest, opts ...grpc.CallOption) (*GetExchangeDepositOptionsResponse, error)
	GetWithdrawer(ctx context.Context, in *GetWithdrawerRequest, opts ...grpc.CallOption) (*GetWithdrawerResponse, error)
	Withdraw(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawRes, error)
	WithdrawStatus(ctx context.Context, in *WithdrawStatusReq, opts ...grpc.CallOption) (*WithdrawStatusRes, error)
	ExportExchangeAccounts(ctx context.Context, in *ExportExchangeAccountsReq, opts ...grpc.CallOption) (*ExportExchangeAccountsRes, error)
}

type withdrawerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawerServiceClient(cc grpc.ClientConnInterface) WithdrawerServiceClient {
	return &withdrawerServiceClient{cc}
}

func (c *withdrawerServiceClient) OkexDepositAddrAttach(ctx context.Context, in *OkexDepositAddrAttachRequest, opts ...grpc.CallOption) (*OkexDepositAddrAttachResponse, error) {
	out := new(OkexDepositAddrAttachResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_OkexDepositAddrAttach_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) OkexDepositAddrDetach(ctx context.Context, in *OkexDepositAddrDetachRequest, opts ...grpc.CallOption) (*OkexDepositAddrDetachResponse, error) {
	out := new(OkexDepositAddrDetachResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_OkexDepositAddrDetach_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) ListDepositAddresses(ctx context.Context, in *ListDepositAddressesRequest, opts ...grpc.CallOption) (*ListDepositAddressesResponse, error) {
	out := new(ListDepositAddressesResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_ListDepositAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) ListSubWithdrawer(ctx context.Context, in *ListSubWithdrawerRequest, opts ...grpc.CallOption) (*ListSubWithdrawerResponse, error) {
	out := new(ListSubWithdrawerResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_ListSubWithdrawer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) CreateSubWithdrawer(ctx context.Context, in *CreateOkexWithdrawerRequest, opts ...grpc.CallOption) (*CreateOkexWithdrawerResponse, error) {
	out := new(CreateOkexWithdrawerResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_CreateSubWithdrawer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) CreateWithdrawer(ctx context.Context, in *CreateWithdrawerRequest, opts ...grpc.CallOption) (*CreateWithdrawerResponse, error) {
	out := new(CreateWithdrawerResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_CreateWithdrawer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) UpdateWithdrawer(ctx context.Context, in *UpdateWithdrawerRequest, opts ...grpc.CallOption) (*UpdateWithdrawerResponse, error) {
	out := new(UpdateWithdrawerResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_UpdateWithdrawer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) ListWithdrawer(ctx context.Context, in *ListWithdrawerRequest, opts ...grpc.CallOption) (*ListWithdrawerResponse, error) {
	out := new(ListWithdrawerResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_ListWithdrawer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) DeleteWithdrawer(ctx context.Context, in *DeleteWithdrawerRequest, opts ...grpc.CallOption) (*DeleteWithdrawerResponse, error) {
	out := new(DeleteWithdrawerResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_DeleteWithdrawer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) GetExchangeWithdrawOptions(ctx context.Context, in *GetExchangeWithdrawOptionsRequest, opts ...grpc.CallOption) (*GetExchangeWithdrawOptionsResponse, error) {
	out := new(GetExchangeWithdrawOptionsResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_GetExchangeWithdrawOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) GetExchangeDepositOptions(ctx context.Context, in *GetExchangeDepositOptionsRequest, opts ...grpc.CallOption) (*GetExchangeDepositOptionsResponse, error) {
	out := new(GetExchangeDepositOptionsResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_GetExchangeDepositOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) GetWithdrawer(ctx context.Context, in *GetWithdrawerRequest, opts ...grpc.CallOption) (*GetWithdrawerResponse, error) {
	out := new(GetWithdrawerResponse)
	err := c.cc.Invoke(ctx, WithdrawerService_GetWithdrawer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) Withdraw(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawRes, error) {
	out := new(WithdrawRes)
	err := c.cc.Invoke(ctx, WithdrawerService_Withdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) WithdrawStatus(ctx context.Context, in *WithdrawStatusReq, opts ...grpc.CallOption) (*WithdrawStatusRes, error) {
	out := new(WithdrawStatusRes)
	err := c.cc.Invoke(ctx, WithdrawerService_WithdrawStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) ExportExchangeAccounts(ctx context.Context, in *ExportExchangeAccountsReq, opts ...grpc.CallOption) (*ExportExchangeAccountsRes, error) {
	out := new(ExportExchangeAccountsRes)
	err := c.cc.Invoke(ctx, WithdrawerService_ExportExchangeAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawerServiceServer is the server API for WithdrawerService service.
// All implementations must embed UnimplementedWithdrawerServiceServer
// for forward compatibility
type WithdrawerServiceServer interface {
	OkexDepositAddrAttach(context.Context, *OkexDepositAddrAttachRequest) (*OkexDepositAddrAttachResponse, error)
	OkexDepositAddrDetach(context.Context, *OkexDepositAddrDetachRequest) (*OkexDepositAddrDetachResponse, error)
	ListDepositAddresses(context.Context, *ListDepositAddressesRequest) (*ListDepositAddressesResponse, error)
	ListSubWithdrawer(context.Context, *ListSubWithdrawerRequest) (*ListSubWithdrawerResponse, error)
	CreateSubWithdrawer(context.Context, *CreateOkexWithdrawerRequest) (*CreateOkexWithdrawerResponse, error)
	CreateWithdrawer(context.Context, *CreateWithdrawerRequest) (*CreateWithdrawerResponse, error)
	UpdateWithdrawer(context.Context, *UpdateWithdrawerRequest) (*UpdateWithdrawerResponse, error)
	ListWithdrawer(context.Context, *ListWithdrawerRequest) (*ListWithdrawerResponse, error)
	DeleteWithdrawer(context.Context, *DeleteWithdrawerRequest) (*DeleteWithdrawerResponse, error)
	GetExchangeWithdrawOptions(context.Context, *GetExchangeWithdrawOptionsRequest) (*GetExchangeWithdrawOptionsResponse, error)
	GetExchangeDepositOptions(context.Context, *GetExchangeDepositOptionsRequest) (*GetExchangeDepositOptionsResponse, error)
	GetWithdrawer(context.Context, *GetWithdrawerRequest) (*GetWithdrawerResponse, error)
	Withdraw(context.Context, *WithdrawReq) (*WithdrawRes, error)
	WithdrawStatus(context.Context, *WithdrawStatusReq) (*WithdrawStatusRes, error)
	ExportExchangeAccounts(context.Context, *ExportExchangeAccountsReq) (*ExportExchangeAccountsRes, error)
	mustEmbedUnimplementedWithdrawerServiceServer()
}

// UnimplementedWithdrawerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWithdrawerServiceServer struct {
}

func (UnimplementedWithdrawerServiceServer) OkexDepositAddrAttach(context.Context, *OkexDepositAddrAttachRequest) (*OkexDepositAddrAttachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OkexDepositAddrAttach not implemented")
}
func (UnimplementedWithdrawerServiceServer) OkexDepositAddrDetach(context.Context, *OkexDepositAddrDetachRequest) (*OkexDepositAddrDetachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OkexDepositAddrDetach not implemented")
}
func (UnimplementedWithdrawerServiceServer) ListDepositAddresses(context.Context, *ListDepositAddressesRequest) (*ListDepositAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepositAddresses not implemented")
}
func (UnimplementedWithdrawerServiceServer) ListSubWithdrawer(context.Context, *ListSubWithdrawerRequest) (*ListSubWithdrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubWithdrawer not implemented")
}
func (UnimplementedWithdrawerServiceServer) CreateSubWithdrawer(context.Context, *CreateOkexWithdrawerRequest) (*CreateOkexWithdrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubWithdrawer not implemented")
}
func (UnimplementedWithdrawerServiceServer) CreateWithdrawer(context.Context, *CreateWithdrawerRequest) (*CreateWithdrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdrawer not implemented")
}
func (UnimplementedWithdrawerServiceServer) UpdateWithdrawer(context.Context, *UpdateWithdrawerRequest) (*UpdateWithdrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdrawer not implemented")
}
func (UnimplementedWithdrawerServiceServer) ListWithdrawer(context.Context, *ListWithdrawerRequest) (*ListWithdrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawer not implemented")
}
func (UnimplementedWithdrawerServiceServer) DeleteWithdrawer(context.Context, *DeleteWithdrawerRequest) (*DeleteWithdrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithdrawer not implemented")
}
func (UnimplementedWithdrawerServiceServer) GetExchangeWithdrawOptions(context.Context, *GetExchangeWithdrawOptionsRequest) (*GetExchangeWithdrawOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeWithdrawOptions not implemented")
}
func (UnimplementedWithdrawerServiceServer) GetExchangeDepositOptions(context.Context, *GetExchangeDepositOptionsRequest) (*GetExchangeDepositOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeDepositOptions not implemented")
}
func (UnimplementedWithdrawerServiceServer) GetWithdrawer(context.Context, *GetWithdrawerRequest) (*GetWithdrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawer not implemented")
}
func (UnimplementedWithdrawerServiceServer) Withdraw(context.Context, *WithdrawReq) (*WithdrawRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedWithdrawerServiceServer) WithdrawStatus(context.Context, *WithdrawStatusReq) (*WithdrawStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawStatus not implemented")
}
func (UnimplementedWithdrawerServiceServer) ExportExchangeAccounts(context.Context, *ExportExchangeAccountsReq) (*ExportExchangeAccountsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportExchangeAccounts not implemented")
}
func (UnimplementedWithdrawerServiceServer) mustEmbedUnimplementedWithdrawerServiceServer() {}

// UnsafeWithdrawerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawerServiceServer will
// result in compilation errors.
type UnsafeWithdrawerServiceServer interface {
	mustEmbedUnimplementedWithdrawerServiceServer()
}

func RegisterWithdrawerServiceServer(s grpc.ServiceRegistrar, srv WithdrawerServiceServer) {
	s.RegisterService(&WithdrawerService_ServiceDesc, srv)
}

func _WithdrawerService_OkexDepositAddrAttach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OkexDepositAddrAttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).OkexDepositAddrAttach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_OkexDepositAddrAttach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).OkexDepositAddrAttach(ctx, req.(*OkexDepositAddrAttachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_OkexDepositAddrDetach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OkexDepositAddrDetachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).OkexDepositAddrDetach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_OkexDepositAddrDetach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).OkexDepositAddrDetach(ctx, req.(*OkexDepositAddrDetachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_ListDepositAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).ListDepositAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_ListDepositAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).ListDepositAddresses(ctx, req.(*ListDepositAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_ListSubWithdrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubWithdrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).ListSubWithdrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_ListSubWithdrawer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).ListSubWithdrawer(ctx, req.(*ListSubWithdrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_CreateSubWithdrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOkexWithdrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).CreateSubWithdrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_CreateSubWithdrawer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).CreateSubWithdrawer(ctx, req.(*CreateOkexWithdrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_CreateWithdrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).CreateWithdrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_CreateWithdrawer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).CreateWithdrawer(ctx, req.(*CreateWithdrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_UpdateWithdrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).UpdateWithdrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_UpdateWithdrawer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).UpdateWithdrawer(ctx, req.(*UpdateWithdrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_ListWithdrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).ListWithdrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_ListWithdrawer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).ListWithdrawer(ctx, req.(*ListWithdrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_DeleteWithdrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWithdrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).DeleteWithdrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_DeleteWithdrawer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).DeleteWithdrawer(ctx, req.(*DeleteWithdrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_GetExchangeWithdrawOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeWithdrawOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).GetExchangeWithdrawOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_GetExchangeWithdrawOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).GetExchangeWithdrawOptions(ctx, req.(*GetExchangeWithdrawOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_GetExchangeDepositOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeDepositOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).GetExchangeDepositOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_GetExchangeDepositOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).GetExchangeDepositOptions(ctx, req.(*GetExchangeDepositOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_GetWithdrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).GetWithdrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_GetWithdrawer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).GetWithdrawer(ctx, req.(*GetWithdrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).Withdraw(ctx, req.(*WithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_WithdrawStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).WithdrawStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_WithdrawStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).WithdrawStatus(ctx, req.(*WithdrawStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_ExportExchangeAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportExchangeAccountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).ExportExchangeAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawerService_ExportExchangeAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).ExportExchangeAccounts(ctx, req.(*ExportExchangeAccountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WithdrawerService_ServiceDesc is the grpc.ServiceDesc for WithdrawerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "withdrawer.WithdrawerService",
	HandlerType: (*WithdrawerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OkexDepositAddrAttach",
			Handler:    _WithdrawerService_OkexDepositAddrAttach_Handler,
		},
		{
			MethodName: "OkexDepositAddrDetach",
			Handler:    _WithdrawerService_OkexDepositAddrDetach_Handler,
		},
		{
			MethodName: "ListDepositAddresses",
			Handler:    _WithdrawerService_ListDepositAddresses_Handler,
		},
		{
			MethodName: "ListSubWithdrawer",
			Handler:    _WithdrawerService_ListSubWithdrawer_Handler,
		},
		{
			MethodName: "CreateSubWithdrawer",
			Handler:    _WithdrawerService_CreateSubWithdrawer_Handler,
		},
		{
			MethodName: "CreateWithdrawer",
			Handler:    _WithdrawerService_CreateWithdrawer_Handler,
		},
		{
			MethodName: "UpdateWithdrawer",
			Handler:    _WithdrawerService_UpdateWithdrawer_Handler,
		},
		{
			MethodName: "ListWithdrawer",
			Handler:    _WithdrawerService_ListWithdrawer_Handler,
		},
		{
			MethodName: "DeleteWithdrawer",
			Handler:    _WithdrawerService_DeleteWithdrawer_Handler,
		},
		{
			MethodName: "GetExchangeWithdrawOptions",
			Handler:    _WithdrawerService_GetExchangeWithdrawOptions_Handler,
		},
		{
			MethodName: "GetExchangeDepositOptions",
			Handler:    _WithdrawerService_GetExchangeDepositOptions_Handler,
		},
		{
			MethodName: "GetWithdrawer",
			Handler:    _WithdrawerService_GetWithdrawer_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _WithdrawerService_Withdraw_Handler,
		},
		{
			MethodName: "WithdrawStatus",
			Handler:    _WithdrawerService_WithdrawStatus_Handler,
		},
		{
			MethodName: "ExportExchangeAccounts",
			Handler:    _WithdrawerService_ExportExchangeAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/withdraw.proto",
}

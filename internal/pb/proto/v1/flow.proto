syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "v1/shared.proto";
import "v1/task.proto";

package flow;
option go_package = "grpc/v1";


message FlowShared {
  string id = 1;
  string description = 2;
  string label = 3;
  string parent_id = 4;
  google.protobuf.Timestamp created_at = 5;
  optional google.protobuf.Timestamp deleted_at = 6;
  repeated Task tasks = 7;
  string creator_id = 8;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "description", "label", "parent_id", "created_at", "tasks", "creator_id"]

    }
  };
}

service FlowService {
  rpc UpdateFlow(UpdateFlowRequest) returns (UpdateFlowResponse) {
    option (google.api.http) = {
      post: "/api/gw/v1/flow/update",
      body: "*"
    };
  }
  rpc CreateFlow(CreateFlowRequest) returns (CreateFlowResponse) {
    option (google.api.http) = {
      post: "/api/gw/v1/flow/create",
      body: "*"
    };
  }

  rpc GetFlow(GetFlowRequest) returns (GetFlowResponse) {
    option (google.api.http) = {
      post: "/api/gw/v1/flow/get",
      body: "*"
    };
  }

  rpc ListFlow(ListFlowRequest) returns (ListFlowResponse) {
    option (google.api.http) = {
      post: "/api/gw/v1/flow/list",
      body: "*"
    };
  }

  rpc DeleteFlow(DeleteFlowRequest) returns (DeleteFlowResponse) {
    option (google.api.http) = {
      post: "/api/gw/v1/flow/delete",
      body: "*"
    };
  }

  rpc CopyFlow(CopyFlowReq) returns (CopyFlowRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/flow/copy",
      body: "*"
    };
  }

  rpc ShareFlow(ShareFlowReq) returns (ShareFlowRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/flow/publish",
      body: "*"
    };
  }

  rpc HideFlow(HideFlowReq) returns (HideFlowRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/flow/hide",
      body: "*"
    };
  }

  rpc SharedFlows(SharedFlowsReq) returns (SharedFlowsRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/flow/shared/list",
      body: "*"
    };
  }

  rpc SharedFlow(SharedFlowReq) returns (SharedFlowRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/flow-shared",
      body: "*"
    };
  }

  rpc UseSharedFlow(UseSharedFlowReq) returns (UseSharedFlowRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/flow-shared/use",
      body: "*"
    };
  }
}

message UseSharedFlowReq {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message UseSharedFlowRes {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message SharedFlowRes {
  FlowShared flow = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["flow"]
    }
  };
}

message SharedFlowReq {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message SharedFlowsReq {

}

message SharedFlowsRes {
  repeated FlowShared items = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["items"]
    }
  };
}

message ShareFlowReq {
  string id = 1;
  string description = 2;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "description"]
    }
  };
}

message ShareFlowRes {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message HideFlowReq {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message HideFlowRes{}

message CopyFlowReq {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message CopyFlowRes {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message GetFlowRequest {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message GetFlowResponse {
  Flow flow = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["flow"]
    }
  };
}

message Flow {
  string id = 1;
  string label = 2;
  repeated Task tasks = 5;
  optional string next_id = 6;
  google.protobuf.Timestamp created_at = 7;
  optional google.protobuf.Timestamp deleted_at = 8;
  repeated Task random_tasks = 9;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "label", "payload", "created_at", "tasks", "random_tasks"]
    }
  };
}



message WalletByWalletMode {
  int64 delayBetweenWallets = 1;
  int64 delayBetweenTransactions = 2;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["delayBetweenWallets", "delayBetweenTransactions"]
    }
  };
}

message Task {
  int64 weight = 1;
  task.TaskType taskType = 2;
  string description  = 3;
  oneof task {
    task.StargateBridgeTask stargateBridgeTask = 4;
    task.MockTask mock_task = 5; //deprecated
    task.DelayTask delay_task = 6;
    task.WithdrawExchangeTask withdrawExchangeTask= 7;
    task.OkexDepositTask okexDepositTask = 8;
    task.TestNetBridgeSwapTask testNetBridgeSwapTask= 9;
    task.SnapshotVoteTask snapshotVoteTask = 10;
    task.OkexBinanaceTask okexBinanaceTask = 11; //deprecated
    task.Swap1inchTask swap1inchTask = 12; //deprecated
    task.DefaultSwap syncSwapTask = 13;
    task.ZkSyncOfficialBridgeToEthereumTask  zkSyncOfficialBridgeToEthereumTask = 14;
    task.OrbiterBridgeTask orbiterBridgeTask = 15;
    task.ZkSyncOfficialBridgeFromEthereumTask zkSyncOfficialBridgeFromEthereumTask = 16;
    task.WETHTask wETHTask = 17;
    task.DefaultSwap muteioSwapTask = 18;
    task.DefaultLP syncSwapLPTask = 19;
    task.DefaultSwap maverickSwapTask = 20;
    task.DefaultSwap spaceFiSwapTask = 21;
    task.DefaultSwap velocoreSwapTask = 22;
    task.DefaultSwap izumiSwapTask = 23;
    task.DefaultSwap veSyncSwapTask = 24;
    task.DefaultSwap ezkaliburSwapTask = 25;
    task.DefaultSwap zkSwapTask = 26;
    task.DefaultSwap traderJoeSwapTask = 27;
    task.MerklyMintAndBridgeNFTTask merklyMintAndBridgeNFTTask = 28;
    task.DeployStarkNetAccountTask deployStarkNetAccountTask = 29;
    task.DefaultSwap swap10k = 30;
    task.DefaultSwap pancakeSwapTask = 31;
    task.DefaultSwap sithSwapTask = 32;
    task.DefaultSwap jediSwapTask = 33;
    task.DefaultSwap mySwapTask = 34;
    task.DefaultSwap protosSwapTask = 35;
    task.LiquidityBridgeTask starkNetBridgeTask = 36;
    task.SimpleTask dmailTask = 37;
    task.SimpleTask starkNetIdMintTask = 38;
    task.DefaultSwap odosSwapTask = 39;
    task.DefaultBridge acrossBridgeTask = 40;
    task.DefaultSwap avnuSwapTask = 41;
    task.DefaultSwap fibrousSwapTask = 42;
    task.ExchangeSwapTask exchangeSwapTask = 43;
    task.DefaultLP zkLendLPTask = 44;
    task.DefaultSwap woofiSwapTask = 45;
    task.DefaultLP aaveLPTask = 46;
    task.SimpleTask mintFunTask = 47;
    task.SimpleTask mintMerklyTask = 48;
    task.SimpleTask mintZeriusTask = 49;
  }

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["weight", "taskType", "description"]
    }
  };
}

message CreateFlowRequest {
   string label = 1;
  repeated Task tasks = 2;
  repeated Task random_tasks = 3;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["label", "tasks", "random_tasks"]
    }
  };
}

message UpdateFlowRequest {
  Flow flow = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["flow"]
    }
  };
}
message UpdateFlowResponse {
  Flow flow = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["flow"]
    }
  };
}
message CreateFlowResponse {
    Flow flow = 1;
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        required: ["flow"]
      }
    };
}

message ListFlowRequest {

}

message ListFlowResponse {
  repeated Flow flows = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["flows"]
    }
  };
}

message DeleteFlowRequest {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message DeleteFlowResponse {

}
syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "v1/shared.proto";

package issue;
option go_package = "grpc/v1";

enum IssueStatus {
  Created = 0;
  Processing = 1;
  Finished = 2;

}

message Issue {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  optional google.protobuf.Timestamp finished_at = 3;
   string created_by = 4;
   string title = 5;
   string description = 6;
  IssueStatus status = 7;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "created_at", "created_by", "title", "description", "status"]
    }
  };
}

message IssueComment {
  string id = 1;
  string issue_id = 2;
  string creator_id = 3;
  string description = 4;
  google.protobuf.Timestamp created_at = 5;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "issue_id", "creator_id", "description", "created_at"]
    }
  };
}

service IssueService {
  rpc Issues(IssuesReq) returns (IssuesRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/issue/list",
      body: "*"
    };
  }

  rpc IssuesUser(IssuesReq) returns (IssuesRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/issue/user-list",
      body: "*"
    };
  }

  rpc CreateIssue(CreateIssueReq) returns (CreateIssueRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/issue/create",
      body: "*"
    };
  }

  rpc DeleteIssue(DeleteIssueReq) returns (DeleteIssueRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/issue/delete",
      body: "*"
    };
  }

  rpc Issue(IssueReq) returns (IssueRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/issue/get",
      body: "*"
    };
  }

  rpc IssueUpdateStatus(IssueUpdateStatusReq) returns (IssueUpdateStatusRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/issue/status/update",
      body: "*"
    };
  }

  rpc AddComment(AddCommentReq) returns (AddCommentRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/issue/comment/add",
      body: "*"
    };
  }

  rpc DeleteComment(DeleteCommentReq) returns (DeleteCommentRes) {
    option (google.api.http) = {
      post: "/api/gw/v1/issue/comment/delete",
      body: "*"
    };
  }
}

message DeleteCommentRes {

}

message DeleteCommentReq {
  string comment_id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["comment_id"]
    }
  };
}

message AddCommentReq {
  string issue_id = 1;
  string text = 2;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "text"]
    }
  };
}

message AddCommentRes{}

message IssueUpdateStatusReq {
  string issue_id = 1;
  IssueStatus status = 2;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "status"]
    }
  };
}

message IssueUpdateStatusRes {}

message IssueRes {
  Issue issue = 1;
  repeated IssueComment comments = 2;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "comments"]
    }
  };
}

message IssueReq {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message DeleteIssueReq {
  string issue_id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["issue_id"]
    }
  };
}
message DeleteIssueRes {

}
message CreateIssueRes {

}

message CreateIssueReq {
  string title = 1;
  string description = 2;
  optional string process_id = 3;
  optional string taskid = 4;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["title", "description"]
    }
  };
}

message IssuesRes {
  repeated Issue items = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["items"]
    }
  };
}

message IssuesReq {
  int64 limit = 1;
  int64 offset = 2;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["limit", "offset"]
    }
  };
}


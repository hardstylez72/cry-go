package zksyncera

import (
	"context"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/hardstylez72/cry/internal/defi"
	v1 "github.com/hardstylez72/cry/internal/pb/gen/proto/go/v1"
	"github.com/hardstylez72/cry/internal/tests"
	"github.com/stretchr/testify/assert"
)

func TestStargate(t *testing.T) {
	c, err := NewMainNetClient(&ClientConfig{RPCEndpoint: MainNetURL, HttpCli: tests.GetConfig().Cli})
	assert.NoError(t, err)
	assert.NotNil(t, c)
	r := &stargateBridgeMaker{c}

	ctx := context.Background()

	t.Run("MAV (zksync era -> bnb)", func(t *testing.T) {
		//t.Skip()
		am := defi.TokenAmountFloatToWEI(1, v1.Token_MAV)

		req := &defi.DefaultBridgeReq{
			FromNetwork:  v1.Network_ZKSYNCERA,
			ToNetwork:    v1.Network_BinanaceBNB,
			PK:           tests.GetConfig().PK,
			Amount:       am,
			FromToken:    v1.Token_MAV,
			ToToken:      v1.Token_MAV,
			Gas:          nil,
			EstimateOnly: false,
			Debug:        true,
		}

		data, err := r.MakeBridgeTx(ctx, req)
		assert.NoError(t, err)
		println("have: " + "0x" + common.Bytes2Hex(data.Data))
		println("want: 0x498eff64000000000000000000000000787c09494ec8bcb24dcaf8659e7d5d69979ee508000000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000dcef33a6f8380000000000000000000000000004a6e7c137a6691d55693ca3bc7e5c698d9d43815000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144a6e7c137a6691d55693ca3bc7e5c698d9d438150000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000100000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000000")
	})

}
